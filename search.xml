<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>定时自动获取动态公网IP</title>
    <url>/Blog/2020/06/18/%E5%AE%9A%E6%97%B6%E8%87%AA%E5%8A%A8%E8%8E%B7%E5%8F%96%E5%8A%A8%E6%80%81%E5%85%AC%E7%BD%91IP.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\Blog\assets\css\APlayer.min.css"><script src="\Blog\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\Blog\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>这篇博文主要是为了解决远程连接（Windows<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[微软系统使用手册](https://linwhitehat.github.io/Blog/2020/01/28/%E5%BE%AE%E8%BD%AF%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C.html)
">[1]</span></a></sup>和Linux<sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Linux使用手册](https://linwhitehat.github.io/Blog/2020/06/16/Linux%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C.html)
">[2]</span></a></sup>的使用手册均有记录）目标的公网IP是动态变化带来的一些麻烦，但是又不希望花费过多的时间去备案域名做DDNS，尽管也有不需要备案域名的，但是基于只需要知道当前公网IP的简单需求，我还是动手写个小工具AODI，用于定时发送邮件告知自己远程机器的公网IP地址。</p>
<a id="more"></a>

<h2 id="GitHub项目"><a href="#GitHub项目" class="headerlink" title="GitHub项目"></a>GitHub项目</h2><p>目前AODI已上传GitHub仓库，点击<a href="https://github.com/linwhitehat/AODI" target="_blank" rel="noopener external nofollow noreferrer">AODI</a>即可获取源码及使用说明。</p>
<h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><h3 id="获取准确的公网IP"><a href="#获取准确的公网IP" class="headerlink" title="获取准确的公网IP"></a>获取准确的公网IP</h3><p>从需求可以很明确目标就是当前远程机器的公网IP，自然最重要的就是获取到准备的公网IP，出于保险考虑，从以下两部分来源进行获取：</p>
<ol>
<li>开放的IP地址查询网站<br>目前互联网上开放不少支持IP查询的网站，但是质量参差不齐，我测试过后选择了三个网站作为候选，在获取公网IP时对候选网站逐个轮询直到成功获取当前公网IP，经过调研和测试，这三个网站相对可靠和稳定。<blockquote>
<p>候选测试IP网站</p>
<ul>
<li><p><a href="http://ipv4.icanhazip.com" target="_blank" rel="noopener external nofollow noreferrer">http://ipv4.icanhazip.com</a></p>
</li>
<li><p><a href="https://ip.cn" target="_blank" rel="noopener external nofollow noreferrer">https://ip.cn</a></p>
</li>
<li><p><a href="https://httpbin.org/ip" target="_blank" rel="noopener external nofollow noreferrer">https://httpbin.org/ip</a></p>
</li>
</ul>
</blockquote>
</li>
</ol>
<p>由于这类网站相对信息简单，只需要简单进行<code>GET</code>请求即可获取到IP信息，因此不再赘述python部分内容。</p>
<ol start="2">
<li>路由器网关配置<br>除了上述网站进行IP查询之外，用户可自行添加测试IP网站，但是为了避免获取到不准确的公网IP，基于路由器网关配置的WAN口地址查询可以作为后备方法。通过访问路由器后台管理页面，通过身份验证后，查询对应的网络信息，由此即可获取到准确的公网IP，可以作为上述方法的备选方案也可以作为校验方法，甚至可以只使用这种方法直接获取公网IP。获取步骤如下：<br>①获取远程机器所在路由器的后台管理地址，一些路由器并非只使用网关地址作为后台管理地址，因此需要自己进行确认后配置完整地址；<br>②身份验证，设置登录的账户名和密码作为<code>POST</code>请求的数据内容进行模拟登录，并使用<code>session</code>方法记录当前登录状态；<br>③获取网关信息，模拟登录之后通常不会显示在网关信息页面，定位到网关信息所在的页面，使用<code>GET</code>方法获取WAN口对应的IP信息。</li>
</ol>
<p><strong>注意</strong><br>网关信息页面不一定就是浏览器地址栏显示的地址，最好是使用浏览器开发者工具，观察页面变化信息，找到对应请求时的完整地址信息（如下图），确保顺利获取到WAN口地址。<br><img src="/Blog/images/AODI_1.png" alt="获取网关页面地址"><i class="img-caption">☆ 获取网关页面地址</i></p>
<h3 id="邮件通知"><a href="#邮件通知" class="headerlink" title="邮件通知"></a>邮件通知</h3><p>在远程机器获取到公网IP地址之后，便需要通知用户本人，便于其进行远程连接使用，自然想到邮件通知了。由于现在邮件系统五花八门，基于不同邮件系统存在些许差异，但是整体思路还是不变的，即开启邮件的SMTP服务并由客户端发送邮件。步骤说明如下：<br>①邮件系统开通SMTP，无论是QQ邮箱、网易邮箱或其他邮箱，默认应该都没有开启SMTP，因此需要申请开通；<br><img src="/Blog/images/AODI_2.png" alt="开通SMTP"><i class="img-caption">☆ 开通SMTP</i><br>②开通SMTP之后，需要确认对应的邮件系统是否使用默认SMTP端口，有特殊的话一般会说明，可自行查看确认；<br>③编写邮件，需要完整填写发件人邮箱地址，密码或授权码，收件人邮箱地址，SMTP服务器地址，邮件内容，信息无误便可发送邮件。</p>
<h2 id="定时"><a href="#定时" class="headerlink" title="定时"></a>定时</h2><p>尽管python本身可定制定时功能，但此处还是将其移至系统层面处理，分别叙述Linux和Windows下的定时方法。</p>
<h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><ol>
<li>crontab<br>用于Linux系统下定期执行任务的命令<sup id="fnref:9"><a href="#fn:9" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Cron](https://zh.wikipedia.org/zh-hans/Cron)
">[9]</span></a></sup>，使用方法如下：<br><img src="/Blog/images/AODI_3.png" alt="crontab使用方法"><i class="img-caption">☆ crontab使用方法</i></li>
</ol>
<p><strong>基本格式 :</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">  *　　*　　*　　*　　*　　command</span><br><span class="line"><span class="meta">#</span><span class="bash"> m　  h　 d　  M　  W　  命令</span></span><br></pre></td></tr></table></figure>
<p>第1列表示分钟1～59 每分钟用<em>或者 <em>/1表示<br>第2列表示小时1～23（0表示午夜0点）<br>第3列表示日期1～31<br>第4列表示月份1～12<br>第5列标识号星期0～6（0表示星期天）<br>第6列要运行的命令<br>2. atd<br>用于Linux下只执行</em></em>一次**计划任务，在默认情况下，Linux系统是开启了atd这个服务的。如果不确认你的Linux是否开启了atd服务，请使用下面这个命令查看，若未开启可自行开启：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/etc/init.d/atd status # 查看是否开启</span><br><span class="line">/etc/init.d/atd start # 开启服务</span><br></pre></td></tr></table></figure>

<h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><ol>
<li>at<br>根据官方文档<sup id="fnref:10"><a href="#fn:10" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Creating and managing scheduled tasks from the Command Line](https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2003/cc738335(v=ws.10)?redirectedfrom=MSDN)
">[10]</span></a></sup>说明，此命令适用于Windows server，使用语法如下：<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">at [[\\ComputerName] Hours:Minutes [/interactive] [&#123;/every:Date[,...] | /next:Date[,...]&#125;] Command]</span><br></pre></td></tr></table></figure></li>
<li>schtasks<br>此命令可定时运行指定任务，使用参数<code>/sc</code>指定定时单位如分钟，使用参数<code>/mo</code>指定时长间隔，使用参数<code>/tn</code>指定任务名称且必须唯一，使用参数<code>/tr</code>指定程序任务，使用举例如下：<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 间隔10分钟启动 notepad</span></span><br><span class="line">schtasks /create /sc minute /mo 10 /tn "Security Script" /tr  C:\Windows\System32\notepad.exe</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>本文旨在分享小工具用于日常需求，应用场景可能不局限于此文所述，也可以将AODI封装于其他工具作为小功能。</p>
<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://linwhitehat.github.io/Blog/2020/01/28/%E5%BE%AE%E8%BD%AF%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C.html">微软系统使用手册</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://linwhitehat.github.io/Blog/2020/06/16/Linux%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C.html">Linux使用手册</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://zhuanlan.zhihu.com/p/25565454" target="_blank" rel="noopener external nofollow noreferrer">使用Python登录QQ邮箱发送QQ邮件</a><a href="#fnref:3" rev="footnote"> ↩</a></span></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">4.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.kancloud.cn/smilesb101/python3_x/298894#_44" target="_blank" rel="noopener external nofollow noreferrer">SMTP发送邮件</a><a href="#fnref:4" rev="footnote"> ↩</a></span></li><li id="fn:5"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">5.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://juejin.im/post/5bd6acdbf265da0aba710136" target="_blank" rel="noopener external nofollow noreferrer">Python 爬虫模拟登录方法汇总</a><a href="#fnref:5" rev="footnote"> ↩</a></span></li><li id="fn:6"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">6.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.cnblogs.com/insane-Mr-Li/p/9121619.html" target="_blank" rel="noopener external nofollow noreferrer">python：利用smtplib模块发送邮件详解</a><a href="#fnref:6" rev="footnote"> ↩</a></span></li><li id="fn:7"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">7.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://learnku.com/docs/pymotw/smtplib-simple-mail-transfer-protocol-client/3444" target="_blank" rel="noopener external nofollow noreferrer">python3实例库教程 14.2. smtplib — SMTP 协议客户端</a><a href="#fnref:7" rev="footnote"> ↩</a></span></li><li id="fn:8"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">8.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.cnblogs.com/youxin/p/3584145.html" target="_blank" rel="noopener external nofollow noreferrer">linux crontab 计划任务 atd和windows下的计划任务</a><a href="#fnref:8" rev="footnote"> ↩</a></span></li><li id="fn:9"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">9.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://zh.wikipedia.org/zh-hans/Cron" target="_blank" rel="noopener external nofollow noreferrer">Cron</a><a href="#fnref:9" rev="footnote"> ↩</a></span></li><li id="fn:10"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">10.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2003/cc738335(v=ws.10)?redirectedfrom=MSDN" target="_blank" rel="noopener external nofollow noreferrer">Creating and managing scheduled tasks from the Command Line</a><a href="#fnref:10" rev="footnote"> ↩</a></span></li><li id="fn:11"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">11.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.kawabangga.com/posts/1398" target="_blank" rel="noopener external nofollow noreferrer">树莓派通过邮件上报实时IP，随时随地远程登录树莓派</a><a href="#fnref:11" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>技术分享</category>
        <category>Code</category>
        <category>工具库</category>
      </categories>
      <tags>
        <tag>Python3</tag>
        <tag>动态IP</tag>
        <tag>树莓派</tag>
        <tag>raspberry</tag>
        <tag>dynamic IP</tag>
        <tag>SMTP</tag>
        <tag>WAN</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux使用手册</title>
    <url>/Blog/2020/06/16/Linux%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\Blog\assets\css\APlayer.min.css"><script src="\Blog\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\Blog\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><a href="https://ubuntu.com/" target="_blank" rel="noopener external nofollow noreferrer">Ubuntu</a>作为Linux系统分支中十分流行的操作系统，2020年以前已经发布最新19.10版本，同时全球市场占有率也排名第3（<a href="https://zh.hostadvice.com/marketshare/os/" target="_blank" rel="noopener external nofollow noreferrer">统计来源</a>），作为经典的Linux桌面系统，目前的生态是向好的，而且即将发布的Ubuntu 20.04 LTS也许将带来更多的惊喜，对于想尝试Linux系统的新手而言，这是挺好的一个选择。现在Ubuntu的中文支持也很好，推出了中文版Ubuntu即优麒麟（<a href="https://cn.ubuntu.com/desktop" target="_blank" rel="noopener external nofollow noreferrer">Ubuntu Kylin</a>）。本文的很多用法不局限于个人使用较多的Ubuntu或商业使用较多的Centos，对于多数常用的Linux发行版本都可适用。<br><img src="/Blog/images/Linux-2.jpg" alt="Ubuntu 20.04"><i class="img-caption">☆ Ubuntu 20.04</i></p>
<a id="more"></a>
<p>根据2020年5月Statcounter的调查，桌面操作系统市场中Linux占比为<code>1.68%</code>，而根据W3Techs的调查，服务器操作系统Linux占比达到<code>43.1%</code>，根据Top500的统计，2019始超级电脑操作系统占比中Linux则占据<code>100%</code>。相比于Windows占据桌面操作系统市场，Linux在服务器端以及超级电脑方面则处于绝对地位，对Linux及其衍生系统的学习也是必要的。<br><img src="/Blog/images/Linux-1-1.png" alt="Linux全球桌面操作系统占比"><i class="img-caption">☆ Linux全球桌面操作系统占比</i><br><img src="/Blog/images/Linux-1-2.png" alt="Linux全球服务器操作系统占比"><i class="img-caption">☆ Linux全球服务器操作系统占比</i></p>
<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><p>Ubuntu的文件系统目录结构可以参照Linux的目录结构，相比使用Windows系统，在使用Linux系统中对文件目录的了解是至关重要的。此处我罗列了Linux的文件系统目录标准（FHS）以及特殊的目录及用途<sup id="fnref:11"><a href="#fn:11" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Linux思维导图整理](https://www.jianshu.com/p/59f759207862)
">[11]</span></a></sup>。</p>
<ol>
<li>FHS<br><img src="/Blog/images/Linux-15.jpg" alt="文件系统目录标准"><i class="img-caption">☆ 文件系统目录标准</i></li>
<li>特殊目录<br><img src="/Blog/images/Linux-16.png" alt="特殊目录"><i class="img-caption">☆ 特殊目录</i></li>
</ol>
<h3 id="Linux终端命令"><a href="#Linux终端命令" class="headerlink" title="Linux终端命令"></a>Linux终端命令</h3><p>使用Linux系统则意味着可以随时摆脱桌面的存在，将更多资源赋予更需要的程序进程使用，而脱离桌面后所有的系统操作都将使用终端下的命令来完成，这也使得操作更加快捷高效。之前看到来自<a href="https://linuxtoy.org/" target="_blank" rel="noopener external nofollow noreferrer">LinuxTOY</a>的一份<code>Unix/Linux 命令参考</code><sup id="fnref:10"><a href="#fn:10" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Unix/Linux 命令参考](https://i.linuxtoy.org/files/pdf/fwunixref.pdf)
">[10]</span></a></sup>，便转载自此，基本都是常用且基础的终端命令。</p>
<ol>
<li>文件命令<br><img src="/Blog/images/Linux-5.png" alt="文件命令"><i class="img-caption">☆ 文件命令</i></li>
<li>系统信息<br><img src="/Blog/images/Linux-6.png" alt="系统信息"><i class="img-caption">☆ 系统信息</i></li>
<li>压缩<br><img src="/Blog/images/Linux-7.png" alt="压缩"><i class="img-caption">☆ 压缩</i></li>
<li>进程管理<br><img src="/Blog/images/Linux-8.png" alt="进程管理"><i class="img-caption">☆ 进程管理</i></li>
<li>网络<br><img src="/Blog/images/Linux-9.png" alt="网络"><i class="img-caption">☆ 网络</i></li>
<li>文件权限<br><img src="/Blog/images/Linux-10.png" alt="文件权限"><i class="img-caption">☆ 文件权限</i></li>
<li>安装<br><img src="/Blog/images/Linux-11.png" alt="安装"><i class="img-caption">☆ 安装</i></li>
<li>SSH<br><img src="/Blog/images/Linux-12.png" alt="SSH"><i class="img-caption">☆ SSH</i></li>
<li>快捷键<br><img src="/Blog/images/Linux-13.png" alt="快捷键"><i class="img-caption">☆ 快捷键</i></li>
<li>搜索<br><img src="/Blog/images/Linux-14.png" alt="搜索"><i class="img-caption">☆ 搜索</i></li>
</ol>
<h3 id="修改软件源"><a href="#修改软件源" class="headerlink" title="修改软件源"></a>修改软件源</h3><p>在Linux的软件管理体系中，软件源是关键所在，由于流行Linux系统多数服务器不在国内，不少国内用户安装完Linux系统之后首要做的就是修改软件源，这样更新或安装下载时速度会相对快。针对不同的Linux发行版，软件源是存在差异的，从我认知的主流Linux分支操作系统而言，可以有以下两种：<br>①Ubuntu（Debian），使用apt-get源，使用包管理工具 Advanced Packaging Tool；<br>②CentOS，使用yum源，使用软件包管理器 Yellow dog Updater, Modified。<br>这两种的源修改方式原理是一致的，所以我按以下步骤来叙述：</p>
<ol>
<li>国内源<br>国内不少企业或高校都有做源镜像，选择也有很多，我这里主要介绍阿里源、中科大源、清华源和网易源（均以Ubuntu为例）：<br>①阿里源，即<a href="https://developer.aliyun.com/mirror/" target="_blank" rel="noopener external nofollow noreferrer">阿里云开源镜像站</a>，选择<code>Ubuntu</code>，会给出不同版本所需的源信息，使用对应版本的即可。<br>②中科大源，即<a href="http://mirrors.ustc.edu.cn/help/index.html" target="_blank" rel="noopener external nofollow noreferrer">USTC Mirror</a>，选择<code>Ubuntu源使用帮助</code>，会给出详细的源修改过程与选择。<br>③清华源，即<a href="https://mirrors.tuna.tsinghua.edu.cn/" target="_blank" rel="noopener external nofollow noreferrer">清华大学开源软件镜像站</a>，选择<code>Ubuntu</code>旁边的<code>❓</code>即可看到源信息。<br>④网易源，即<a href="https://mirrors.163.com/" target="_blank" rel="noopener external nofollow noreferrer">网易开源镜像站</a>，选择最右侧一栏的<code>Ubuntu使用帮助</code>即可看到不同版本的源信息。</li>
<li>更改源路径<br>在修改源之前，对旧源文件做个备份，之后即可添加上述任意一个国内源信息到Ubuntu源文件<code>sources.list</code>或下载源文件到centos生成缓存，完成源文件修改如下：<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Ubuntu</span></span><br><span class="line">sudo cp /etc/apt/sources.list /etc/apt/sources.list.backup</span><br><span class="line">sudo vim /etc/apt/sources.list #之后添加国内源信息到文件并保存</span><br><span class="line">sudo apt-get update &amp;&amp; sudo apt-get upgrade</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> CentOS</span></span><br><span class="line">mv /etc/yum.repos.d/Centos.repo /etc/yum.repos.d/Centos.repo.backup</span><br><span class="line">cd /etc/yum.repos.d/</span><br><span class="line">wget http://mirrors.163.com/.help/CentOS6-Base-163.repo</span><br><span class="line">yum clean all; yum makecache</span><br><span class="line">yum -y update</span><br></pre></td></tr></table></figure></li>
<li>源描述<sup id="fnref:12"><a href="#fn:12" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[关于Linux软件源](https://www.jianshu.com/p/234b196791fb)
">[12]</span></a></sup><br>其实源本身是有一定结构的，以Ubuntu16.04版本的中科大源为例子：<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ xenial main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.ustc.edu.cn/ubuntu/ xenial main restricted universe multiverse</span></span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ xenial-updates main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.ustc.edu.cn/ubuntu/ xenial-updates main restricted universe multiverse</span></span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ xenial-backports main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.ustc.edu.cn/ubuntu/ xenial-backports main restricted universe multiverse</span></span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ xenial-security main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.ustc.edu.cn/ubuntu/ xenial-security main restricted universe multiverse</span></span><br></pre></td></tr></table></figure>
①第一个单词代表包的类型，deb表示二进制包，deb-src表示源码包。<br>②第二个网址表示源的地址。<br>③第三个单词表示系统的版本，既可以是[ wheezy | jessie | stretch | sid ]中的一种，也可以是[ oldstable | stable | testing | unstable ]中的一种。前一个系列表示系统的release code name，后一个系列表示系统的release class，前者按阶段发布，后者持续演进。例如在Ubuntu系统中，<code>xenial</code>代表的是Ubuntu16.04版本，如果是其他版本可将其替换为其他版本代号即可: <code>20.04</code>:<code>focal</code>；<code>18.04</code>：<code>bionic</code>；<code>17.10</code>：<code>artful</code>；<code>16.04</code>：<code>xenial</code>；<code>14.04</code>：<code>trusty</code>。<br>④第四部分表示接受哪种开源类型的软件，可以包含[ main | contrib | non-free ]中的一个或多个。main表示纯正的遵循Debian开源规范的软件，contrib表示遵循Debian开源规范但依赖于其它不遵循Debian开源规范的软件的软件，non-free表示不遵循Debian开源规范的软件。Debian开源规范指DFSG（Debian 自由软件指导方针）。</li>
</ol>
<h3 id="中文输入法"><a href="#中文输入法" class="headerlink" title="中文输入法"></a>中文输入法</h3><p>Linux系统本身输入法并没有带中文输入，对于习惯使用中文环境的国人会比较不适应，尽管常态下英文也足够使用，但是增加中文输入法并不困难，在熟悉的输入法下也会舒服一点。默认情况下，Ubuntu系统自带中文输入法，且切换快捷键为<code>win+space</code>，但是体验并不流畅，故我更愿意花几分钟安装更舒服的中文输入法。中文输入法（Ubuntu）设置步骤如下：</p>
<ol>
<li>设置语言<br>Ubuntu18.04环境下，点击系统设置<code>Settings -&gt; Region&amp;Language -&gt; Manage Installed Languages -&gt;language support</code>，首次会要求安装默认语言和输入法并输入密码，可以看到默认的输入法是IBus。</li>
<li>安装中文输入法<br>此处选择安装的中文输入法是fcitx（Fcitx[ˈfaɪtɪks]是 （Free Chinese Input Toy for X） 的英文缩写，中文名为小企鹅输入法），执行<code>sudo apt-get install fcitx-table-wbpy</code>安装fcitx，然后在输入法设置处选择<code>fcutx</code>然后重启。<br><img src="/Blog/images/Linux-pinyin-1.png" alt="选择输入法"><i class="img-caption">☆ 选择输入法</i></li>
<li>配置输入法<br>重启后，在桌面菜单栏右上角可以看到多出一个类似键盘的图标即fcitx，点击选择<code>Configuration</code>或中文语言下的<code>配置</code>,添加输入法，默认存在英语输入法，再添加拼音即可，如果当前系统语言非中文环境，则不要勾选<code>Only Show Current Language</code>，添加完成拼音之后，按下快捷键<code>Ctrl+Space</code>即可切换中英文输入法。<br><img src="/Blog/images/Linux-fcitx.png" alt="fcitx输入法图标"><i class="img-caption">☆ fcitx输入法图标</i><br><img src="/Blog/images/Linux-fcitx-2.png" alt="fcitx输入法"><i class="img-caption">☆ fcitx输入法</i><br><img src="/Blog/images/Linux-pinyin-2.png" alt="配置输入法"><i class="img-caption">☆ 配置输入法</i><br><img src="/Blog/images/Linux-pinyin-3.png" alt="添加拼音输入法"><i class="img-caption">☆ 添加拼音输入法</i><br><img src="/Blog/images/Linux-pinyin-4.png" alt="使用中文输入法"><i class="img-caption">☆ 使用中文输入法</i></li>
</ol>
<h3 id="系统磁盘清理"><a href="#系统磁盘清理" class="headerlink" title="系统磁盘清理"></a>系统磁盘清理</h3><p>当系统磁盘存储空间被占满后，许多便捷的操作会受限而无法继续，同时写操作也将无法进行，此时找到占用存储空间最大的文件并删除是较快速清理磁盘空间的方法。执行<code>df -h</code>可以查看当前磁盘空间占用情况，之后便通过<code>df</code>和<code>du</code>进行大文件的快速定位：<br>定位的方法便是从根目录开始，找出每一级目录下存储占用最高的目录，逐级查找，直至找到最终文件，通过逐级对大文件目录的递减排序可以很快找到占用空间大的文件，查找命令如下。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">du -h / --max-depth=1 | sort -hr | head -n 10</span><br></pre></td></tr></table></figure>

<h3 id="vim编辑器"><a href="#vim编辑器" class="headerlink" title="vim编辑器"></a>vim编辑器</h3><p>作为Linux系统下默认的编辑器，也是手撸代码的利器，不掌握基本的使用对使用Linux系统还是有些许不便，因此我参照菜鸟教程<sup id="fnref:16"><a href="#fn:16" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Linux vi/vim](https://www.runoob.com/linux/linux-vim.html)
">[16]</span></a></sup>简要叙述vim的基本使用。<br><img src="/Blog/images/vi-vim-cheat-sheet.gif" alt="vim键盘图"><i class="img-caption">☆ vim键盘图</i></p>
<ol>
<li>vim使用<br>vi/vim 共分为三种模式，分别是命令模式（Command mode），输入模式（Insert mode）和底线命令模式（Last line mode）。 这三种模式的作用分别是：<br>①命令模式。用户在终端输入<code>vi</code>或<code>vim</code>，便进入了命令模式。此状态下敲击键盘动作会被Vim识别为命令，而非输入字符。常用命令如下：</li>
</ol>
<ul>
<li><code>i</code>：切换到输入模式，以输入字符</li>
<li><code>x</code>：删除当前光标所在处的字符</li>
<li><code>:</code>：切换到底线命令模式，以在最底一行输入命令<br>②输入模式。在命令模式下按下<code>i</code>就进入了输入模式。在输入模式中，可以使用以下按键：</li>
<li>字符按键以及Shift组合，输入字符</li>
<li>ENTER，回车键，换行</li>
<li>BACK SPACE，退格键，删除光标前一个字符</li>
<li>DEL，删除键，删除光标后一个字符</li>
<li>方向键，在文本中移动光标</li>
<li>HOME/END，移动光标到行首/行尾</li>
<li>Page Up/Page Down，上/下翻页</li>
<li>Insert，切换光标为输入/替换模式，光标将变成竖线/下划线</li>
<li>ESC，退出输入模式，切换到命令模式<br>③底线命令模式。在命令模式下按下<code>:</code>（英文冒号）就进入了底线命令模式。底线命令模式可以输入单个或多个字符的命令，在底线命令模式中，基本的命令有：</li>
<li><code>q</code>：退出程序</li>
<li><code>w</code>：保存文件</li>
<li>按ESC键可随时退出底线命令模式<br><img src="/Blog/images/Linux-17.png" alt="vim工作模式状态图"><i class="img-caption">☆ vim工作模式状态图</i></li>
</ul>
<ol start="2">
<li>按键说明<br>在上述基本使用的按键之外，vim还有许多按键可用，对于三种模式下依然有不同的按键。此处简要列述常用的部分，其余可参照菜鸟教程<sup id="fnref:16"><a href="#fn:16" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Linux vi/vim](https://www.runoob.com/linux/linux-vim.html)
">[16]</span></a></sup>叙述。<br>①一般模式下可用的光标移动、复制粘贴、搜索等：<table>
<tr>
 <td colspan="2">移动光标的方法</td>
</tr>
<tr>
 <td>h 或 向左箭头键(←)</td>
 <td>光标向左移动一个字符</td>
</tr>
<tr>
 <td>j 或 向下箭头键(↓)</td>
 <td>光标向下移动一个字符</td>
</tr>
<tr>
 <td>k 或 向上箭头键(↑)</td>
 <td>光标向上移动一个字符</td>
</tr>
<tr>
 <td>l 或 向右箭头键(→)</td>
 <td>光标向右移动一个字符</td>
</tr>
<tr>
 <td>0 或功能键[Home]</td>
 <td>数字 0：移动到这一行的最前面字符处 (常用)</td>
</tr>
<tr>
 <td>$ 或功能键[End]</td>
 <td>移动到这一行的最后面字符处(常用)</td>
</tr>
<tr>
 <td colspan="2">搜索替换</td>
</tr>
<tr>
 <td>/word</td>
 <td>向光标之下寻找一个名称为 word 的字符串。例如要在档案内搜寻 vbird 这个字符串，就输入 /vbird 即可！ (常用)</td>
</tr>
<tr>
 <td>?word</td>
 <td>向光标之上寻找一个字符串名称为 word 的字符串。</td>
</tr>
<tr>
 <td>n</td>
 <td>这个 n 是英文按键。代表重复前一个搜寻的动作。举例来说， 如果刚刚我们执行 /vbird 去向下搜寻 vbird 这个字符串，则按下 n 后，会向下继续搜寻下一个名称为 vbird 的字符串。如果是执行 ?vbird 的话，那么按下 n 则会向上继续搜寻名称为 vbird 的字符串！</td>
</tr>
<tr>
 <td>N</td>
 <td>这个 N 是英文按键。与 n 刚好相反，为『反向』进行前一个搜寻动作。 例如 /vbird 后，按下 N 则表示『向上』搜寻 vbird 。</td>
</tr>
</table>
②一般模式切换到编辑模式的可用的按键如下（下述这些按键中，在 vi 画面的左下角处会出现『--INSERT--』或『--REPLACE--』的字样。 由名称就知道该动作了。特别注意的是，上面也提过了，你想要在文档里面输入字符时， 一定要在左下角处看到 INSERT 或 REPLACE 才能输入。）：
<table>
<tr>
 <td colspan="2">进入输入或取代的编辑模式</td>
</tr>
<tr>
 <td>i, I</td>
 <td>进入输入模式(Insert mode)：i 为『从目前光标所在处输入』， I 为『在目前所在行的第一个非空格符处开始输入』。 (常用)</td>
</tr>
<tr>
 <td>a, A</td>
 <td>进入输入模式(Insert mode)：a 为『从目前光标所在的下一个字符处开始输入』， A 为『从光标所在行的最后一个字符处开始输入』。(常用)</td>
</tr>
<tr>
 <td>o, O</td>
 <td>进入输入模式(Insert mode)：英文字母 o 为『在目前光标所在的下一行处输入新的一行』，大写字母 O 为在目前光标所在处的上一行输入新的一行！(常用)</td>
</tr>
<tr>
 <td>r, R</td>
 <td>进入取代模式(Replace mode)：r 只会取代光标所在的那一个字符一次；R会一直取代光标所在的文字，直到按下 ESC 为止；(常用)</td>
</tr>
<tr>
 <td>[Esc]</td>
 <td>退出编辑模式，回到一般模式中(常用)</td>
</tr>
</table>
③一般模式切换到指令行模式的可用的按键如下（注意一下啊，惊叹号 (!) 在 vi 当中，常常具有『强制』的意思～）：
<table>
<tr>
 <td colspan="2">指令行的储存、离开等指令</td>
</tr>
<tr>
 <td>:w</td>
 <td>将编辑的数据写入硬盘档案中(常用)</td>
</tr>
<tr>
 <td>:w!</td>
 <td>若文件属性为『只读』时，强制写入该档案。不过，到底能不能写入， 还是跟你对该档案的档案权限有关啊！</td>
</tr>
<tr>
 <td>:q</td>
 <td>离开 vi (常用)</td>
</tr>
<tr>
 <td>:q!</td>
 <td>若曾修改过档案，又不想储存，使用 ! 为强制离开不储存档案。</td>
</tr>
<tr>
 <td>:wq</td>
 <td>储存后离开，若为 :wq! 则为强制储存后离开 (常用)</td>
</tr>
<tr>
 <td>ZZ</td>
 <td>这是大写的 Z 喔！若档案没有更动，则不储存离开，若档案已经被更动过，则储存后离开！</td>
</tr>
<tr>
 <td>:w [filename]</td>
 <td>将编辑的数据储存成另一个档案（类似另存新档）</td>
</tr>
<tr>
 <td>:r [filename]</td>
 <td>在编辑的数据中，读入另一个档案的数据。亦即将 『filename』 这个档案内容加到游标所在行后面</td>
</tr>
<tr>
 <td>:n1,n2 w [filename]</td>
 <td>将 n1 到 n2 的内容储存成 filename 这个档案。</td>
</tr>
<tr>
 <td>:! command</td>
 <td>暂时离开 vi 到指令行模式下执行 command 的显示结果！例如『:! ls /home』即可在 vi 当中察看 /home 底下以 ls 输出的档案信息！</td>
</tr>
</table>

</li>
</ol>
<h2 id="进阶使用"><a href="#进阶使用" class="headerlink" title="进阶使用"></a>进阶使用</h2><h3 id="修改root密码"><a href="#修改root密码" class="headerlink" title="修改root密码"></a>修改root密码</h3><p>默认Ubuntu下安装完系统只是设置了用户账号密码，root用户则处于默认情况，要更改root密码可在当前用户下执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo passwd root</span><br></pre></td></tr></table></figure>
<p>输入两次需要设置的密码即可，密码是看不到的，如果输错则无法撤销，可以按下<code>ctrl + C</code>然后重新执行上述命令设置密码。</p>
<h3 id="使用root登录ssh"><a href="#使用root登录ssh" class="headerlink" title="使用root登录ssh"></a>使用root登录ssh</h3><p>修改<code>ssh</code>登录的配置文件<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Ubuntu 18.04 使用root 帐号登录ssh并修改ssh端口号](https://www.timelate.com/archives/enable-ssh-root-login.html)
">[1]</span></a></sup>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 切换到root用户</span></span><br><span class="line">su root</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改ssh端口，此处是修改为666</span></span><br><span class="line">sed -i 's/^.*Port.*/Port 666/g' /etc/ssh/sshd_config &amp;&amp; sed -i 's/^.*PermitRootLogin.*/PermitRootLogin yes/g' /etc/ssh/sshd_config &amp;&amp; sed -i 's/^.*PasswordAuthentication.*/PasswordAuthentication yes/g' /etc/ssh/sshd_config</span><br><span class="line"><span class="meta">#</span><span class="bash"> 防火墙放行666端口</span></span><br><span class="line">ufw allow 666/tcp</span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启ssh服务</span></span><br><span class="line">service ssh restart</span><br></pre></td></tr></table></figure>

<h3 id="终端查看并关闭端口"><a href="#终端查看并关闭端口" class="headerlink" title="终端查看并关闭端口"></a>终端查看并关闭端口</h3><p>在终端下执行以下命令<sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Ubuntu终端命令查看端口占用及关闭](https://blog.csdn.net/boonya/article/details/77949438)
">[2]</span></a></sup>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看已经连接的服务端口（ESTABLISHED）</span></span><br><span class="line">netstat -a</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看所有的服务端口（LISTEN，ESTABLISHED）</span></span><br><span class="line">netstat -ap</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看指定端口8080</span></span><br><span class="line">netstat -ap | grep 8080</span><br><span class="line"><span class="meta">#</span><span class="bash"> 另一种查看指定端口方法</span></span><br><span class="line">lsof -i:8080</span><br><span class="line"><span class="meta">#</span><span class="bash"> 关闭端口对应进程pid</span></span><br><span class="line">kill -9 PID号</span><br></pre></td></tr></table></figure>

<h3 id="测试Ubuntu-VPS主机性能"><a href="#测试Ubuntu-VPS主机性能" class="headerlink" title="测试Ubuntu VPS主机性能"></a>测试Ubuntu VPS主机性能</h3><p>这部分是针对购买vps的一个建议，因为vps的价格往往与机子本身的硬件性能直接挂钩，购买vps都希望自己的机子是货真价实的，那么对机子的读写、网络及其他性能测试还是有必要的，参照这篇测试博文<sup id="fnref:3"><a href="#fn:3" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[VPS主机性能和速度测试](https://wzfou.com/vps-ceping-gongju/)
">[3]</span></a></sup>做了简单的转述。</p>
<ol>
<li>测试海外vps到国内的速度<br>一键测试服务器到国内的速度脚本Superspeed.sh ：<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/oooldking/script/master/superspeed.sh</span><br><span class="line">chmod +x superspeed.sh</span><br><span class="line">./superspeed.sh</span><br></pre></td></tr></table></figure></li>
<li>全面测评<br>使用Zench，一键检测VPS的CPU、内存、负载、IO读写、机房带宽等，同时包含Virt 检测服务器类型参数，常见 openvz，kvm，独服都能检测出来，此外加入 Ping 以及 路由测试 功能，会生成测评报告：<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget -N --no-check-certificate https://raw.githubusercontent.com/FunctionClub/ZBench/master/ZBench-CN.sh &amp;&amp; bash ZBench-CN.sh</span><br><span class="line"><span class="meta">#</span><span class="bash">项目：https://github.com/FunctionClub/ZBench</span></span><br></pre></td></tr></table></figure></li>
<li>性能跑分<br>VPS性能综合跑分工具<code>unixbench</code>：<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget --no-check-certificate https://github.com/teddysun/across/raw/master/unixbench.sh</span><br><span class="line">chmod +x unixbench.sh</span><br><span class="line">./unixbench.sh</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="Linux远程"><a href="#Linux远程" class="headerlink" title="Linux远程"></a>Linux远程</h3><h4 id="后台运行程序"><a href="#后台运行程序" class="headerlink" title="后台运行程序"></a>后台运行程序</h4><p>对于多数服务器，基本都是通过 SSH 进行远程连接，而部署程序到服务器后不希望程序在退出远程控制界面后中断，便需要后台运行程序。<sup id="fnref:4"><a href="#fn:4" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[SSH 远程关闭导致程序中断](https://www.cnblogs.com/lomper/p/7053694.html)
">[4]</span></a></sup></p>
<h4 id="Linux系统相关概念"><a href="#Linux系统相关概念" class="headerlink" title="Linux系统相关概念"></a>Linux系统相关概念</h4><ul>
<li>进程组(process group): 一个或多个进程的集合,每一个进程组有唯一一个进程组ID,即进程组长进程的ID.</li>
<li>会话期(session): 一个或多个进程组的集合,有唯一一个会话期首进程(session leader). 会话期ID为首进程的ID.</li>
<li>会话期可以有一个单独的控制终端(controlling terminal).</li>
<li>与控制终端连接的会话期首进程叫做控制进程(controlling process).</li>
<li>当前与终端交互的进程称为前台进程组.</li>
<li>其余进程组称为后台进程组.</li>
<li>根据POSIX.1定义: 挂断信号(SIGHUP)默认的动作是终止程序.</li>
<li>守护进程本身的特殊性使得这类进程不受远程连接进程的影响，因为是相互独立的两个进程组，即使 SSH 关闭也不会导致守护进程终止.</li>
</ul>
<h4 id="后台运行方法"><a href="#后台运行方法" class="headerlink" title="后台运行方法"></a>后台运行方法</h4><ol>
<li>在远程开启<code>tmux</code>，在<code>tmux</code>里运行程序</li>
<li>使用<code>nohup</code>命令执行程序</li>
</ol>
<h4 id="终止后台运行程序"><a href="#终止后台运行程序" class="headerlink" title="终止后台运行程序"></a>终止后台运行程序</h4><p>由于程序后台运行，因此也就不能使用Linux的终止命令直接终止程序，此时如果不需要程序继续后台执行，需要通过以下方法终止程序：</p>
<ol>
<li>查看程序对应的进程，可以通过<code>ps -aux | grep python</code>来查看 python 脚本的所在进程，找到进程号。</li>
<li>杀死进程进而终止程序，执行<code>kill -9 PID</code>，其中 PID 是程序对应的进程号。</li>
</ol>
<h3 id="Linux系统安装python3"><a href="#Linux系统安装python3" class="headerlink" title="Linux系统安装python3"></a>Linux系统安装python3</h3><p>之所以在这部分内容中加入python3安装是因为旧版或部分Linux系统中默认安装的是python2，而习惯使用python3或需要做代码迁移的时候还是想在python3环境下运行，加上python2与python3是可并存的，此时安装python3便顺理成章，只是需要解决一些冲突，因此在此作为Linux的一种进阶使用说明进行叙述，由于Ubuntu系统使用apt安装十分便捷，此处以centos为例子进行讲述<sup id="fnref:9"><a href="#fn:9" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[在新安装的Centos中安装python3.7 解决pip和yum问题](https://blog.csdn.net/u013214212/article/details/81540840)
">[9]</span></a></sup>。</p>
<h4 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h4><p>依赖包的安装是安装python3时顺利的基础，这是编译安装时需要的依赖环境，安装如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gcc make</span><br></pre></td></tr></table></figure>
<h4 id="下载python3"><a href="#下载python3" class="headerlink" title="下载python3"></a>下载python3</h4><p>根据自身的需求，从python官网下载所需的版本压缩包，比如下载目前最新版即python3.8.3，则在本地选择安装的文件目录，然后下载：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://www.python.org/ftp/python/3.8.3/Python-3.8.3.tgz</span><br></pre></td></tr></table></figure>
<p>在当前目录下解压便可获得名为<code>Pyhton-3.8.3</code>的文件夹，解压和安装可执行下述命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zxvf Python-3.8.3.tgz</span><br><span class="line">cd Python-3.8.3</span><br><span class="line">./configure</span><br><span class="line">make&amp;&amp;make install</span><br></pre></td></tr></table></figure>
<p>顺利的话则安装完成，若出现错误如<code>ModuleNotFound：No module named &#39;_ctypes&#39;</code>则执行下述命令后继续执行上述安装命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install libffi-devel -y</span><br></pre></td></tr></table></figure>
<p>至此，基本完成python3的安装，默认安装位置是在<code>/usr/local/bin/</code>。</p>
<h4 id="配置默认python"><a href="#配置默认python" class="headerlink" title="配置默认python"></a>配置默认python</h4><p>为了便于调用，可以将python3设置为默认python调用，步骤如下：<br>①备份旧python命令，<code>mv /usr/bin/python /usr/bin/python.bak</code><br>②添加python3的软链接，<code>ln -s /usr/local/bin/python3 /usr/bin/python</code><br>同时，将<code>pip3</code>一并修改为默认的pip调用，可以通过<code>find / -name &#39;pip3&#39;</code>找到pip3的位置，步骤如下：<br>①备份旧pip命令，<code>mv /usr/bin/pip /usr/bin/pip.bak</code><br>②添加pip3的软链接，<code>ln -s /usr/local/bin/pip3 /usr/bin/pip</code></p>
<h4 id="解决yum与python3的冲突"><a href="#解决yum与python3的冲突" class="headerlink" title="解决yum与python3的冲突"></a>解决yum与python3的冲突</h4><p>由于设置了默认python为python3，会与不支持python3的yum产生冲突，需要将yum的默认指向的pytho修改为python2版本，修改步骤如下：<br>①修改配置1，<code>vi /usr/libexec/urlgrabber-ext-down</code>，将文件中<code>python</code>修改为对应的旧python2版本，然后保存；<br><img src="/Blog/images/Linux-3.png" alt="修改配置1"><i class="img-caption">☆ 修改配置1</i><br>②修改配置2，<code>vi /usr/bin/yum</code>，将文件中<code>python</code>修改为对应的旧python2版本，然后保存。<br><img src="/Blog/images/Linux-4.png" alt="修改配置2"><i class="img-caption">☆ 修改配置2</i><br>自此完成python3的安装与配置，可在centos上调用<code>python2</code>使用旧版本，调用<code>python</code>使用新版本。</p>
<h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>本着手册即查即用的原则，这篇博文写的十分简要，很少说明部分，直接贴出操作，本文将根据自身的经历持续补充。</p>
<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.timelate.com/archives/enable-ssh-root-login.html" target="_blank" rel="noopener external nofollow noreferrer">Ubuntu 18.04 使用root 帐号登录ssh并修改ssh端口号</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://blog.csdn.net/boonya/article/details/77949438" target="_blank" rel="noopener external nofollow noreferrer">Ubuntu终端命令查看端口占用及关闭</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://wzfou.com/vps-ceping-gongju/" target="_blank" rel="noopener external nofollow noreferrer">VPS主机性能和速度测试</a><a href="#fnref:3" rev="footnote"> ↩</a></span></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">4.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.cnblogs.com/lomper/p/7053694.html" target="_blank" rel="noopener external nofollow noreferrer">SSH 远程关闭导致程序中断</a><a href="#fnref:4" rev="footnote"> ↩</a></span></li><li id="fn:5"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">5.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://segmentfault.com/a/1190000011289092" target="_blank" rel="noopener external nofollow noreferrer">解决Linux关闭终端（关闭SSH等）后运行的程序或者服务自动停止【后台运行程序】</a><a href="#fnref:5" rev="footnote"> ↩</a></span></li><li id="fn:6"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">6.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.cnblogs.com/baby123/p/6477429.html" target="_blank" rel="noopener external nofollow noreferrer">nohup和&amp;后台运行，进程查看及终止</a><a href="#fnref:6" rev="footnote"> ↩</a></span></li><li id="fn:7"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">7.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://blog.csdn.net/plgy_Y/article/details/89380909" target="_blank" rel="noopener external nofollow noreferrer">【Linux】nohup后台运行脚本 终止脚本运行</a><a href="#fnref:7" rev="footnote"> ↩</a></span></li><li id="fn:8"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">8.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://blog.csdn.net/CL_YD/article/details/79458092" target="_blank" rel="noopener external nofollow noreferrer">Linux磁盘空间100% 查找并删除大文件</a><a href="#fnref:8" rev="footnote"> ↩</a></span></li><li id="fn:9"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">9.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://blog.csdn.net/u013214212/article/details/81540840" target="_blank" rel="noopener external nofollow noreferrer">在新安装的Centos中安装python3.7 解决pip和yum问题</a><a href="#fnref:9" rev="footnote"> ↩</a></span></li><li id="fn:10"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">10.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://i.linuxtoy.org/files/pdf/fwunixref.pdf" target="_blank" rel="noopener external nofollow noreferrer">Unix/Linux 命令参考</a><a href="#fnref:10" rev="footnote"> ↩</a></span></li><li id="fn:11"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">11.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.jianshu.com/p/59f759207862" target="_blank" rel="noopener external nofollow noreferrer">Linux思维导图整理</a><a href="#fnref:11" rev="footnote"> ↩</a></span></li><li id="fn:12"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">12.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.jianshu.com/p/234b196791fb" target="_blank" rel="noopener external nofollow noreferrer">关于Linux软件源</a><a href="#fnref:12" rev="footnote"> ↩</a></span></li><li id="fn:13"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">13.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.geek0ne.com/LinuxAce/139.html" target="_blank" rel="noopener external nofollow noreferrer">Linux系统添加更换国内软件源札记</a><a href="#fnref:13" rev="footnote"> ↩</a></span></li><li id="fn:14"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">14.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.cnblogs.com/Security-Darren/p/3947952.html" target="_blank" rel="noopener external nofollow noreferrer">（实用）Ubuntu 、CentOS更换国内源</a><a href="#fnref:14" rev="footnote"> ↩</a></span></li><li id="fn:15"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">15.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://blog.csdn.net/xiaohukun/article/details/78264734" target="_blank" rel="noopener external nofollow noreferrer">LINUX中文输入法</a><a href="#fnref:15" rev="footnote"> ↩</a></span></li><li id="fn:16"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">16.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.runoob.com/linux/linux-vim.html" target="_blank" rel="noopener external nofollow noreferrer">Linux vi/vim</a><a href="#fnref:16" rev="footnote"> ↩</a></span></li><li id="fn:17"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">17.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="http://www.viemu.com/" target="_blank" rel="noopener external nofollow noreferrer">Vi/vim emulation for Visual Studio, SQL Server,Word &amp; Outlook</a><a href="#fnref:17" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Handbook</category>
        <category>OS</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>玩转树莓派（二）配置V2ray客户端及透明网关</title>
    <url>/Blog/2020/03/24/%E7%8E%A9%E8%BD%AC%E6%A0%91%E8%8E%93%E6%B4%BE%EF%BC%88%E4%BA%8C%EF%BC%89.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\Blog\assets\css\APlayer.min.css"><script src="\Blog\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\Blog\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>树莓派4B即目前最新款树莓派，其功能基本和一台PC机无异，但是入手一台树莓派地初衷各有差异，而我是希望它代替现有市场中大量受限的路由器，因此树莓派到手第二天，我便开始让它上岗工作，成为家庭网络中的透明网关。</p>
<a id="more"></a>

<h2 id="坎坷历程"><a href="#坎坷历程" class="headerlink" title="坎坷历程"></a>坎坷历程</h2><h3 id="ss-redir"><a href="#ss-redir" class="headerlink" title="ss-redir"></a>ss-redir</h3><p>ss作为曾经的传说，至今还有大量用户在使用其服务作为fq代理实现科学上网，当然我也还保留着ss服务，同时手中有着之前的搭建教程以及有先前一直使用的虚拟机方法还稳健运行，懒惰的我便开始照猫画虎进行ss透明网关搭建。其中出现很多问题，尤其是进行IP转发、分流以及dns管理的依赖包安装过程可能会因为依赖性的版本限制产生一些麻烦，尤其是dnsmasq安装之后带来的树莓派无法上网问题，即使配置dns规则之后还是存在，但是宿主机可以正常上网。加之其他各种繁琐的问题，最终我选择放弃ss的搭建方式，耗时约莫5小时，<del>无奈而终</del>。</p>
<h3 id="v2"><a href="#v2" class="headerlink" title="v2"></a>v2</h3><p>v2也是去年我才开始使用，相比ss，v2的诞生就已经具备优势。而本次搭建透明网关才让我体会到v2更大的优势是其自身配置的丰富性能减少许多繁琐的依赖包处理，这也让我在短短半小时内完成树莓派上透明网关的搭建，终于开始享受局域网内的<del>自由</del>时光。</p>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol>
<li>v2搭建透明网关前先作为客户端进行配置测试，见<a href="#v2_client">v2搭建及测试</a>；</li>
<li>配置只改动需要修改的出口setting部分；</li>
<li>Linux下开启全局代理并不能代替所有方式，涉及终端代理及浏览器代理还需自行设置，满足自身实际需求。</li>
</ol>
<h2 id="透明网关搭建"><a href="#透明网关搭建" class="headerlink" title="透明网关搭建"></a>透明网关搭建</h2><h3 id="v2搭建及测试"><a href="#v2搭建及测试" class="headerlink" title="v2搭建及测试"></a><span id="v2_client">v2搭建及测试</span></h3><h4 id="安装v2"><a href="#安装v2" class="headerlink" title="安装v2"></a>安装v2</h4><ol>
<li>官方一键脚本</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo bash &lt;(curl -L -s https://install.direct/go.sh)</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>下载脚本安装，其实与第1种方法一样</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://install.direct/go.sh</span><br><span class="line">sudo chmod +x go.sh</span><br><span class="line">sudo bash go.sh</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>离线安装，在网络不佳或不合适的情况下使用本地安装</li>
</ol>
<p>在第2步中下载 <code>go.sh</code> 同时在<a href="https://github.com/v2ray/v2ray-core/releases" target="_blank" rel="noopener external nofollow noreferrer">v2ray-core-releases</a>下载 <code>v2ray-linux-arm.zip</code> ，如果树莓派中网络不佳可以在自己的PC机下载完之后迁移文件到树莓派中。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget -O v2ray_install.sh  https://install.direct/go.sh</span><br><span class="line">chmod +x v2ray_install.sh </span><br><span class="line">sudo ./v2ray_install.sh --<span class="built_in">local</span> v2ray-linux-arm.zip</span><br></pre></td></tr></table></figure>
<h4 id="配置v2"><a href="#配置v2" class="headerlink" title="配置v2"></a>配置v2</h4><ol>
<li>后续操作默认切换到 root 权限下，填写v2的配置json。</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo su root</span><br><span class="line">cat &gt; /etc/v2ray/config.json &lt;&lt; EOF</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"log"</span>: &#123;</span><br><span class="line">    <span class="string">"loglevel"</span>: <span class="string">"warning"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"inbounds"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"tag"</span>: <span class="string">"proxy"</span>,</span><br><span class="line">      <span class="string">"port"</span>: 1090, // 监听端口</span><br><span class="line">      <span class="string">"listen"</span>: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">      <span class="string">"protocol"</span>: <span class="string">"socks"</span>, // 入口协议为 SOCKS 5</span><br><span class="line">      <span class="string">"sniffing"</span>: &#123;</span><br><span class="line">        <span class="string">"enabled"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">"destOverride"</span>: [</span><br><span class="line">          <span class="string">"http"</span>,</span><br><span class="line">          <span class="string">"tls"</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">"settings"</span>: &#123;</span><br><span class="line">        <span class="string">"auth"</span>: <span class="string">"noauth"</span>, //socks的认证设置，noauth 代表不认证，由于 socks 通常在客户端使用，所以这里不认证</span><br><span class="line">        <span class="string">"udp"</span>: <span class="literal">true</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">"streamSettings"</span>: null</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"outbounds"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"tag"</span>: <span class="string">"proxy"</span>,</span><br><span class="line">      <span class="string">"protocol"</span>: <span class="string">"vmess"</span>, // 出口协议</span><br><span class="line">      <span class="string">"settings"</span>: &#123;</span><br><span class="line">        <span class="string">"vnext"</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="string">"address"</span>: <span class="string">"server.com"</span>, // 服务器地址，请修改为你自己的服务器 IP 或域名</span><br><span class="line">            <span class="string">"port"</span>: 10010, // 服务器端口</span><br><span class="line">            <span class="string">"users"</span>: [</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="string">"id"</span>: <span class="string">"b831381d-6324-4d53-ad4f-8cda48b30811"</span>,  // 用户 ID，必须与服务器端配置相同</span><br><span class="line">                <span class="string">"alterId"</span>: 32 // 此处的值也应当与服务器相同</span><br><span class="line">              &#125;</span><br><span class="line">            ]</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>
<p>对上述配置中的<code>protocol</code>以及<code>vnext</code> 下的 <code>address</code> 、 <code>port</code> 、 <code>id</code> 、 <code>alterId</code> 进行修改，这是必须修改的内容，其含义可参照注释，其他内容可不改变，如果懂得配置的话可以自行修改其余内容。</p>
<ol start="2">
<li>开启v2服务</li>
</ol>
<p>下面命令中以 # 开头为注释内容。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start v2ray </span><br><span class="line"><span class="comment"># 或使用 service v2ray start</span></span><br><span class="line">ps -ef|grep v2ray</span><br><span class="line"><span class="comment"># 或使用 service v2ray status</span></span><br></pre></td></tr></table></figure>
<p>正常情况下，v2已经开始运行，查看状态结果如下图。<br><img src="/Blog/images/v2-2-1.png" alt="v2正常运行配置"><i class="img-caption">☆ v2正常运行配置</i><br><img src="/Blog/images/v2-2-2.png" alt="v2正常运行状态"><i class="img-caption">☆ v2正常运行状态</i></p>
<h4 id="全局代理及测试"><a href="#全局代理及测试" class="headerlink" title="全局代理及测试"></a>全局代理及测试</h4><ol>
<li>配置全局代理</li>
</ol>
<p>编译安装 <code>ProxyChains-NG</code> 进行全局代理设置。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/rofl0r/proxychains-ng.git</span><br><span class="line"><span class="built_in">cd</span> /home/pi/proxychains-ng/</span><br><span class="line">./configure &amp;&amp; make &amp;&amp; make install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置及修改配置</span></span><br><span class="line">cp ./src/proxychains.conf /etc/proxychains.conf</span><br><span class="line">vim /etc/proxychains.conf</span><br></pre></td></tr></table></figure>
<p>将<code>proxychains.conf</code>配置文件的最后部分内容做以下修改：</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="deletion">- socks4 127.0.0.1 9050</span></span><br><span class="line"><span class="addition">+ socks5 127.0.0.1 1090</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>测试v2</li>
</ol>
<p>通过 IP 以及 HTTP 响应码测试 v2 是否搭建成功。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 返回未代理前的本地公网地址</span></span><br><span class="line">curl ip.sb</span><br><span class="line"><span class="comment"># 返回代理过的v2服务器地址，表示搭建成功，若长时间无响应或返回非服务端 IP 地址的内容则表示搭建失败</span></span><br><span class="line">proxychains4 curl ip.sb</span><br><span class="line"><span class="comment"># 返回 200 或 301 表示搭建成功，若返回 000 或长时间无反应则表示搭建失败</span></span><br><span class="line">proxychains4 curl -so /dev/null -w <span class="string">"%&#123;http_code&#125;"</span> google.com -x socks5://127.0.0.1:1090</span><br></pre></td></tr></table></figure>

<h3 id="透明网关搭建-1"><a href="#透明网关搭建-1" class="headerlink" title="透明网关搭建"></a>透明网关搭建</h3><h4 id="V2配置透明代理的入站和DNS分流"><a href="#V2配置透明代理的入站和DNS分流" class="headerlink" title="V2配置透明代理的入站和DNS分流"></a>V2配置透明代理的入站和DNS分流</h4><p>将以下配置内容覆盖原先得v2配置内容，即修改 <code>/etc/v2ray/config.json</code> 下的内容。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"inbounds"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"tag"</span>:<span class="string">"transparent"</span>,</span><br><span class="line">      <span class="attr">"port"</span>: <span class="number">12345</span>,</span><br><span class="line">      <span class="attr">"protocol"</span>: <span class="string">"dokodemo-door"</span>,</span><br><span class="line">      <span class="attr">"settings"</span>: &#123;</span><br><span class="line">        <span class="attr">"network"</span>: <span class="string">"tcp,udp"</span>,</span><br><span class="line">        <span class="attr">"followRedirect"</span>: <span class="literal">true</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"sniffing"</span>: &#123;</span><br><span class="line">        <span class="attr">"enabled"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">"destOverride"</span>: [</span><br><span class="line">          <span class="string">"http"</span>,</span><br><span class="line">          <span class="string">"tls"</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"streamSettings"</span>: &#123;</span><br><span class="line">        <span class="attr">"sockopt"</span>: &#123;</span><br><span class="line">          <span class="attr">"tproxy"</span>: <span class="string">"tproxy"</span> <span class="comment">// 透明代理使用 TPROXY 方式</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"port"</span>: <span class="number">1090</span>, </span><br><span class="line">      <span class="attr">"protocol"</span>: <span class="string">"socks"</span>, <span class="comment">// 入口协议为 SOCKS 5</span></span><br><span class="line">      <span class="attr">"sniffing"</span>: &#123;</span><br><span class="line">        <span class="attr">"enabled"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">"destOverride"</span>: [<span class="string">"http"</span>, <span class="string">"tls"</span>]</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"settings"</span>: &#123;</span><br><span class="line">        <span class="attr">"auth"</span>: <span class="string">"noauth"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"outbounds"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"tag"</span>: <span class="string">"proxy"</span>,</span><br><span class="line">      <span class="attr">"protocol"</span>: <span class="string">"vmess"</span>, <span class="comment">// 代理服务器</span></span><br><span class="line">      <span class="attr">"settings"</span>: &#123;</span><br><span class="line">        <span class="attr">"vnext"</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">"address"</span>: <span class="string">"server.com"</span>, <span class="comment">// 服务器地址，请修改为你自己的服务器 IP 或域名</span></span><br><span class="line">            <span class="attr">"port"</span>: <span class="number">10010</span>, <span class="comment">// 服务器端口</span></span><br><span class="line">            <span class="attr">"users"</span>: [</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="attr">"id"</span>: <span class="string">"b831381d-6324-4d53-ad4f-8cda48b30811"</span>,  <span class="comment">// 用户 ID，必须与服务器端配置相同</span></span><br><span class="line">                <span class="attr">"alterId"</span>: <span class="number">32</span> <span class="comment">// 此处的值也应当与服务器相同</span></span><br><span class="line">              &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">"streamSettings"</span>: &#123;</span><br><span class="line">        <span class="attr">"sockopt"</span>: &#123;</span><br><span class="line">          <span class="attr">"mark"</span>: <span class="number">255</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">"mux"</span>: &#123;</span><br><span class="line">        <span class="attr">"enabled"</span>: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"tag"</span>: <span class="string">"direct"</span>,</span><br><span class="line">      <span class="attr">"protocol"</span>: <span class="string">"freedom"</span>,</span><br><span class="line">      <span class="attr">"settings"</span>: &#123;</span><br><span class="line">        <span class="attr">"domainStrategy"</span>: <span class="string">"UseIP"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"streamSettings"</span>: &#123;</span><br><span class="line">        <span class="attr">"sockopt"</span>: &#123;</span><br><span class="line">          <span class="attr">"mark"</span>: <span class="number">255</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;      </span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"tag"</span>: <span class="string">"block"</span>,</span><br><span class="line">      <span class="attr">"protocol"</span>: <span class="string">"blackhole"</span>,</span><br><span class="line">      <span class="attr">"settings"</span>: &#123;</span><br><span class="line">        <span class="attr">"response"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"http"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"tag"</span>: <span class="string">"dns-out"</span>,</span><br><span class="line">      <span class="attr">"protocol"</span>: <span class="string">"dns"</span>,</span><br><span class="line">      <span class="attr">"streamSettings"</span>: &#123;</span><br><span class="line">        <span class="attr">"sockopt"</span>: &#123;</span><br><span class="line">          <span class="attr">"mark"</span>: <span class="number">255</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;  </span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"dns"</span>: &#123;</span><br><span class="line">    <span class="attr">"servers"</span>: [</span><br><span class="line">      <span class="string">"8.8.8.8"</span>, <span class="comment">// 非中中国大陆域名使用 Google 的 DNS</span></span><br><span class="line">      <span class="string">"1.1.1.1"</span>, <span class="comment">// 非中中国大陆域名使用 Cloudflare 的 DNS(备用)</span></span><br><span class="line">      <span class="string">"114.114.114.114"</span>, <span class="comment">// 114 的 DNS (备用)</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"address"</span>: <span class="string">"223.5.5.5"</span>, <span class="comment">//中国大陆域名使用阿里的 DNS</span></span><br><span class="line">        <span class="attr">"port"</span>: <span class="number">53</span>,</span><br><span class="line">        <span class="attr">"domains"</span>: [</span><br><span class="line">          <span class="string">"geosite:cn"</span>,</span><br><span class="line">          <span class="string">"ntp.org"</span>, <span class="comment">// NTP 服务器</span></span><br><span class="line">          <span class="string">"$myserver.address"</span> <span class="comment">// 此处改为你 VPS 的域名</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"routing"</span>: &#123;</span><br><span class="line">    <span class="attr">"domainStrategy"</span>: <span class="string">"IPOnDemand"</span>,</span><br><span class="line">    <span class="attr">"rules"</span>: [</span><br><span class="line">      &#123; <span class="comment">// 劫持 53 端口 UDP 流量，使用 V2Ray 的 DNS</span></span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"field"</span>,</span><br><span class="line">        <span class="attr">"inboundTag"</span>: [</span><br><span class="line">          <span class="string">"transparent"</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">"port"</span>: <span class="number">53</span>,</span><br><span class="line">        <span class="attr">"network"</span>: <span class="string">"udp"</span>,</span><br><span class="line">        <span class="attr">"outboundTag"</span>: <span class="string">"dns-out"</span> </span><br><span class="line">      &#125;,    </span><br><span class="line">      &#123; </span><br><span class="line">        <span class="comment">// 直连 123 端口 UDP 流量（NTP 协议）</span></span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"field"</span>,</span><br><span class="line">        <span class="attr">"inboundTag"</span>: [</span><br><span class="line">          <span class="string">"transparent"</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">"port"</span>: <span class="number">123</span>,</span><br><span class="line">        <span class="attr">"network"</span>: <span class="string">"udp"</span>,</span><br><span class="line">        <span class="attr">"outboundTag"</span>: <span class="string">"direct"</span> </span><br><span class="line">      &#125;,    </span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"field"</span>, </span><br><span class="line">        <span class="attr">"ip"</span>: [ </span><br><span class="line">          <span class="comment">// 设置 DNS 配置中的国内 DNS 服务器地址直连，以达到 DNS 分流目的</span></span><br><span class="line">          <span class="string">"223.5.5.5"</span>,</span><br><span class="line">          <span class="string">"114.114.114.114"</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">"outboundTag"</span>: <span class="string">"direct"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"field"</span>,</span><br><span class="line">        <span class="attr">"ip"</span>: [ </span><br><span class="line">          <span class="comment">// 设置 DNS 配置中的国内 DNS 服务器地址走代理，以达到 DNS 分流目的</span></span><br><span class="line">          <span class="string">"8.8.8.8"</span>,</span><br><span class="line">          <span class="string">"1.1.1.1"</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">"outboundTag"</span>: <span class="string">"proxy"</span> <span class="comment">// 改为你自己代理的出站 tag</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123; </span><br><span class="line">         <span class="comment">// 广告拦截</span></span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"field"</span>, </span><br><span class="line">        <span class="attr">"domain"</span>: [</span><br><span class="line">          <span class="string">"geosite:category-ads-all"</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">"outboundTag"</span>: <span class="string">"block"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123; </span><br><span class="line">         <span class="comment">// BT 流量直连</span></span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"field"</span>,</span><br><span class="line">        <span class="attr">"protocol"</span>:[<span class="string">"bittorrent"</span>], </span><br><span class="line">        <span class="attr">"outboundTag"</span>: <span class="string">"direct"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123; </span><br><span class="line">        <span class="comment">// 直连中国大陆主流网站 ip 和 保留 ip</span></span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"field"</span>, </span><br><span class="line">        <span class="attr">"ip"</span>: [</span><br><span class="line">          <span class="string">"geoip:private"</span>,</span><br><span class="line">          <span class="string">"geoip:cn"</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">"outboundTag"</span>: <span class="string">"direct"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123; </span><br><span class="line">         <span class="comment">// 直连中国大陆主流网站域名</span></span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"field"</span>, </span><br><span class="line">        <span class="attr">"domain"</span>: [</span><br><span class="line">          <span class="string">"geosite:cn"</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">"outboundTag"</span>: <span class="string">"direct"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>同样的，对上述配置中的<code>protocol</code>以及 <code>vnext</code> 下的 <code>address</code> 、 <code>port</code> 、 <code>id</code> 、 <code>alterId</code> 进行修改，这是必须修改的内容，其含义可参照注释，其他内容可不改变，如果懂得配置的话可以自行修改其余内容。</p>
<h4 id="配置透明代理规则"><a href="#配置透明代理规则" class="headerlink" title="配置透明代理规则"></a>配置透明代理规则</h4><p>本文使用方法是tproxy，同时保证树莓派和其他客户端均能实现科学上网。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 设置策略路由</span></span><br><span class="line">ip rule add fwmark 1 table 100</span><br><span class="line">ip route add local 0.0.0.0/0 dev lo table 100</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 代理局域网设备</span></span><br><span class="line">iptables -t mangle -N V2RAY</span><br><span class="line">iptables -t mangle -A V2RAY -d 127.0.0.1/32 -j RETURN</span><br><span class="line">iptables -t mangle -A V2RAY -d 224.0.0.0/4 -j RETURN</span><br><span class="line">iptables -t mangle -A V2RAY -d 255.255.255.255/32 -j RETURN</span><br><span class="line"><span class="meta">#</span><span class="bash"> 直连局域网，避免 V2Ray 无法启动时无法连网关的 SSH，如果你配置的是其他网段（如 10.x.x.x 等），则修改成自己的网段</span></span><br><span class="line">iptables -t mangle -A V2RAY -d 192.168.0.0/16 -p tcp -j RETURN</span><br><span class="line"><span class="meta">#</span><span class="bash"> 直连局域网，53 端口除外（因为要使用 V2Ray 的 DNS 解析)</span></span><br><span class="line">iptables -t mangle -A V2RAY -d 192.168.0.0/16 -p udp ! --dport 53 -j RETURN </span><br><span class="line"><span class="meta">#</span><span class="bash"> 给 UDP 打标记 1，转发至 12345 端口</span></span><br><span class="line">iptables -t mangle -A V2RAY -p udp -j TPROXY --on-port 12345 --tproxy-mark 1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 给 TCP 打标记 1，转发至 12345 端口</span></span><br><span class="line">iptables -t mangle -A V2RAY -p tcp -j TPROXY --on-port 12345 --tproxy-mark 1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 应用规则</span></span><br><span class="line">iptables -t mangle -A PREROUTING -j V2RAY</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 代理网关本机</span></span><br><span class="line">iptables -t mangle -N V2RAY_MASK</span><br><span class="line">iptables -t mangle -A V2RAY_MASK -d 224.0.0.0/4 -j RETURN</span><br><span class="line">iptables -t mangle -A V2RAY_MASK -d 255.255.255.255/32 -j RETURN</span><br><span class="line"><span class="meta">#</span><span class="bash"> 直连局域网</span></span><br><span class="line">iptables -t mangle -A V2RAY_MASK -d 192.168.0.0/16 -p tcp -j RETURN</span><br><span class="line"><span class="meta">#</span><span class="bash"> 直连局域网，53 端口除外（因为要使用 V2Ray 的 DNS）</span></span><br><span class="line">iptables -t mangle -A V2RAY_MASK -d 192.168.0.0/16 -p udp ! --dport 53 -j RETURN</span><br><span class="line"><span class="meta">#</span><span class="bash"> 直连 SO_MARK 为 0xff 的流量(0xff 是 16 进制数，数值上等同与上面V2Ray 配置的 255)，此规则目的是避免代理本机(网关)流量出现回环问题</span></span><br><span class="line">iptables -t mangle -A V2RAY_MASK -j RETURN -m mark --mark 0xff</span><br><span class="line"><span class="meta">#</span><span class="bash"> 给 UDP 打标记,重路由</span></span><br><span class="line">iptables -t mangle -A V2RAY_MASK -p udp -j MARK --set-mark 1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 给 TCP 打标记，重路由</span></span><br><span class="line">iptables -t mangle -A V2RAY_MASK -p tcp -j MARK --set-mark 1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 应用规则</span></span><br><span class="line">iptables -t mangle -A OUTPUT -j V2RAY_MASK</span><br></pre></td></tr></table></figure>

<h4 id="设置开机服务自启"><a href="#设置开机服务自启" class="headerlink" title="设置开机服务自启"></a>设置开机服务自启</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p /etc/iptables &amp;&amp; iptables-save &gt; /etc/iptables/rules.v4</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  /etc/systemd/system/ 目录下创建一个名为 tproxyrule.service 的文件，写入以下内容</span></span><br><span class="line">[Unit]</span><br><span class="line">Description=Tproxy rule</span><br><span class="line">After=network.target</span><br><span class="line">Wants=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line"></span><br><span class="line">Type=oneshot</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">注意分号前后要有空格</span></span><br><span class="line">ExecStart=/sbin/ip rule add fwmark 1 table 100 ; /sbin/ip route add local 0.0.0.0/0 dev lo table 100 ; /sbin/iptables-restore /etc/iptables/rules.v4</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 执行以下命令完成开机自启</span></span><br><span class="line">systemctl enable tproxyrule</span><br></pre></td></tr></table></figure>

<h3 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h3><ol>
<li>下载离线版v2时如果树莓派安装的是官方镜像系统则按照文中方法，如果自行安装了64位系统则需要下载 <code>v2ray-linux-arm64.zip</code>；</li>
<li>v2的客户端代理端口有点区别，就是socks下和HTTP下是相差一个数的，具体可自行体会；</li>
<li>配置文件中需要注意树莓派所在网段以及本地代理地址。</li>
</ol>
<h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>树莓派的使用还有许多可待拓展，本文只是介绍了目前最新的将树莓派作为透明网关的配置方法。</p>
<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.ichenfei.com/2019/11/24/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%85%8D%E7%BD%AE%E4%BD%BF%E7%94%A8v2ray%E5%AE%A2%E6%88%B7%E7%AB%AF/" target="_blank" rel="noopener external nofollow noreferrer">树莓派配置v2ray客户端</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://toutyrater.github.io/basic/vmess.html" target="_blank" rel="noopener external nofollow noreferrer">VMess配置</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://toutyrater.github.io/app/tproxy.html" target="_blank" rel="noopener external nofollow noreferrer">tproxy透明代理</a><a href="#fnref:3" rev="footnote"> ↩</a></span></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">4.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://github.com/MassSmith/smgate/wiki/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%80%8F%E6%98%8E%E7%BF%BB%E5%A2%99%E7%BD%91%E5%85%B3%E8%AE%BE%E7%BD%AE" target="_blank" rel="noopener external nofollow noreferrer">树莓派透明网关镜像</a><a href="#fnref:4" rev="footnote"> ↩</a></span></li><li id="fn:5"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">5.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://toutyrater.github.io/prep/install.html" target="_blank" rel="noopener external nofollow noreferrer">v2安装</a><a href="#fnref:5" rev="footnote"> ↩</a></span></li><li id="fn:6"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">6.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://blog.newnius.com/setup-global-proxy-with-raspberry-pi.html" target="_blank" rel="noopener external nofollow noreferrer">在树莓派上搭建全局透明代理网关</a><a href="#fnref:6" rev="footnote"> ↩</a></span></li><li id="fn:7"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">7.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://briteming.blogspot.com/2019/08/linuxss-tproxy.html" target="_blank" rel="noopener external nofollow noreferrer">Linux透明代理</a><a href="#fnref:7" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>技术分享</category>
        <category>树莓派</category>
      </categories>
      <tags>
        <tag>树莓派</tag>
        <tag>raspberry</tag>
        <tag>透明网关</tag>
        <tag>V2ray</tag>
      </tags>
  </entry>
  <entry>
    <title>玩转树莓派（一）</title>
    <url>/Blog/2020/02/29/%E7%8E%A9%E8%BD%AC%E6%A0%91%E8%8E%93%E6%B4%BE%EF%BC%88%E4%B8%80%EF%BC%89.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\Blog\assets\css\APlayer.min.css"><script src="\Blog\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\Blog\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>树莓派，Raspberry Pi，简写为 RasPi。<a href="https://www.raspberrypi.org/" target="_blank" rel="noopener external nofollow noreferrer">官网地址</a><br><img src="/Blog/images/Raspberry_Pi_B4.png" alt="Raspberry Pi 4B"><i class="img-caption">☆ Raspberry Pi 4B</i></p>
<a id="more"></a>
<p><img src="/Blog/images/Raspberry_Pi_Logo.png" alt="Raspberry Pi Logo"><i class="img-caption">☆ Raspberry Pi Logo</i></p>
<h2 id="基本环境搭建"><a href="#基本环境搭建" class="headerlink" title="基本环境搭建"></a>基本环境搭建</h2><h3 id="树莓派简介"><a href="#树莓派简介" class="headerlink" title="树莓派简介"></a>树莓派简介</h3><p>树莓派每一代均使用博通（Broadcom）出产的ARM架构处理器，内存在256MB和4GB之间，主要使用 SD 卡或者 TF 卡作为存储媒体，配备 USB 接口、HDMI 的视频输出（支持声音输出）和 RCA 端子输出，内置 Ethernet/WLAN/Bluetooth 网络链接的方式（依据型号决定），并且可使用多种操作系统。产品线型号分为A型、B型、Zero 型和 ComputeModule 计算卡。树莓派基金会提供了基于ARM架构的 Debian、Arch Linux 和 Fedora 等的发行版系统，可以在官网<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[树莓派官网](https://www.raspberrypi.org/)
">[1]</span></a></sup>下载。2019年6月底，树莓派基金会发布了树莓派4，处理器升级为1.5GHz的博通 BCM2711（四核Cortex-A72），增大了板载内存容量，为1/2/4GB，蓝牙升级为5.0，拥有2个USB2.0接口，2个USB3.0接口，电源也采用了较新的USB-C接口。<sup id="fnref:3"><a href="#fn:3" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[树莓派-维基百科](https://zh.wikipedia.org/wiki/%E6%A0%91%E8%8E%93%E6%B4%BE)
">[3]</span></a></sup></p>
<h3 id="组装配件"><a href="#组装配件" class="headerlink" title="组装配件"></a>组装配件</h3><p>我使用的是最新版的树莓派4B<sup id="fnref:4"><a href="#fn:4" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[树莓派4B指南](https://www.yahboom.com/study/raspberry4B)
">[4]</span></a></sup>，相比以往的版本，最新版的变化还是喜人的，具体参数对比树莓派3B/3B+如下：<br><img src="/Blog/images/Raspberry_4b.png" alt="树莓派新旧版参数对比"><i class="img-caption">☆ 树莓派新旧版参数对比</i><br>树莓派4B的主板模块功能分布如下图：<br><img src="/Blog/images/Raspberry_functions.png" alt="树莓派主板模块"><i class="img-caption">☆ 树莓派主板模块</i></p>
<h4 id="基础硬件"><a href="#基础硬件" class="headerlink" title="基础硬件"></a>基础硬件</h4><p>从淘宝购买到手后的树莓派官方版包含以下基础硬件（无数量说明的硬件均是1件）：</p>
<ul>
<li><input checked="" disabled="" type="checkbox"> 主板（已焊接CPU和内存）</li>
<li><input checked="" disabled="" type="checkbox"> typr-c电源</li>
<li><input checked="" disabled="" type="checkbox"> 红白外壳</li>
<li><input checked="" disabled="" type="checkbox"> 散热片（5片）</li>
<li><input checked="" disabled="" type="checkbox"> SD卡（16 GB）</li>
<li><input checked="" disabled="" type="checkbox"> USB读卡器</li>
<li><input checked="" disabled="" type="checkbox"> HDMI转micro HDMI线</li>
<li><input checked="" disabled="" type="checkbox"> VGA转micro HDMI线</li>
<li><input checked="" disabled="" type="checkbox"> 散热风扇</li>
<li><input checked="" disabled="" type="checkbox"> 固定螺丝（8件）<h4 id="安装散热片"><a href="#安装散热片" class="headerlink" title="安装散热片"></a>安装散热片</h4>为了避免树莓派工作期间主板上硬件过热而损毁，需要给主板上的主要硬件进行散热处理。</li>
</ul>
<ol>
<li>粘贴散热片<br>一共有5块大小不一的散热片，分别对CPU、内存、USB管理器、有线网卡、无线网卡进行粘贴，效果图如下：<br><img src="/Blog/images/Raspberry_hot_piece.png" alt="树莓派主板散热片粘贴"><i class="img-caption">☆ 树莓派主板散热片粘贴</i></li>
<li>安装散热风扇<br>安装风扇前后可以进行对比 CPU 的温度，使用<code>/opt/vc/bin/vcgencmd measure_temp</code>可查看具体温度，如果温度不会过高，我个人不建议安装风扇，因为不加控制开关的风扇带来的噪声影响还是很明显的。<br>散热风扇通常有很多种，风扇的大小建议选择长宽30mm两线制的，一般红色线是正极，黑色线是负极。 所以在树莓派上使用时，红色线应插到GPIO针脚5V上，黑色线应插到针脚GND上，具体针脚位置可参照<a href="https://www.yahboom.com/build.html?id=2678&cid=308" target="_blank" rel="noopener external nofollow noreferrer">针脚定义</a>。风扇的LOGO标签是出风口，可以将风扇LOGO对着芯片吹风， 也可以将风扇LOGO朝外，这样也能将主板热量吸走排出去。效果图如下：<br><img src="/Blog/images/Raspberry_hot_fans.png" alt="树莓派主板散热风扇安装"><i class="img-caption">☆ 树莓派主板散热风扇安装</i></li>
</ol>
<h3 id="系统镜像及刻录系统"><a href="#系统镜像及刻录系统" class="headerlink" title="系统镜像及刻录系统"></a>系统镜像及刻录系统</h3><p>树莓派可支持的系统有多个，而初次使用树莓派还是使用官方提供的系统镜像，体验原汁原味的树莓派。从<a href="https://www.raspberrypi.org/downloads/raspbian/" target="_blank" rel="noopener external nofollow noreferrer">官网地址</a>下载 Raspbian 最新版系统镜像文件，当然也可以选择<a href="https://www.raspberrypi.org/downloads/noobs/" target="_blank" rel="noopener external nofollow noreferrer">NOOBS 镜像</a>，二者本质没有多大差异，官方提供两种方式自然都可以选择。</p>
<h4 id="格式化SD卡"><a href="#格式化SD卡" class="headerlink" title="格式化SD卡"></a>格式化SD卡</h4><p>使用<a href="https://www.sdcard.org/downloads/formatter/index.html" target="_blank" rel="noopener external nofollow noreferrer">SD卡格式化软件</a>对SD卡进行格式化，打开软件后会自动选择SD卡盘符，选择 <code>quick format</code>后点击 <code>format</code> 即可完成格式化。不建议使用Windows自带的格式化工具，该工具格式化之后的SD卡性能不佳。</p>
<h4 id="Raspbian镜像安装"><a href="#Raspbian镜像安装" class="headerlink" title="Raspbian镜像安装"></a>Raspbian镜像安装</h4><p>格式化完成后，使用<a href="https://sourceforge.net/projects/win32diskimager/files/latest/download" target="_blank" rel="noopener external nofollow noreferrer">Win32DiskImager</a>进行系统镜像烧录。打开 <code>Win32DiskImager</code> 并选择最新版系统镜像即 <code>2020-02-13-raspbian-buster-full.img</code>，选择SD卡盘符，点击<code>写入</code>，等待烧录完成，此时会弹出对话框显示写入成功之类。同时Windows系统会提示无法识别分区是否进行格式化，选择 <code>取消</code> 即不要格式化，因为Linux系统分区已经写入到SD卡中，格式化将导致之前的烧录工作作废。弹出读卡器并取下SD卡，将SD卡插入树莓派的SD卡槽，SD卡的正面与树莓派主板的背面为同一方向。</p>
<h4 id="NOOBS镜像安装"><a href="#NOOBS镜像安装" class="headerlink" title="NOOBS镜像安装"></a>NOOBS镜像安装</h4><p>格式化完成后，将 NOOBS 文件解压并将解压后的文件都移动到SD卡根目录下，弹出读卡器并取下SD卡，将SD卡插入树莓派的SD卡槽，SD卡的正面与树莓派主板的背面为同一方向。</p>
<h3 id="启动树莓派及初始配置"><a href="#启动树莓派及初始配置" class="headerlink" title="启动树莓派及初始配置"></a>启动树莓派及初始配置</h3><ol>
<li>启动树莓派<br>将type-c电源连接树莓派主板的type-c接口，将HDMI转micro HDMI线或VGA转micro HDMI线连接micro HDMI接口0（即靠近type-c电源接口的micro HDMI接口），注意接口方向，接反会导致接口磨损，将外接鼠标、键盘、显示器以及网线连接好，打开树莓派电源开关。</li>
<li>初始配置<br>如果是按照 Raspbian 镜像安装的方法烧录的系统，则开机后将直接进入树莓派系统界面，若是按照 NOOBS 镜像安装系统，则启动后出现 NOOBS 界面，此时选择首选项即 <code>Raspbian[RECOMMANDDED]</code> 然后点击安装（Install），等待安装完成重启即可进入系统界面。<br>第一次进入树莓派系统，会提示进行初始配置，根据提示设置地区、语言、新密码，然后WiFi设置和更新软件部分可以先跳过（skip），如果没有连接网线则可以设置连接WiFi。系统提示重启选择<code>暂不重启</code>。</li>
</ol>
<h3 id="远程登录树莓派"><a href="#远程登录树莓派" class="headerlink" title="远程登录树莓派"></a>远程登录树莓派</h3><p>初次配置完成树莓派后，为了之后方便管理树莓派，而不需要额外的外接设备，便要设置远程登录，最方便的是设置 SSH 服务，树莓派默认安装了该服务但是没开启。</p>
<ol>
<li><p>SSH<br>打开终端，输入 <code>sudo raspi-config</code>，选择 <code>5 Interfacing Options</code>，选择 <code>SSH</code>，询问是否开启 SSH 服务选择<code>是</code>，之后点击 <code>OK</code>，开启服务后，选择 <code>Finish</code> 退出设置界面。<br>为了保证远程登录时树莓派的IP地址是不变的，需要固定树莓派的IP地址即将其地址设置为静态IP，设置方法如下：<br>在终端下，输入 <code>sudo nano /etc/dhcpcd.conf</code>，找到 <code>Example static IP configuration</code>，做以下修改：</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="deletion">- # interface eth0</span></span><br><span class="line"><span class="deletion">- # static ip_address=192.168.1.20/24</span></span><br><span class="line"><span class="deletion">- # static routers=192.168.1.1</span></span><br><span class="line"><span class="addition">+ interface eth0 # 若是连接WiFi下，则改为 interface wlan	0</span></span><br><span class="line"><span class="addition">+ static ip_address=192.168.1.20/24</span></span><br><span class="line"><span class="addition">+ static routers=192.168.1.1</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>远程桌面（xdrp）<br>在树莓派终端下执行 <code>sudo apt-get install xrdp</code>，在Windows下可以登录树莓派的远程桌面，按下快捷键 <code>win + R</code>输入<code>mstsc</code>，输入树莓派的 IP 地址后点击连接，在认证界面输入树莓派的账号及密码即可登录远程桌面。如若树莓派操作系统安装xrdp后，在windows里用mstsc打开对应的IP地址，登录的过程中出现如下错误（IP地址，用户名，密码正确的情况下），则在树莓派终端执行 <code>sudo apt-get install tightvncserver</code>然后重启树莓派即可。</p>
</li>
</ol>
<h3 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h3><h4 id="启用root"><a href="#启用root" class="headerlink" title="启用root"></a>启用root</h4><p>初次登录树莓派的用户账号是pi，开启 root 用户便于更多需要高权限的操作。</p>
<ol>
<li>设置 root 账号密码<br>在树莓派终端执行<code>sudo passwd root</code>，输入两次想设置的root密码即可/</li>
<li>解锁root账号<br>树莓派终端执行<code>sudo passwd --unlock root</code>即可。</li>
<li>切换到root账号<br>在终端执行 <code>su root</code>，输入root密码，切换到root用户下终端的起始符号会变更为 <code>#</code>，在终端输入<code>exit</code>便能切换回pi用户。</li>
</ol>
<h4 id="添加中文输入法"><a href="#添加中文输入法" class="headerlink" title="添加中文输入法"></a>添加中文输入法</h4><p>树莓派默认使用英文输入法，想要在树莓派中输入中文可以安装中文字库以及中文输入法。</p>
<ol>
<li>安装中文字库<br>在树莓派终端输入 <code>sudo  apt-get install ttf-wqy-zenhei</code>。</li>
<li>安装中文输入法<br>在树莓派终端输入 <code>sudo apt-get install fcitx fcitx-googlepinyin fcitx-module-cloudpinyin fcitx-sunpinyin</code>。</li>
<li>设置系统支持中文<br>在树莓派终端输入 <code>sudo raspi-config</code>，选择 <code>4 Localisation Options</code>，然后选择 <code>I1 Change Locale</code>，之后一直按<code>↓</code>按钮，直到出现 <code>zh_CN GB2312``zh_CN.GB18030 GB18030``zh_CN.GBK GBK``zh_CN.UTF-8  UTF-8</code>四个选项，在四个选项前按下空格键即可选中同时显示<code>*</code>，按下回车键确认，之后按<code>↓</code>直到最后，选择zh_CN.UTF-8，按回车确认。退出设置界面，终端提示如下图即表示配置成功。<br><img src="/Blog/images/Raspberry_zh.png" alt="系统安装成功"><i class="img-caption">☆ 系统安装成功</i></li>
<li>添加中文输入法<br>打开系统首选项，选择 <code>Fcitx</code>，点击左下角的<code>+</code>，将<code>仅显示当前语言</code>的<code>✔</code>去掉，下滑至最底部，选择Google拼音或者Sunpinyin并点击确认即可。切换中文按下快捷键 <code>ctrl+space</code>，在中文输入法下可以按下快捷键 <code>Ctrl+Shift</code>切换中英文输入法。</li>
</ol>
<h4 id="更换软件源"><a href="#更换软件源" class="headerlink" title="更换软件源"></a>更换软件源</h4><p>树莓派官方系统raspbian自带的是国外的软件源，在国内使用经常会遇到无法下载软件的问题。通过修改系统配置<code>sources.list</code>为国内软件源即可解决网络问题。</p>
<ol>
<li>清华源<sup id="fnref:6"><a href="#fn:6" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[清华源](https://mirror.tuna.tsinghua.edu.cn/help/raspbian/)
">[6]</span></a></sup><br>在终端输入 <code>sudo nano /etc/apt/sources.list</code>，添加以下内容：<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="deletion">- 编辑 `/etc/apt/sources.list` 文件，删除或注释原文件所有内容，用以下内容取代：</span></span><br><span class="line"><span class="addition">+ deb http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ buster main non-free contrib</span></span><br><span class="line"><span class="addition">+ deb-src http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ buster main non-free contrib</span></span><br></pre></td></tr></table></figure>
在终端输入 <code>sudo nano /etc/apt/sources.list.d/raspi.list</code>，添加以下内容：<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="deletion">- # 编辑 `/etc/apt/sources.list.d/raspi.list` 文件，删除原文件所有内容，用以下内容取代：</span></span><br><span class="line"><span class="addition">+ deb http://mirrors.tuna.tsinghua.edu.cn/raspberrypi/ buster main ui</span></span><br></pre></td></tr></table></figure></li>
<li>中科大源<sup id="fnref:7"><a href="#fn:7" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[中科大源](http://mirrors.ustc.edu.cn/help/raspbian.html)
">[7]</span></a></sup><br>将上述源内容中 <code>tuna.tsinghua.edu.cn/raspberrypi/</code> 改为 <code>ustc.edu.cn/raspbian/</code>即可。</li>
</ol>
<h3 id="树莓派LED灯指示"><a href="#树莓派LED灯指示" class="headerlink" title="树莓派LED灯指示"></a>树莓派LED灯指示</h3><p>在使用树莓派过程中，由于一般不对树莓派安装过多外接设备，而是进行远程控制，因此LED灯的状态对判断树莓派的情况具有很大作用。此部分内容参照树莓派实验室对LED灯的解释[2]。</p>
<table>
<thead>
<tr>
<th align="center">LED</th>
<th align="center">颜色</th>
<th align="center">功能</th>
<th align="center">正常状态</th>
</tr>
</thead>
<tbody><tr>
<td align="center">ACT</td>
<td align="center">绿色</td>
<td align="center">card status</td>
<td align="center">闪烁:SD卡正在活动（类似电脑的硬盘灯）</td>
</tr>
<tr>
<td align="center">PWR</td>
<td align="center">红色</td>
<td align="center">power</td>
<td align="center">不闪烁:正常</td>
</tr>
<tr>
<td align="center">FDX</td>
<td align="center">橙</td>
<td align="center">full duplex</td>
<td align="center">亮:全双工/不亮:半双工</td>
</tr>
<tr>
<td align="center">LNK</td>
<td align="center">橙</td>
<td align="center">link</td>
<td align="center">亮:网络连接成功</td>
</tr>
<tr>
<td align="center">100</td>
<td align="center">橙</td>
<td align="center">100 Mbps</td>
<td align="center">亮:100 Mbps/不亮:10 Mbps</td>
</tr>
</tbody></table>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol>
<li>禁止将树莓派的引脚短路，特别是VCC和GND，短路会造成芯片烧毁无法恢复。</li>
<li>树莓派启动需要几十秒时间，打开电源后1分钟内不可以关闭电源，会影响树莓派的使用寿命。</li>
<li>SD卡烧录系统完成时，系统会提示格式化，此时不需要格式化，点击取消即可。若点了格式化后树莓派会提示缺失文件，需要重新烧录系统。</li>
<li>树莓派4B的HDMI接口变成两个micro-HDMI接口（hdmi0和hdmi1），可以接入两个显示器。如果只连接一个显示器，一定要插入hdmi0接口，也就是靠近type-C电源接口的那一个，才可以正常显示；如果只插入hdmi1接口，会出现显示器无法显示的情况。</li>
</ol>
<h2 id="进阶配置"><a href="#进阶配置" class="headerlink" title="进阶配置"></a>进阶配置</h2><ol>
<li><a href="https://linwhitehat.github.io/Blog/2020/03/24/%E7%8E%A9%E8%BD%AC%E6%A0%91%E8%8E%93%E6%B4%BE%EF%BC%88%E4%BA%8C%EF%BC%89.html">树莓派搭建透明网关</a></li>
<li><a href="">定时邮件通知动态公网IP</a></li>
</ol>
<h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>树莓派目前已经具有很好的生态以及广泛的使用群体，也有不少技术论坛和官方技术博客，其本身可以实现很多功能需求，对于有需要和想玩树莓派的人可以逐渐深入接触，也许将带来奇妙的体验。</p>
<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.raspberrypi.org/" target="_blank" rel="noopener external nofollow noreferrer">树莓派官网</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://shumeipai.nxez.com/2014/09/30/raspberry-pi-led-status-detail.html" target="_blank" rel="noopener external nofollow noreferrer">树莓派LED指示灯状态的解释</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://zh.wikipedia.org/wiki/%E6%A0%91%E8%8E%93%E6%B4%BE" target="_blank" rel="noopener external nofollow noreferrer">树莓派-维基百科</a><a href="#fnref:3" rev="footnote"> ↩</a></span></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">4.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.yahboom.com/study/raspberry4B" target="_blank" rel="noopener external nofollow noreferrer">树莓派4B指南</a><a href="#fnref:4" rev="footnote"> ↩</a></span></li><li id="fn:5"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">5.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://raspberry-projects.com/pi/pi-operating-systems/win32diskimager" target="_blank" rel="noopener external nofollow noreferrer">win32diskimager-for-raspberry</a><a href="#fnref:5" rev="footnote"> ↩</a></span></li><li id="fn:6"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">6.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://mirror.tuna.tsinghua.edu.cn/help/raspbian/" target="_blank" rel="noopener external nofollow noreferrer">清华源</a><a href="#fnref:6" rev="footnote"> ↩</a></span></li><li id="fn:7"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">7.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="http://mirrors.ustc.edu.cn/help/raspbian.html" target="_blank" rel="noopener external nofollow noreferrer">中科大源</a><a href="#fnref:7" rev="footnote"> ↩</a></span></li><li id="fn:8"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">8.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://blog.csdn.net/srf1986/article/details/103556877" target="_blank" rel="noopener external nofollow noreferrer">树莓派4B，以树莓派官方系统为蓝本，定制自己的树莓派系统</a><a href="#fnref:8" rev="footnote"> ↩</a></span></li><li id="fn:9"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">9.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://blog.csdn.net/zbgjhy88/article/details/60323047" target="_blank" rel="noopener external nofollow noreferrer">树莓派3B安装Chromium</a><a href="#fnref:9" rev="footnote"> ↩</a></span></li><li id="fn:10"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">10.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="http://ports.ubuntu.com/pool/universe/c/chromium-browser/" target="_blank" rel="noopener external nofollow noreferrer">chromium下载</a><a href="#fnref:10" rev="footnote"> ↩</a></span></li><li id="fn:11"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">11.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://github.com/openfans-community-offical/Debian-Pi-Aarch64/blob/master/README_zh.md#1-1%E7%B3%BB%E7%BB%9F%E7%8E%AF%E5%A2%83%E7%89%88%E6%9C%AC%E4%BB%8B%E7%BB%8D" target="_blank" rel="noopener external nofollow noreferrer">全新树莓派64位系统</a><a href="#fnref:11" rev="footnote"> ↩</a></span></li><li id="fn:12"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">12.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://zhuanlan.zhihu.com/p/107596869" target="_blank" rel="noopener external nofollow noreferrer">树莓派资源整理汇总(2020年2月18日更新)</a><a href="#fnref:12" rev="footnote"> ↩</a></span></li><li id="fn:13"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">13.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://elinux.org/RPiconfig" target="_blank" rel="noopener external nofollow noreferrer">安装树莓派系统的config文件说明-RPiconfig</a><a href="#fnref:13" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>技术分享</category>
        <category>树莓派</category>
      </categories>
      <tags>
        <tag>树莓派</tag>
        <tag>raspberry</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML系列</title>
    <url>/Blog/2020/02/23/Html%E7%B3%BB%E5%88%97.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\Blog\assets\css\APlayer.min.css"><script src="\Blog\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\Blog\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>这篇博文是在自定义博客页面中不断回顾和使用 HTML 知识后做的记录，以前学的前端知识尽管是基础知识，但是只是前端的皮毛，对 HTML5 以及脚本甚至最新的W3C认证的WEB语言<code>WebAssembly</code>，因此本文依据博客制作完善过程的前端应用将对应知识进行记录分享。</p>
<a id="more"></a>

<h2 id="HTML5"><a href="#HTML5" class="headerlink" title="HTML5"></a>HTML5</h2><h3 id="网页背景音乐"><a href="#网页背景音乐" class="headerlink" title="网页背景音乐"></a>网页背景音乐</h3><p>传统的在 HTML 页面中存在多种方法能进行插入音频，除了浏览器中插入浏览器插件外，在 HTML 中可以使用<code>embed</code>和<code>object</code>标签<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[W3school HTML 音频](https://www.w3school.com.cn/html/html_audio.asp)
">[1]</span></a></sup>。</p>
<h4 id="lt-embed-gt-元素"><a href="#lt-embed-gt-元素" class="headerlink" title="&lt;embed&gt;元素"></a><code>&lt;embed&gt;</code>元素</h4><p>此标签元素可定义外部资源的容器，是 HTML5 标签。使用此标签，可以对外部资源进行引用并定义资源嵌入网页的容器，引入 MP3 资源如下:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">embed</span> <span class="attr">height</span>=<span class="string">"100"</span> <span class="attr">width</span>=<span class="string">"100"</span> <span class="attr">src</span>=<span class="string">"song.mp3"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>具体使用效果可参考我的一篇博客中的教程说明，可参阅<a href="https://linwhitehat.github.io/Blog/2020/01/30/%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96.html">博客主题优化-添加音乐</a>。</p>
<h4 id="lt-object-gt-元素"><a href="#lt-object-gt-元素" class="headerlink" title="&lt;object&gt;元素"></a><code>&lt;object&gt;</code>元素</h4><p>此标签元素与<code>embed</code>元素功能基本相同，引入 MP3 资源如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">object</span> <span class="attr">height</span>=<span class="string">"100"</span> <span class="attr">width</span>=<span class="string">"100"</span> <span class="attr">data</span>=<span class="string">"song.mp3"</span>&gt;</span><span class="tag">&lt;/<span class="name">object</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="lt-audio-gt-标签"><a href="#lt-audio-gt-标签" class="headerlink" title="&lt;audio&gt;标签"></a><code>&lt;audio&gt;</code>标签</h4><p>本文推荐在 HTML 中使用此元素标签，此元素是一个 HTML5 元素，在所有浏览器中均有效<sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[HTML5 标签audio添加网页背景音乐代码](https://blog.csdn.net/ithomer/article/details/48622023)
">[2]</span></a></sup><sup id="fnref:4"><a href="#fn:4" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[HTML <audio> 标签](https://www.w3school.com.cn/tags/tag_audio.asp)">[4]</span></a></sup>。示例如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">controls</span>=<span class="string">"controls"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"song.mp3"</span> /&gt;</span></span><br><span class="line">Your browser does not support this audio format.</span><br><span class="line"><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>建议在标签之间写入文本，意在旧浏览器访问设置此标签的网站时能够显示文本内容。<br>此标签包含的属性如下，更多属性说明如在 Firefox 浏览器中的所有属性说明可参照<sup id="fnref:3"><a href="#fn:3" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[audio](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/audio)
">[3]</span></a></sup>：</p>
<table>
<thead>
<tr>
<th>属性</th>
<th align="center">值</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>autoplay</td>
<td align="center">布尔值</td>
<td>音频资源加载后自动播放，默认值为<code>false</code></td>
</tr>
<tr>
<td>controls</td>
<td align="center">controls</td>
<td>在页面中显示控制播放窗口</td>
</tr>
<tr>
<td>loop</td>
<td align="center">布尔值</td>
<td>音频资源循环播放</td>
</tr>
<tr>
<td>preload</td>
<td align="center"><code>none</code>/<code>metadata</code>/<code>auto</code></td>
<td>当所在页面加载时便进行资源加载</td>
</tr>
<tr>
<td>muted</td>
<td align="center">muted</td>
<td>音频设置静音</td>
</tr>
<tr>
<td>src</td>
<td align="center">url</td>
<td>音频资源的链接地址，可以使用<code>&lt;source&gt;</code>标签设置</td>
</tr>
</tbody></table>
<p>浏览器支持情况如下，更多浏览器支持情况参照浏览器兼容性<sup id="fnref:3"><a href="#fn:3" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[audio](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/audio)
">[3]</span></a></sup>：</p>
<table>
<thead>
<tr>
<th>支持情况</th>
<th align="center">IE</th>
<th align="center">Edge</th>
<th align="center">Firefox</th>
<th align="center">Chrome</th>
<th align="center">Safari</th>
<th>Opera</th>
</tr>
</thead>
<tbody><tr>
<td>audio标签</td>
<td align="center">9+</td>
<td align="center">12+</td>
<td align="center">3.5+</td>
<td align="center">3+</td>
<td align="center">3.1+</td>
<td>10.5+</td>
</tr>
<tr>
<td>buffered属性</td>
<td align="center">unknown</td>
<td align="center">yes</td>
<td align="center">4+</td>
<td align="center">unknown</td>
<td align="center">unknown</td>
<td>unknown</td>
</tr>
<tr>
<td>preload属性</td>
<td align="center">9+</td>
<td align="center">12+</td>
<td align="center">4+</td>
<td align="center">64+在属性<code>metadata</code>中默认配置</td>
<td align="center">3.1+</td>
<td>51+在属性<code>metadata</code>中默认配置</td>
</tr>
</tbody></table>
<p><strong>注意：</strong><br>不同浏览器对支持播放的音频格式存在差异，如果要满足多种浏览器的音频格式支持，可以使用多个<code>&lt;source&gt;</code>标签加载多种音频格式的资源。</p>
<h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>本文博文将对前端中 HTML 的语法进行整理，整理进程以实际使用为参照，对新加入的语法及语言应用也会适当更新在博文中。</p>
<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.w3school.com.cn/html/html_audio.asp" target="_blank" rel="noopener external nofollow noreferrer">W3school HTML 音频</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://blog.csdn.net/ithomer/article/details/48622023" target="_blank" rel="noopener external nofollow noreferrer">HTML5 标签audio添加网页背景音乐代码</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/audio" target="_blank" rel="noopener external nofollow noreferrer">audio</a><a href="#fnref:3" rev="footnote"> ↩</a></span></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">4.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.w3school.com.cn/tags/tag_audio.asp" target="_blank" rel="noopener external nofollow noreferrer">HTML <audio> 标签</a><a href="#fnref:4" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>技术分享</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>Git专栏系列</title>
    <url>/Blog/2020/02/17/Git%E4%B8%93%E6%A0%8F.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\Blog\assets\css\APlayer.min.css"><script src="\Blog\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\Blog\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>随着对 GitHub 和 Gitlab 使用频次增加，对版本管理和使用需求逐渐增加，学会基本的 Git 技能对于工科生已经是必备技巧了，但是还是要不断学会更加灵巧的使用，同时分布式管理版本需要有意识的做好版本信息说明，且分支、权限等设置对于 Gitlab 使用十分重要，一起学习Git吧。</p>
<a id="more"></a>

<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h3><p>Git 和其它版本控制系统（包括 Subversion 和近似工具）的主要差别在于 Git 对待数据的方法。 概念上来区分，其它大部分系统以文件变更列表的方式存储信息。 这类系统（CVS、Subversion、Perforce、Bazaar 等等）将它们保存的信息看作是一组基本文件和每个文件随时间逐步累积的差异。Git 不按照前述方式对待或保存数据。 反之，Git 更像是把数据看作是对小型文件系统的一组快照。 每次你提交更新，或在 Git 中保存项目状态时，它主要对当时的全部文件制作一个快照并保存这个快照的索引。 为了高效，如果文件没有修改，Git 不再重新存储该文件，而是只保留一个链接指向之前存储的文件。 Git 对待数据更像是一个 <strong>快照流</strong>。<br><img src="/Blog/images/git-1.png" alt="Git 数据存储处理方式"><i class="img-caption">☆ Git 数据存储处理方式</i></p>
<h3 id="本地处理"><a href="#本地处理" class="headerlink" title="本地处理"></a>本地处理</h3><p>Git 中的绝大多数操作都只需要访问本地文件和资源，一般不需要来自网络上其它计算机的信息。如果要浏览项目的历史，Git 不需外连到服务器去获取历史，然后再显示出来——它只需直接从本地数据库中读取便能立即看到项目历史。 如果想查看当前版本与一个月前的版本之间引入的修改，Git 会查找到一个月前的文件做一次本地的差异计算，而不是由远程服务器处理或从远程服务器拉回旧版本文件再来本地处理。</p>
<h3 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h3><p>Git 有三种状态，所有文件文件可能处于其中之一，包括：已提交（committed）、已修改（modified）和已暂存（staged）。</p>
<table>
<thead>
<tr>
<th>status</th>
<th align="center">committed</th>
<th align="center">modified</th>
<th>staged</th>
</tr>
</thead>
<tbody><tr>
<td>说明</td>
<td align="center">已提交表示数据已经安全的保存在本地数据库中</td>
<td align="center">已修改表示修改了文件，但还没保存到数据库中</td>
<td>已暂存表示对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中</td>
</tr>
</tbody></table>
<p>由此引入 Git 项目的三个工作区域的概念：Git 仓库、工作目录以及暂存区域。<br><img src="/Blog/images/git-2.png" alt="工作目录、暂存区域以及 Git 仓库"><i class="img-caption">☆ 工作目录、暂存区域以及 Git 仓库</i></p>
<table>
<thead>
<tr>
<th>工作区域</th>
<th align="center">Git 仓库目录</th>
<th align="center">工作目录</th>
<th>暂存区域</th>
</tr>
</thead>
<tbody><tr>
<td>说明</td>
<td align="center">是 Git 用来保存项目的元数据和对象数据库的地方。这是 Git 中最重要的部分，从其它计算机克隆仓库时，拷贝的就是这里的数据。</td>
<td align="center">是对项目的某个版本独立提取出来的内容。这些从 Git 仓库的压缩数据库中提取出来的文件，放在磁盘上供你使用或修改。</td>
<td>是一个文件，保存了下次将提交的文件列表信息，一般在 Git 仓库目录中。有时候也被称作“索引”，不过一般说法还是叫暂存区域。</td>
</tr>
</tbody></table>
<h3 id="Git工作流程"><a href="#Git工作流程" class="headerlink" title="Git工作流程"></a>Git工作流程</h3><p>依据状态而言，主要是三个步骤：</p>
<ol>
<li>在工作目录中修改文件；</li>
<li>暂存文件，将文件的快照放入暂存区域；</li>
<li>提交更新，找到暂存区域的文件，将快照永久性存储到 Git 仓库目录。</li>
</ol>
<h3 id="Git使用"><a href="#Git使用" class="headerlink" title="Git使用"></a>Git使用</h3><p>Git的使用可以基于两种方式，一种是命令行，一种是GUI。其中GUI模式可以下载使用<code>Github Desktop</code>、<code>Sourcetree</code>、<code>tortoiseGit</code>等，当前已经存在很多良好设计的GUI软件，可参照此处<sup id="fnref:12"><a href="#fn:12" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Git 有哪些好用的图形化客户端](https://www.zhihu.com/question/22932048)">[12]</span></a></sup>。本文后续使用都将基于命令行方式，因为GUI方式基本较易掌握。</p>
<h3 id="Git安装与配置"><a href="#Git安装与配置" class="headerlink" title="Git安装与配置"></a>Git安装与配置</h3><p>由于更多使用是在Windows平台，因此相关博文内容也是基于Windows。</p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>访问<a href="https://git-scm.com/download/win" target="_blank" rel="noopener external nofollow noreferrer">Downloading Git</a>进行下载，这是 Git for Windows 项目，也叫 msysGit。</p>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>这里不对 Git 的配置做过多叙述，只说明用户配置，因为这个是必须配置。使用下述语句进行配置用户名和邮箱：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">"Your Name"</span></span><br><span class="line">git config --global user.email youremail@example.com</span><br></pre></td></tr></table></figure>
<p>需要说明的是，如果使用了 <code>--global</code> 选项，那么该命令只需要运行一次，因为之后无论在此系统上做任何事情， Git 都会使用那些信息。 当针对特定项目使用不同的用户名称与邮件地址时，可以在那个项目目录下运行没有 <code>--global</code> 选项的命令来配置。</p>
<h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p>当使用 Git 需要对相应命令进行查询时可以使用下述命令之一在使用手册中进行查询：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">help</span> &lt;verb&gt;</span><br><span class="line">git &lt;verb&gt; --<span class="built_in">help</span></span><br><span class="line">man git-&lt;verb&gt;</span><br></pre></td></tr></table></figure>

<h4 id="获取-Git-仓库"><a href="#获取-Git-仓库" class="headerlink" title="获取 Git 仓库"></a>获取 Git 仓库</h4><p>一般是对 GitHub 或 Gitlab 仓库进行获取，对于刚创建的仓库，一般内容是空的或只存在<code>README</code>文件，若是空仓库，GitHub 或 Gitlab 会提示用户需要执行的操作对仓库进行初始化。此处叙述两种场景：</p>
<ol>
<li>在本地已存在的m目录中初始化仓库<br>在本地目录中打开<code>git bash</code>，输入<code>git init</code>，该命令将创建一个名为 <code>.git</code> 的子目录，这个子目录含有初始化的 Git 仓库中所有的必须文件，这些文件是 Git 仓库的核心。当本地目录已经存在项目内容，可以之间输入以下命令进行追踪：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">'initial project version'</span></span><br></pre></td></tr></table></figure></li>
<li>克隆现有的远程仓库<br>使用下述命令进行仓库克隆到本地：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> [url]</span><br><span class="line">git <span class="built_in">clone</span> [url] localname <span class="comment">#自定义克隆到本地的仓库名localname</span></span><br></pre></td></tr></table></figure>
克隆支持多种传输协议，包括<code>https://</code>、<code>git://</code>和SSH传输协议如<code>user@server:path/to/repo.git</code>，常见是使用<code>https://</code>。</li>
</ol>
<h4 id="提交到仓库"><a href="#提交到仓库" class="headerlink" title="提交到仓库"></a>提交到仓库</h4><p>一般提交仓库是添加内容、删除内容、添加说明、查看状态以及推送与拉取数据，其他更多详细内容可参照<sup id="fnref:11"><a href="#fn:11" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[git教程](https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%85%B3%E4%BA%8E%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6)
">[11]</span></a></sup>。</p>
<ol>
<li>检查当前文件状态，<code>git status</code>；</li>
<li>跟踪即添加文件，<code>git add filename</code>；</li>
<li>提交文件说明，<code>git commit -m &quot;description&quot;</code>；</li>
<li>删除本地仓库内容，<code>git rm file</code>或<code>git rm -r folder</code>；</li>
<li>推送数据到远程，<code>git push</code>；</li>
<li>拉取数据到本地，<code>git pull</code>。</li>
</ol>
<p>上述教程及图片来源<sup id="fnref:11"><a href="#fn:11" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[git教程](https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%85%B3%E4%BA%8E%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6)
">[11]</span></a></sup>。使用 Git 部署 Gitlab 的流程可参照<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Gitlab创建新项目](https://www.jianshu.com/p/c91ea165eaa4)
">[1]</span></a></sup>或查看下述<a href="#Git-Connect">章节内容</a>。</p>
<h2 id="Git连接GitHub"><a href="#Git连接GitHub" class="headerlink" title="Git连接GitHub"></a><span id="Git-Connect">Git连接GitHub</span></h2><h3 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h3><p>使用 SSH 协议可以连接远程服务器和服务并向它们验证。 利用 SSH 密钥可以连接 GitHub，而无需在每次访问时提供用户名或密码。<sup id="fnref:8"><a href="#fn:8" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[使用 SSH 连接到 GitHub](https://help.github.com/cn/github/authenticating-to-github/connecting-to-github-with-ssh)
">[8]</span></a></sup></p>
<h3 id="检查SSH密钥"><a href="#检查SSH密钥" class="headerlink" title="检查SSH密钥"></a>检查SSH密钥</h3><p>本文以 Windows 为例，在生成SSH密钥前先检查本地是否已经存在密钥，避免覆盖而影响前述配置。步骤如下：</p>
<ol>
<li>打开<code>git bash</code>；</li>
<li>输入<code>ls -al ~/.ssh</code>查看是否存在SSH密钥，如果有则会在终端中显示存在的密钥；</li>
<li>检查目录列表以查看是否已经有 SSH 公钥。 默认情况下，公钥的文件名是以下之一：</li>
</ol>
<ul>
<li>id_rsa.pub</li>
<li>id_ecdsa.pub</li>
<li>id_ed25519.pub</li>
</ul>
<h3 id="生成SSH密钥"><a href="#生成SSH密钥" class="headerlink" title="生成SSH密钥"></a>生成SSH密钥</h3><p>若当前不存在SSH密钥则需要生成。生成新 SSH 密钥以用于身份验证，然后将其添加到 ssh-agent。步骤如下:</p>
<ol>
<li>打开<code>git bash</code>；</li>
<li>输入以下内容创建以所提供的电子邮件地址为标签的新 SSH 密钥：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C <span class="string">"your_email@example.com"</span></span><br></pre></td></tr></table></figure>
之后终端会显示：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; Generating public/private rsa key pair.</span><br></pre></td></tr></table></figure></li>
<li>提示“Enter a file in which to save the key（输入要保存密钥的文件）”时如下所示，按 Enter 键。 这将接受默认文件位置。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; Enter a file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/c/Users/you/.ssh/id_rsa):[Press enter]</span><br></pre></td></tr></table></figure></li>
<li>在提示时输入安全密码，若不输入则密码为空，但是不影响生成密钥。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; Enter passphrase (empty <span class="keyword">for</span> no passphrase): [Type a passphrase]</span><br><span class="line">&gt; Enter same passphrase again: [Type passphrase again]</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="将SSH密钥添加到ssh-agent"><a href="#将SSH密钥添加到ssh-agent" class="headerlink" title="将SSH密钥添加到ssh-agent"></a>将SSH密钥添加到ssh-agent</h3><p>如果已安装 <a href="https://desktop.github.com/" target="_blank" rel="noopener external nofollow noreferrer">GitHub Desktop</a>，可使用它克隆仓库，而无需处理 SSH 密钥。 它还附带 <code>Git Bash</code> 工具，这是在 Windows 上运行 <code>git</code> 命令的首选方法。<br>添加步骤如下：</p>
<ol>
<li>确保 ssh-agent 正在运行：</li>
</ol>
<ul>
<li>如果使用随 GitHub Desktop 一起安装的 Git Shell，则 ssh-agent 应该正在运行；</li>
<li>如果使用的是其他终端提示符，例如 Git for Windows，可以根据“<a href="https://help.github.com/cn/github/authenticating-to-github/working-with-ssh-key-passphrases" target="_blank" rel="noopener external nofollow noreferrer">使用 SSH 密钥密码</a>”中的“自动启动 ssh-agent”说明进行操作，或者手动启动：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在后台启动 ssh-agent</span></span><br><span class="line"><span class="built_in">eval</span> $(ssh-agent -s)</span><br><span class="line">&gt; Agent pid 59566</span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="2">
<li>将 SSH 私钥添加到 ssh-agent。 如果创建了不同名称的密钥，或者要添加不同名称的现有密钥，请将命令中的 id_rsa 替换为对应私钥文件的名称：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-add ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="添加-SSH密钥到GitHub账号"><a href="#添加-SSH密钥到GitHub账号" class="headerlink" title="添加 SSH密钥到GitHub账号"></a>添加 SSH密钥到GitHub账号</h3><p>在新增 SSH 密钥到 GitHub 帐户后，便能使用 SSH 重新配置任何本地仓库。步骤如下：</p>
<ol>
<li>复制 SSH密钥<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">clip &lt; ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure></li>
<li>进入GitHub账号的Setting；</li>
<li>在用户设置侧边栏中，单击 SSH and GPG keys（SSH 和 GPG 密钥）；</li>
<li>单击 New SSH key（新 SSH 密钥）或 Add SSH key（添加 SSH 密钥）；</li>
<li>在 “Title”（标题）字段中，为新密钥添加描述性标签；</li>
<li>将密钥粘贴到 “Key”（密钥）字段，点击 Add SSH Key（添加SSH密钥）。</li>
</ol>
<h3 id="本地SSH测试"><a href="#本地SSH测试" class="headerlink" title="本地SSH测试"></a>本地SSH测试</h3><p>测试连接时，需要使用密码（即之前创建的 SSH 密钥密码）验证此操作。测试步骤如下:</p>
<ol>
<li>打开<code>git bash</code>；</li>
<li>输入以下内容：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>
终端返回以下内容：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; The authenticity of host <span class="string">'github.com (IP ADDRESS)'</span> can<span class="string">'t be established.</span></span><br><span class="line"><span class="string">&gt; RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.</span></span><br><span class="line"><span class="string">&gt; Are you sure you want to continue connecting (yes/no)?</span></span><br></pre></td></tr></table></figure>
或以下内容：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; The authenticity of host <span class="string">'github.com (IP ADDRESS)'</span> can<span class="string">'t be established.</span></span><br><span class="line"><span class="string">&gt; RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.</span></span><br><span class="line"><span class="string">&gt; Are you sure you want to continue connecting (yes/no)?</span></span><br></pre></td></tr></table></figure></li>
<li>验证看到的消息中的指纹匹配步骤 2 中的消息之一，然后输入 <code>yes</code>，测试成功则会看到下述内容：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; Hi username! You<span class="string">'ve successfully authenticated, but GitHub does not</span></span><br><span class="line"><span class="string">&gt; provide shell access.</span></span><br></pre></td></tr></table></figure></li>
<li>验证生成的消息包含用户名；</li>
<li>若出现权限被拒绝等错误，请参照此处<sup id="fnref:7"><a href="#fn:7" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[错误：权限被拒绝（公钥）](https://help.github.com/cn/github/authenticating-to-github/error-permission-denied-publickey)
">[7]</span></a></sup>。</li>
</ol>
<h2 id="特殊文件说明"><a href="#特殊文件说明" class="headerlink" title="特殊文件说明"></a>特殊文件说明</h2><h3 id="gitkeep"><a href="#gitkeep" class="headerlink" title=".gitkeep"></a>.gitkeep</h3><p>这个文件之前我也没遇到过，直到最近准备在组织给建立的 Gitlab 项目上传内容时，准备将空项目<code>pull</code>下来时，发现本地目录出现了<code>.gitkeep</code>文件，由此产生好奇，进而查阅资料后发现它的作用是为了使一个空文件夹能够被正常同步，即当文件夹中没有任何内容时加入<code>.gitkeep</code>使得文件夹能够被同步。</p>
<h3 id="gitignore"><a href="#gitignore" class="headerlink" title=".gitignore"></a>.gitignore</h3><p>这个文件可以自行在本地 Git 根目录下创建，用于设置需要忽略的文件，使得 Git 不会处理这部分文件。配置可参照<sup id="fnref:9"><a href="#fn:9" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[gitignore](https://github.com/github/gitignore)
">[9]</span></a></sup>，需要忽略的文件，设置原则如下：</p>
<ol>
<li>忽略操作系统自动生成的文件，比如缩略图等；</li>
<li>忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件就没必要放进版本库，比如Java编译产生的<code>.class</code>文件；</li>
<li>忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件，一般是博客配置涉及的源码内容。</li>
</ol>
<h2 id="常见问题-amp-解决"><a href="#常见问题-amp-解决" class="headerlink" title="常见问题&amp;解决"></a>常见问题&amp;解决</h2><h3 id="Gitlab使用git-clone-git-xxx被拒绝"><a href="#Gitlab使用git-clone-git-xxx被拒绝" class="headerlink" title="Gitlab使用git clone@git.xxx被拒绝"></a>Gitlab使用<code>git clone@git.xxx</code>被拒绝</h3><p>在第一次对 Gitlab 上面的项目进行<code>clone</code>时发现服务器拒绝访问，且<code>22</code>端口无法连接通信，意味着使用<code>ssh</code>连接项目仓库时无法正常连接，发生这种情况可检查以下情况是否存在:</p>
<ol>
<li>Gitlab 账号是否导入<code>SSH KEY</code></li>
<li>咨询所在 Gitlab 项目的组织管理员是否将<code>22</code>端口关闭，以及确认权限分配情况</li>
</ol>
<p>这种情况下，可以使用<code>https</code>的访问方式进行项目管理，访问方式变化如下：</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="deletion">- git clone git@git.123.com:abc/test.git</span></span><br><span class="line"><span class="addition">+ git clone https://git.123.com/abc/test.git</span></span><br></pre></td></tr></table></figure>

<h3 id="多个-SSH-KEY-管理"><a href="#多个-SSH-KEY-管理" class="headerlink" title="多个 SSH KEY 管理"></a>多个 SSH KEY 管理</h3><p>当同时使用 Github 和 Gitlab 时，一般是私人和办公的情况，此时使用的邮箱账号是不同的，而要使用 Git 进行项目管理就需要配置 SSH KEY，为了避免第二次生成 SSH KEY 时将原先的 SSH KEY 覆盖，在此记录一下解决方法。</p>
<h4 id="已存在-Github-再配置-Gitlab"><a href="#已存在-Github-再配置-Gitlab" class="headerlink" title="已存在 Github 再配置 Gitlab"></a>已存在 Github 再配置 Gitlab</h4><p>一般个人会先拥有 Github，我也是先使用了 Github，因此经过了一次配置 SSH KEY，此时在<code>git bash</code>查看本地<code>~/.ssh</code>，如果存在<code>id_rsa</code>则说明已经存在公钥，则按照下述步骤进行配置：</p>
<ol>
<li>第二个 SSH KEY生成（我是 Gitlab）<br>打开<code>git bash</code>，执行以下命令，其中<code>email</code>填写自己的邮箱地址：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">"email"</span></span><br></pre></td></tr></table></figure>
出现以下信息时，将公钥名称做修改如下：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/c/Users/Yourname/.ssh/id_rsa): /c/Users/Yourname/.ssh/id_rsa_gitlab</span><br></pre></td></tr></table></figure>
其中<code>Yourname</code>即Windows下用户名，输入的内容即将默认信息中的<code>id_rsa</code>进行命名修改，之后可以默认回车，也可以根据自身情况设置。<br>配置完成之后，查看<code>~/.ssh</code>可以看到多出两个文件，且命名包括<code>id_rsa_gitlab</code>即完成公钥生成。</li>
<li>由于是在微软下使用的<code>msysgit</code>，在<code>git bash</code>中输入以下内容：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">eval</span> $(ssh-agent -s)</span><br></pre></td></tr></table></figure>
如果使用的是 Github 官方的bash工具，则输入<code>ssh-agent -s</code>。<br>上述操作用于打开ssh-agent，否则会在添加私钥信息时报错<code>Could not open a connection to your authentication agent</code>。</li>
<li>添加私钥<br>在<code>git bash</code>中输入以下内容：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-add ~/.ssh/id_rsa</span><br><span class="line">ssh-add ~/.ssh/id_rsa_gitlab</span><br></pre></td></tr></table></figure>
其中<code>id_rsa</code>是我用于 Github 的密钥文件，若提示文件或目录不存在，则使用绝对地址。</li>
<li>配置<code>config</code><br>在<code>~/.ssh</code>下创建<code>config</code>文件，添加下述内容：<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="addition">+ # gitlab</span></span><br><span class="line"><span class="addition">+   Host git.iboxpay.com      //这里填公司的git网址</span></span><br><span class="line"><span class="addition">+   HostName git.iboxpay.com  //这里填公司的git网址</span></span><br><span class="line"><span class="addition">+   PreferredAuthentications publickey</span></span><br><span class="line"><span class="addition">+   IdentityFile ~/.ssh/id_rsa_gitlab</span></span><br><span class="line"><span class="addition">+   User zhangjun</span></span><br><span class="line">    </span><br><span class="line"><span class="addition">+ # github</span></span><br><span class="line"><span class="addition">+   Host github.com</span></span><br><span class="line"><span class="addition">+   HostName github.com</span></span><br><span class="line"><span class="addition">+   PreferredAuthentications publickey</span></span><br><span class="line"><span class="addition">+   IdentityFile ~/.ssh/id_rsa_github</span></span><br><span class="line"><span class="addition">+   User ZJsnowman</span></span><br></pre></td></tr></table></figure></li>
<li>在 Gitlab 添加公钥<br>配置完密钥管理，在 Gitlab 的设置中添加之前生成的 SSH KEY即可。</li>
</ol>
<h4 id="配置完Gitlab后Github不能正常管理项目"><a href="#配置完Gitlab后Github不能正常管理项目" class="headerlink" title="配置完Gitlab后Github不能正常管理项目"></a>配置完Gitlab后Github不能正常管理项目</h4><p>当配置了双 SSH KEY后，对原先的Github项目进行版本管理，发现在<code>push</code>的时候无法使用原先的认证信息进行远程连接，而在设置了 Gitlab 的用户信息之后（即配置<code>git username / git email</code>）发现GitHub项目管理显示项目需要用户认证，此时我存在的情况是我将全局的用户信息配置进行重置，并单独为Gitlab项目建立局部的用户信息，可能将原先的配置用户信息删除，因此重新配置全局用户信息即可正常对GitHub项目管理控制，同时可修改<code>config</code>内容如下：</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="addition">+ # github</span></span><br><span class="line"><span class="addition">+ # Host github.com</span></span><br><span class="line"><span class="addition">+ # HostName github.com</span></span><br><span class="line"><span class="addition">+ # PreferredAuthentications publickey</span></span><br><span class="line"><span class="addition">+ # IdentityFile ~/.ssh/id_rsa_github</span></span><br><span class="line"><span class="addition">+ # User ZJsnowman</span></span><br><span class="line"><span class="addition">+ Host *</span></span><br><span class="line"><span class="addition">+ PreferredAuthentications publickey,password</span></span><br><span class="line"><span class="addition">+ IdentityFile ~/.ssh/id_rsa</span></span><br></pre></td></tr></table></figure>

<h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>本文是对 Git 的使用及本身遇到的一些问题及解决方法进行记录，希望能对遇到相似问题的朋友提供有用的内容。</p>
<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.jianshu.com/p/c91ea165eaa4" target="_blank" rel="noopener external nofollow noreferrer">Gitlab创建新项目</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.jianshu.com/p/f7f4142a1556" target="_blank" rel="noopener external nofollow noreferrer">管理git生成多个SSH KEY</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.awaimai.com/2200.html" target="_blank" rel="noopener external nofollow noreferrer">git配置多个SSH KEY</a><a href="#fnref:3" rev="footnote"> ↩</a></span></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">4.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://segmentfault.com/a/1190000002994742" target="_blank" rel="noopener external nofollow noreferrer">gitlab/github 多账户下设置 ssh keys</a><a href="#fnref:4" rev="footnote"> ↩</a></span></li><li id="fn:5"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">5.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.cnblogs.com/hafiz/p/8146324.html" target="_blank" rel="noopener external nofollow noreferrer">GitLab配置ssh key</a><a href="#fnref:5" rev="footnote"> ↩</a></span></li><li id="fn:6"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">6.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://blog.csdn.net/hdn_kb/article/details/99413390" target="_blank" rel="noopener external nofollow noreferrer">同步本地文件/文件目录到gitlab</a><a href="#fnref:6" rev="footnote"> ↩</a></span></li><li id="fn:7"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">7.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://help.github.com/cn/github/authenticating-to-github/error-permission-denied-publickey" target="_blank" rel="noopener external nofollow noreferrer">错误：权限被拒绝（公钥）</a><a href="#fnref:7" rev="footnote"> ↩</a></span></li><li id="fn:8"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">8.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://help.github.com/cn/github/authenticating-to-github/connecting-to-github-with-ssh" target="_blank" rel="noopener external nofollow noreferrer">使用 SSH 连接到 GitHub</a><a href="#fnref:8" rev="footnote"> ↩</a></span></li><li id="fn:9"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">9.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://github.com/github/gitignore" target="_blank" rel="noopener external nofollow noreferrer">gitignore</a><a href="#fnref:9" rev="footnote"> ↩</a></span></li><li id="fn:10"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">10.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.liaoxuefeng.com/wiki/896043488029600/900004590234208" target="_blank" rel="noopener external nofollow noreferrer">忽略特殊文件</a><a href="#fnref:10" rev="footnote"> ↩</a></span></li><li id="fn:11"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">11.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%85%B3%E4%BA%8E%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6" target="_blank" rel="noopener external nofollow noreferrer">git教程</a><a href="#fnref:11" rev="footnote"> ↩</a></span></li><li id="fn:12"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">12.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.zhihu.com/question/22932048" target="_blank" rel="noopener external nofollow noreferrer">Git 有哪些好用的图形化客户端</a><a href="#fnref:12" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>技术分享</category>
        <category>Code</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>Github</tag>
        <tag>Gitlab</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown·博客写作</title>
    <url>/Blog/2020/02/17/Markdown%E5%86%99%E4%BD%9C.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\Blog\assets\css\APlayer.min.css"><script src="\Blog\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\Blog\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>博客撰写使用的是<code>Markdown</code>，一般博客搭建教程会推荐Hexo写作<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Hexo写作](https://hexo.io/zh-cn/docs/writing.html)
">[1]</span></a></sup>给初学者进行博客撰写，但其实<code>Markdown</code>具有很多丰富的语法，同时支持Html语法，运用得当，将可以写出排版优美，内容丰富的文章，此篇博客默认读者了解Markdown的基本语法，但是也会提及，参照来自《Learning-Markdown》<sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Learning-Markdown](http://xianbai.me/learn-md/index.html)
">[2]</span></a></sup>。</p>
<a id="more"></a>

<h2 id="关于Markdown"><a href="#关于Markdown" class="headerlink" title="关于Markdown"></a>关于Markdown</h2><p>Markdown 是一种轻量级标记语言，创始人为约翰·格鲁伯（John Gruber）。它允许“使用易读易写的纯文本格式编写文档，然后转换成有效的 XHTML（或者 HTML）文档”。这种语言吸收了很多在电子邮件中已有的纯文本标记的特性。更多可参照<a href="https://zh.wikipedia.org/wiki/Markdown" target="_blank" rel="noopener external nofollow noreferrer">维基百科</a>。</p>
<h3 id="选择-Markdown"><a href="#选择-Markdown" class="headerlink" title="选择 Markdown"></a>选择 Markdown</h3><p>主要原因在于 Markdown 很适合用于编写文档、记录笔记、攥写文章，当然其他因素包括：</p>
<ul>
<li>它基于纯文本，方便修改和共享；</li>
<li>几乎可以在所有的文本编辑器中编写；</li>
<li>有众多编程语言的实现，以及应用的相关扩展；</li>
<li>在 GitHub 等网站中有很好的应用；</li>
<li>很容易转换为 HTML 文档或其他格式。</li>
</ul>
<h3 id="兼容-HTML"><a href="#兼容-HTML" class="headerlink" title="兼容 HTML"></a>兼容 HTML</h3><p>Markdown 完全兼容 HTML 语法，可以直接在 Markdown 文档中插入 HTML 内容。</p>
<h2 id="基础语法详解"><a href="#基础语法详解" class="headerlink" title="基础语法详解"></a>基础语法详解</h2><p>本文列述的语法是基于 John Gruber 定义的<a href="https://daringfireball.net/projects/markdown/syntax" target="_blank" rel="noopener external nofollow noreferrer">Markdown Syntax</a>，当然 Markdown 还有其他不同的编译解释语法，可以后续关注。在 Hexo 博客中解析语法不完全遵循此处的语法，但是本文列述的语法是基本语法，算是通用的，如果本地使用 MarkdownPad 编辑器，那么本文语法完全适用。</p>
<h3 id="段落与换行"><a href="#段落与换行" class="headerlink" title="段落与换行"></a>段落与换行</h3><ol>
<li>段落的前后必须是空行<br>空行指的是行内什么都没有，或者只有空白符（空格或制表符），相邻两行文本，如果中间没有空行 会显示在一行中（换行符被转换为空格）。</li>
<li>段落内换行（<code>&lt;br&gt;</code>）<br>可以在前一行的末尾加入至少两个空格，然后换行写其它的文字。</li>
<li>Markdown 中的多数区块都需要在两个空行之间。</li>
</ol>
<h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>标题样式有两种：</p>
<ol>
<li>Setext 形式<br>这种形式只支持<code>H1</code>和<code>H2</code>的标题样式，即使用<code>=</code>和<code>-</code>分别表示标题1和标题2，符号数量没有限制，原则以文本看起来舒服为主，使用如下:<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">H1</span><br><span class="line">====</span><br><span class="line"></span><br><span class="line">H2</span><br><span class="line">----</span><br></pre></td></tr></table></figure></li>
<li>atx 形式<br>这种方式更为常用，即使用<code>#</code>的数量对标题进行表示，数量的多少即代表标题的样式，如<code>#</code>表示标题1，<code>##</code>表示标题2，使用方式有两种种，可任选使用：<br>1）使用对称的 <code>#</code> 括住标题文本，如<code>## Title ##</code>；<br>2）只在标题文本左侧使用<code>#</code>，如<code>## Tile</code>。</li>
</ol>
<p><strong>注意</strong><br>标题符号左侧不能出现空格，但空格可以在标题文本中使用。</p>
<h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>要在文章中显示引用内容，可以在开头使用<code>&gt;</code>，则之后的文本都将被标记为引用，引用的方式如下：</p>
<ol>
<li>单行引用<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="quote">&gt; 引用内容</span></span><br></pre></td></tr></table></figure></li>
<li>多行引用<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&gt;多行引用</span><br><span class="line">&gt;可以在每行前加 <span class="code">`&gt;`</span></span><br><span class="line"></span><br><span class="line">&gt;如果仅在第一行使用 <span class="code">`&gt;`</span></span><br><span class="line">后面相邻的行即使省略 <span class="code">`&gt;`</span>，也会变成引用内容</span><br><span class="line"></span><br><span class="line">&gt;如果引用内容需要换行，  </span><br><span class="line">&gt;可以在行尾添加两个空格</span><br><span class="line">&gt;</span><br><span class="line">&gt;或者在引用内容中加一个空行</span><br></pre></td></tr></table></figure></li>
<li>嵌套引用<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&gt;也可以在引用中</span><br><span class="line">&gt;&gt;使用嵌套的引用</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>列表分为三种，分别是无序列表，有序列表和嵌套的列表。无序和有序的区别即列表显示内容前的符号是否是数字，嵌套列表即多种列表嵌套使用。列表具体使用如下:</p>
<ol>
<li>无序列表<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">* </span>可以使用 <span class="code">`*`</span> 作为标记，文本需要间隔一个空格后输入；</span><br><span class="line"><span class="bullet">+ </span>也可以使用 <span class="code">`+`</span>；</span><br><span class="line"><span class="bullet">- </span>或者 <span class="code">`-`</span>。</span><br></pre></td></tr></table></figure></li>
<li>有序列表<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1. </span>有序列表以数字和 . 开始，同时 . 与文本内容之间同样需要一个空格；</span><br><span class="line"><span class="bullet">3. </span>数字的序列并不会影响生成的列表序列；</span><br><span class="line"><span class="bullet">4. </span>但仍然推荐按照自然顺序（1.2.3...）编写。</span><br></pre></td></tr></table></figure></li>
<li>嵌套列表<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1. </span>第一层</span><br><span class="line"><span class="bullet">  + </span>1-1</span><br><span class="line"><span class="bullet">  + </span>1-2</span><br><span class="line"><span class="bullet">2. </span>无序列表和有序列表可以随意相互嵌套</span><br><span class="line"><span class="bullet">  1. </span>2-1</span><br><span class="line"><span class="bullet">  2. </span>2-2</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>在技术博客中，代码往往缺少不了，因为代码示例是最直接的展示，代码的表示主要有两种：</p>
<ol>
<li>代码块<br>使用缩进表示代码区域，代码块前后需要有至少一个空行，且每行代码前需要有至少一个 Tab 或四个空格；<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span> // Tab开头</span><br><span class="line"><span class="code">    &lt;title&gt;Markdown&lt;/title&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span> // 四个空格开头</span><br></pre></td></tr></table></figure>
代码区域也可以使用连续三个`即 ``` 来表示起止位置，即代码块的起始和结束位置，格式具体如下：</li>
</ol>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">` key</span></span><br><span class="line"><span class="string"> 代码段</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>行内代码<br>在文本之间插入代码，当只需要展示少量变量或代码可以使用这种方式。通过单个 ` 在代码内容前后表示起止，插入行内代码（ 该符号即英文输入法下数字 1 键左侧的那个按键）。</li>
<li>代码高亮<sup id="fnref:8"><a href="#fn:8" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[MarkDown支持高亮的语言](https://blog.csdn.net/u012102104/article/details/78950290)">[8]</span></a></sup><br>为了让代码部分看起来更加美观和符合语法高亮，markdown中有对应的语言标记，通过对代码块中的 <code>key</code> 进行标记替换便能实现高亮效果。参照表格如下：</li>
</ol>
<table>
<thead>
<tr>
<th>language</th>
<th align="center">key</th>
<th>language</th>
<th align="center">key</th>
</tr>
</thead>
<tbody><tr>
<td>1C</td>
<td align="center">1c</td>
<td>ActionScript</td>
<td align="center">actionscript</td>
</tr>
<tr>
<td>Apache</td>
<td align="center">apache</td>
<td>AppleScript</td>
<td align="center">applescript</td>
</tr>
<tr>
<td>AsciiDoc</td>
<td align="center">asciidoc</td>
<td>AspectJ</td>
<td align="center">asciidoc</td>
</tr>
<tr>
<td>AutoHotkey</td>
<td align="center">autohotkey</td>
<td>AVR Assembler</td>
<td align="center">avrasm</td>
</tr>
<tr>
<td>Axapta</td>
<td align="center">axapta</td>
<td>Bash</td>
<td align="center">bash</td>
</tr>
<tr>
<td>BrainFuck</td>
<td align="center">brainfuck</td>
<td></td>
<td align="center"></td>
</tr>
<tr>
<td>Cap’n Proto</td>
<td align="center">capnproto</td>
<td>Clojure REPL</td>
<td align="center">clojure</td>
</tr>
<tr>
<td>Clojure</td>
<td align="center">clojure</td>
<td>CMake</td>
<td align="center">cmake</td>
</tr>
<tr>
<td>CoffeeScript</td>
<td align="center">coffeescript</td>
<td>C++</td>
<td align="center">cpp</td>
</tr>
<tr>
<td>C#</td>
<td align="center">cs</td>
<td>CSS</td>
<td align="center">css</td>
</tr>
<tr>
<td>D</td>
<td align="center">d</td>
<td>Dart</td>
<td align="center">d</td>
</tr>
<tr>
<td>Delphi</td>
<td align="center">delphi</td>
<td>Diff</td>
<td align="center">diff</td>
</tr>
<tr>
<td>Django</td>
<td align="center">django</td>
<td>DOS.bat</td>
<td align="center">dos</td>
</tr>
<tr>
<td>Dust</td>
<td align="center">dust</td>
<td>Elixir</td>
<td align="center">elixir</td>
</tr>
<tr>
<td>ERB(Embedded Ruby)</td>
<td align="center">erb</td>
<td>Erlang REPL</td>
<td align="center">erlang-repl</td>
</tr>
<tr>
<td>Erlang</td>
<td align="center">erlang</td>
<td>FIX</td>
<td align="center">fix</td>
</tr>
<tr>
<td>F#</td>
<td align="center">fsharp</td>
<td>G-code(ISO 6983)</td>
<td align="center">gcode</td>
</tr>
<tr>
<td>Gherkin</td>
<td align="center">gherkin</td>
<td>GLSL</td>
<td align="center">glsl</td>
</tr>
<tr>
<td>Go</td>
<td align="center">go</td>
<td>Gradle</td>
<td align="center">gradle</td>
</tr>
<tr>
<td>Groovy</td>
<td align="center">groovy</td>
<td>Haml</td>
<td align="center">haml</td>
</tr>
<tr>
<td>Handlebars</td>
<td align="center">handlebars</td>
<td>Haskell</td>
<td align="center">haskell</td>
</tr>
<tr>
<td>Haxe</td>
<td align="center">haxe</td>
<td>HTML</td>
<td align="center">html</td>
</tr>
<tr>
<td>HTTP</td>
<td align="center">http</td>
<td>Ini file</td>
<td align="center">ini</td>
</tr>
<tr>
<td>Java</td>
<td align="center">java</td>
<td>JavaScript</td>
<td align="center">javascript</td>
</tr>
<tr>
<td>JSON</td>
<td align="center">json</td>
<td>Lasso</td>
<td align="center">lasso</td>
</tr>
<tr>
<td>Less</td>
<td align="center">less</td>
<td>Lisp</td>
<td align="center">lisp</td>
</tr>
<tr>
<td>LiveCode</td>
<td align="center">livecodeserver</td>
<td>LiveScript</td>
<td align="center">livescript</td>
</tr>
<tr>
<td>Lua</td>
<td align="center">lua</td>
<td>Makefile</td>
<td align="center">makefile</td>
</tr>
<tr>
<td>Markdown</td>
<td align="center">markdown</td>
<td>Mathematica</td>
<td align="center">mathematica</td>
</tr>
<tr>
<td>Matlab</td>
<td align="center">matlab</td>
<td>MEL (Maya Embedded Language)</td>
<td align="center">mel</td>
</tr>
<tr>
<td>Mercury</td>
<td align="center">mercury</td>
<td>Mizar</td>
<td align="center">mizar</td>
</tr>
<tr>
<td>Monkey</td>
<td align="center">monkey</td>
<td>Nginx</td>
<td align="center">nginx</td>
</tr>
<tr>
<td>Nimrod</td>
<td align="center">nimrod</td>
<td>Nix</td>
<td align="center">nix</td>
</tr>
<tr>
<td>NSIS</td>
<td align="center">nsis</td>
<td>Objective C</td>
<td align="center">objectivec</td>
</tr>
<tr>
<td>OCaml</td>
<td align="center">ocaml</td>
<td>Oxygene</td>
<td align="center">oxygene</td>
</tr>
<tr>
<td>Parser 3</td>
<td align="center">parser3</td>
<td>Perl</td>
<td align="center">perl</td>
</tr>
<tr>
<td>PHP</td>
<td align="center">php</td>
<td>PowerShell</td>
<td align="center">powershell</td>
</tr>
<tr>
<td>Processing</td>
<td align="center">processing</td>
<td>Python’s profiler output</td>
<td align="center">profile</td>
</tr>
<tr>
<td>Protocol Buffers</td>
<td align="center">protobuf</td>
<td>Puppet</td>
<td align="center">puppet</td>
</tr>
<tr>
<td>Python</td>
<td align="center">python</td>
<td>Q</td>
<td align="center">q</td>
</tr>
<tr>
<td>R</td>
<td align="center">r</td>
<td>RenderMan RIB</td>
<td align="center">rib</td>
</tr>
<tr>
<td>Roboconf</td>
<td align="center">roboconf</td>
<td>RenderMan RSL</td>
<td align="center">rsl</td>
</tr>
<tr>
<td>Ruby</td>
<td align="center">ruby</td>
<td>Oracle Rules Language</td>
<td align="center">ruleslanguage</td>
</tr>
<tr>
<td>Rust</td>
<td align="center">rust</td>
<td>Scala</td>
<td align="center">scala</td>
</tr>
<tr>
<td>Scheme</td>
<td align="center">scheme</td>
<td>Scilab</td>
<td align="center">scilab</td>
</tr>
<tr>
<td>SCSS</td>
<td align="center">scss</td>
<td>Smali</td>
<td align="center">smali</td>
</tr>
<tr>
<td>SmallTalk</td>
<td align="center">smalltalk</td>
<td>SML</td>
<td align="center">sml</td>
</tr>
<tr>
<td>SQL</td>
<td align="center">sql</td>
<td>Stata</td>
<td align="center">stata</td>
</tr>
<tr>
<td>STEP Part21(ISO 10303-21)</td>
<td align="center">step21</td>
<td>Stylus</td>
<td align="center">stylus</td>
</tr>
<tr>
<td>Swift</td>
<td align="center">swift</td>
<td>Tcl</td>
<td align="center">tcl</td>
</tr>
<tr>
<td>Tex</td>
<td align="center">tex</td>
<td>text</td>
<td align="center">text/plain</td>
</tr>
<tr>
<td>Thrift</td>
<td align="center">thrift</td>
<td>Twig</td>
<td align="center">twig</td>
</tr>
<tr>
<td>TypeScript</td>
<td align="center">typescript</td>
<td>Vala</td>
<td align="center">vala</td>
</tr>
<tr>
<td>VB.NET</td>
<td align="center">vbnet</td>
<td>VBScript in HTML</td>
<td align="center">vbscript-html</td>
</tr>
<tr>
<td>VBScript</td>
<td align="center">vbscript</td>
<td>Verilog</td>
<td align="center">verilog</td>
</tr>
<tr>
<td>VHDL</td>
<td align="center">vhdl</td>
<td>Vim Script</td>
<td align="center">vim</td>
</tr>
<tr>
<td>Intel x86 Assembly</td>
<td align="center">x86asm</td>
<td>XL</td>
<td align="center">xl</td>
</tr>
<tr>
<td>XML</td>
<td align="center">xml</td>
<td>YAML</td>
<td align="center">yml</td>
</tr>
</tbody></table>
<h3 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h3><p>在一行中使用三个或更多的<code>*</code>、<code>-</code>或<code>_</code>表示分隔线，字符间可以存在空格但是不能存在其他字符，使用如下：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="emphasis">***</span></span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<h3 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h3><p>在攥写文档中对文本加上超链接，当阅读到相应内容想直接访问时可以点击文件即跳转访问。超链接的表示有三种方式：</p>
<ol>
<li>行内式<br>这是最常见的一种使用超链接的方式，使用格式为<code>[link text](URL)</code>，其中 URL 可以是网络链接也可以是本地链接。</li>
<li>参考式<br>参考式链接的写法相当于行内式拆分成两部分，并通过一个 <em>识别符</em> 来连接两部分。参考式能尽量保持文章结构的简单，也方便统一管理 URL。这种方式表示如下:<br>1）定义链接,<code>[link text][识别符]</code>，识别符可以是字母、数字、空白或标点符号，识别符不区分大小写；<br>2）定义链接内容，<code>[识别符]: URL &quot;title&quot;</code>，URL可以使用 <code>&lt;&gt;</code> 包括起来，title 可以使用 “”、’’、() 包括；<br>3）省略识别符也可以表示，定义链接及内容为<code>[link text][]</code>，<code>[link text]: URL &quot;title&quot;</code>。</li>
<li>自动链接<br>使用<code>&lt;&gt;</code>包括的URL或邮箱地址会被自动转换为超链接。</li>
</ol>
<h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>在文档中插入图片的方式与插入超链接的方式基本一致，语法的差异在于插入图片需要在最前面加一个感叹号<code>!</code>，插入图片方式如下：</p>
<ol>
<li>行内式<br>插入图片格式为<code>![pic text](URL &quot;title&quot;)</code>，方括号中的部分是图片的替代文本，括号中的 ‘title’ 部分和超链接一样，是可选的。</li>
<li>参考式<br>参考式插入图片格式为<code>![pic text][识别符]</code>，<code>[识别符]: URL &quot;title&quot;</code>。</li>
<li>指定图片显示大小<br>在 Markdown 中对图片大小及位置进行设置需要使用 HTML 语法，使用<code>&lt;img /&gt;</code>标签属性设定图片大小，示例如下：<br><code>&lt;img src=&quot;URL&quot; alt=&quot;Alt&quot; title=&quot;Tiltle&quot; width=&quot;50&quot; height=&quot;50&quot; /&gt;</code></li>
</ol>
<h3 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h3><p>通过不同文本样式对特殊的文本内容进行强调，这里讲述斜体和加粗的使用。</p>
<ol>
<li>斜体，使用<code>*</code>成对表示，将需要斜体展示的文本放置在成对的<code>*</code>之间；</li>
<li>加粗，使用<code>**</code>成对表示，将需要加粗展示的文本放置在成对的<code>**</code>之间。</li>
</ol>
<p>上述的符号也可以使用<code>_</code>替换<code>*</code>。</p>
<h3 id="字符转义"><a href="#字符转义" class="headerlink" title="字符转义"></a>字符转义</h3><p>在 Markdown 中存在一些特殊字符，如前述的插入代码、斜体等，要正常显示字符且使其不表达特殊作用则需要对其进行转义。反斜线（<code>\</code>）用于插入在 Markdown 语法中有特殊作用的字符。</p>
<h2 id="扩展语法"><a href="#扩展语法" class="headerlink" title="扩展语法"></a>扩展语法</h2><h3 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h3><p>删除线一般很少用，当旧文档的内容存在失效时，为了显示新旧的差异，可以在失效内容上显示删除线，表示该内容已经不适用。<br>删除线使用即加上波浪线，表示为<code>~~失效内容~~</code>，效果为：<del>失效内容</del>。</p>
<h3 id="代码块和语法高亮"><a href="#代码块和语法高亮" class="headerlink" title="代码块和语法高亮"></a>代码块和语法高亮</h3><p>根据前述介绍的插入代码块方法可以插入代码，但是要使文档代码更美观，使不同语言的代码能够显示对应语法高亮。此时需要使用 ``` 作为代码块区域标识，在起始的 ``` 之后的<code>key</code>写上代码块对应的程序语言名称，如代码为 Javascript ，起始位置则写为：</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">` javascript</span></span><br><span class="line"><span class="string">code</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span></span><br></pre></td></tr></table></figure>

<h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p>表格可以用于展示多种比较的内容项，而表格的展示主要包括表头和单元格，使用<code>|</code>进行单元格分隔，使用<code>-</code>分隔表头和其他行，三行两列的表格表示如下：</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">name <span class="string">| age</span></span><br><span class="line">---- <span class="string">| ---</span></span><br><span class="line">LearnShare <span class="string">| 12</span></span><br><span class="line">Mike <span class="string">|  32</span></span><br></pre></td></tr></table></figure>

<p>要使表格内容对齐，可以在第二行的分界处使用下述标记内容进行对齐：</p>
<ul>
<li><code>:---</code> 代表左对齐</li>
<li><code>:--:</code> 代表居中对齐</li>
<li><code>---:</code> 代表右对齐</li>
</ul>
<p><strong>注意</strong><br>在Hexo博客中加入表格时需要注意先空行，否则在解析时会出现错误，表格无法显示，同时也可以使用 HTML 语法进行表格添加，表格美化可参照<sup id="fnref:3"><a href="#fn:3" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Hexo下表格的美化和优化](https://hexo.imydl.tech/archives/6742.html)
">[3]</span></a></sup>。</p>
<h3 id="ToDo列表"><a href="#ToDo列表" class="headerlink" title="ToDo列表"></a>ToDo列表</h3><p>ToDo列表也是 Task List，展示待做的事情。使用如下:</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">- </span>[ ] Eat</span><br><span class="line"><span class="bullet">- </span>[x] Code</span><br><span class="line"><span class="bullet"> - </span>[x] HTML</span><br><span class="line"><span class="bullet"> - </span>[x] CSS</span><br><span class="line"><span class="bullet"> - </span>[x] JavaScript</span><br><span class="line"><span class="bullet">- </span>[ ] Sleep</span><br></pre></td></tr></table></figure>

<h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><p>给攥写的文章加上目录内容，在文中需要显示文章目录结构的位置，独立一行写上<code>[TOC]</code>。</p>
<h3 id="插入Emoji表情"><a href="#插入Emoji表情" class="headerlink" title="插入Emoji表情"></a>插入Emoji表情</h3><p>插入 Emoji 表情主要是在 GitHub 和博客中可能会用到，这里介绍三种方式如下，来源参照<sup id="fnref:4"><a href="#fn:4" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[在博客中插入emoji表情](https://blog.csdn.net/u014636245/article/details/82945997)
">[4]</span></a></sup>。</p>
<ol>
<li>图片格式<br>使用 HTML 的图片标签<code>&lt;img&gt;</code>插入图像，此方法需要知道 Emoji 表情的链接地址，使用效果如下：<img src="https://www.webpagefx.com/tools/emoji-cheat-sheet/graphics/emojis/octocat.png" height="40" width="40" align="middle">

</li>
</ol>
<blockquote>
<p>推荐 Emoji 源：</p>
</blockquote>
<ul>
<li>GitHub / GitHub_Icon：<a href="https://blog.codecarrot.net/markdown-emoji-markup/" target="_blank" rel="noopener external nofollow noreferrer">github markdown emoji markup</a></li>
<li>iemoji：<a href="https://www.iemoji.com/" target="_blank" rel="noopener external nofollow noreferrer">iEmoji</a></li>
<li>webpagefx：<a href="https://www.webfx.com/tools/emoji-cheat-sheet/" target="_blank" rel="noopener external nofollow noreferrer">WebFX EMOJI CHEAT SHEET</a></li>
</ul>
<ol start="2">
<li>源码粘贴<br>这种方式较为推荐，因为 Markdown 兼容 HTML 语法，因此 HTML 支持复制粘贴 Emoji 表情也可以直接在 Markdown 中使用。这里推荐<a href="https://emojipedia.org/" target="_blank" rel="noopener external nofollow noreferrer">emojipedia</a>和<a href="https://www.emojicopy.com/" target="_blank" rel="noopener external nofollow noreferrer">emojicopy</a>，可以搜索所需的表情然后点击<code>copy</code>即可直接粘贴到文中相应位置。</li>
<li>Unicode编码<br>Emoji表情在 Unicode 标准编码中已经集成，直接使用 Unicode 编码也能表示 Emoji 表情。在<a href="http://unicode.org/emoji/charts/full-emoji-list.html" target="_blank" rel="noopener external nofollow noreferrer">Emoji Charts</a>可查找每个 Emoji 表情的 Unicode 编码。</li>
</ol>
<h2 id="博客写作"><a href="#博客写作" class="headerlink" title="博客写作"></a>博客写作</h2><p>在了解上述 Markdown 语法之后，基本能完成博客的撰写，这里介绍一些博客撰写的注意地方。博客的维护中重要的一项即博客文章，而文章有时候不一定能一次性写完，但是又不希望未写完就发布到博客中，也不希望一直存放在博客文件目录外，此时便可以使用<code>草稿 draft</code>进行存放未完成的文章。博客写作并不是简单写完一篇文章发布就结束，一篇优质博文需要细心和耐心，对于需要注意的地方本文会进行记录分享。参照来源<sup id="fnref:6"><a href="#fn:6" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Hexo 博客 github.io MD](https://baiqiantao.github.io/%E5%85%B6%E4%BB%96/%E5%B7%A5%E5%85%B7/RraEBz/#%E8%B5%84%E6%BA%90%E6%96%87%E4%BB%B6%E5%A4%B9-asset)
">[6]</span></a></sup>。</p>
<h3 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h3><p>创建文章有两种方式，一种是在<code>git bash</code>下生成即<code>hexo new [layout] &lt;title&gt;</code>，一种是手动新建即在文章目录文件夹中手动建立。</p>
<h3 id="布局（layout）"><a href="#布局（layout）" class="headerlink" title="布局（layout）"></a>布局（layout）</h3><p>在 Hexo 中有三种默认布局即<code>post</code>、<code>page</code>和<code>draft</code>，若不希望文章被 Hexo 布局渲染，可以在文章的 Front-Matter 中设置<code>layout: false</code>。</p>
<h3 id="草稿（draft）"><a href="#草稿（draft）" class="headerlink" title="草稿（draft）"></a>草稿（draft）</h3><p>草稿创建后一般存放在<code>../hexo/source/_drafts</code>目录下，草稿默认不会发布到博客中显示。</p>
<h3 id="Front-Matter"><a href="#Front-Matter" class="headerlink" title="Front Matter"></a>Front Matter</h3><p>Front-Matter 即文章中最上面的设置区，以<code>---</code>作为分隔，更多可参照<sup id="fnref:7"><a href="#fn:7" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Front Matter](https://jekyllrb.com/docs/front-matter/)
">[7]</span></a></sup>，默认的参数如下：</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th align="center">描述</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>layout</td>
<td align="center">布局</td>
<td></td>
</tr>
<tr>
<td>title</td>
<td align="center">标题</td>
<td></td>
</tr>
<tr>
<td>date</td>
<td align="center">建立日期</td>
<td>文件创建时间</td>
</tr>
<tr>
<td>updated</td>
<td align="center">更新日期</td>
<td>文件更新日期</td>
</tr>
<tr>
<td>comments</td>
<td align="center">开启文章评论</td>
<td>true</td>
</tr>
<tr>
<td>tags</td>
<td align="center">标签</td>
<td></td>
</tr>
<tr>
<td>categories</td>
<td align="center">分类</td>
<td></td>
</tr>
</tbody></table>
<h3 id="模板（scaffolds）"><a href="#模板（scaffolds）" class="headerlink" title="模板（scaffolds）"></a>模板（scaffolds）</h3><p>此处为 Hexo 对文章建立时采用的模板，可以在新建文章时选择模板，如<code>hexo new scaffold_1 &quot;file&quot;</code>则会根据自定义的模板<code>../scaffolds/scaffold_1.md</code>对新建的文章按照相同的样式进行初始化。</p>
<h3 id="分类及标签"><a href="#分类及标签" class="headerlink" title="分类及标签"></a>分类及标签</h3><p>在 Front-Matter 中对文章的参数<code>分类-categories</code>和<code>标签-tags</code>进行设置，具体可参照前述<code>Front Matter</code>一节。这里要说明的是，对标签和分类进行设置有两种方式：</p>
<ol>
<li>类似无序表格的方式即使用<code>-</code>进行表示，如:<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">tags:</span><br><span class="line"><span class="bullet">- </span>tag_1</span><br></pre></td></tr></table></figure></li>
<li>使用中括号表示多个标签或分类，如：<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">tags: [tag<span class="emphasis">_1, tag_</span>2]</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>这篇博文基本介绍了 Markdown 和博客撰写的基本内容，看完这些内容能够实现自己博客的博文撰写，同时能规范写作语法并使内容排版整洁美观，后续进阶语法可以继续阅读相关阅读推荐篇章。</p>
<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://hexo.io/zh-cn/docs/writing.html" target="_blank" rel="noopener external nofollow noreferrer">Hexo写作</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="http://xianbai.me/learn-md/index.html" target="_blank" rel="noopener external nofollow noreferrer">Learning-Markdown</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://hexo.imydl.tech/archives/6742.html" target="_blank" rel="noopener external nofollow noreferrer">Hexo下表格的美化和优化</a><a href="#fnref:3" rev="footnote"> ↩</a></span></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">4.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://blog.csdn.net/u014636245/article/details/82945997" target="_blank" rel="noopener external nofollow noreferrer">在博客中插入emoji表情</a><a href="#fnref:4" rev="footnote"> ↩</a></span></li><li id="fn:5"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">5.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://einverne.github.io/markdown-style-guide/zh.html#code-blocks" target="_blank" rel="noopener external nofollow noreferrer">Markdown 书写风格指南</a><a href="#fnref:5" rev="footnote"> ↩</a></span></li><li id="fn:6"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">6.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://baiqiantao.github.io/%E5%85%B6%E4%BB%96/%E5%B7%A5%E5%85%B7/RraEBz/#%E8%B5%84%E6%BA%90%E6%96%87%E4%BB%B6%E5%A4%B9-asset" target="_blank" rel="noopener external nofollow noreferrer">Hexo 博客 github.io MD</a><a href="#fnref:6" rev="footnote"> ↩</a></span></li><li id="fn:7"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">7.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://jekyllrb.com/docs/front-matter/" target="_blank" rel="noopener external nofollow noreferrer">Front Matter</a><a href="#fnref:7" rev="footnote"> ↩</a></span></li><li id="fn:8"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">8.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://blog.csdn.net/u012102104/article/details/78950290" target="_blank" rel="noopener external nofollow noreferrer">MarkDown支持高亮的语言</a><a href="#fnref:8" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>技术分享</category>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>写作</tag>
      </tags>
  </entry>
  <entry>
    <title>个人信息隐私保护的法律及技术双重角度思考</title>
    <url>/Blog/2020/02/12/%E4%B8%AA%E4%BA%BA%E4%BF%A1%E6%81%AF%E9%9A%90%E7%A7%81%E4%BF%9D%E6%8A%A4%E7%9A%84%E6%B3%95%E5%BE%8B%E5%8F%8A%E6%8A%80%E6%9C%AF%E5%8F%8C%E9%87%8D%E8%A7%92%E5%BA%A6%E6%80%9D%E8%80%83.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\Blog\assets\css\APlayer.min.css"><script src="\Blog\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\Blog\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>在新型网络环境下，中国在个人信息隐私保护方面愈发重视，本文从法律和技术两方面介绍了相关情况，并通过案例简析及借鉴国外相关法律，提出在现有法律基础上健全个人信息隐私保护范围、判定依据、明确权利内涵等建议，并建议结合区块链和云计算取证等新兴技术为个人信息隐私保护提供技术支持。</p>
<a id="more"></a>

<h2 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h2><p>&emsp;&emsp;中国互联网信息中心在2019年2月发布的第43次《中国互联网络发展状况统计报告》显示，截至2018年12月，中国网民规模达到8.29亿，全年新增网民5653万，互联网普及率达到59.6%，手机网民规模达到8.17亿，新增手机网民6433万，网民中手机使用比例达到98.6%。从数据中可知，中国已然是互联网大国，每天各类移动端APP、各类网络应用服务访问数量多不胜数，加之云计算、区块链、大数据等互联网新型技术的兴起和盛行，大数据物联网时代成为当下新型互联网时代的代名词。<br>&emsp;&emsp;处于新型互联网时代下的生活看似愈加便利快捷，但是百度CEO李彦宏在2018年3月26日的中国发展高层论坛中的一句话却引人深思，他说：“中国人对隐私问题的态度更开放，也相对来说没那么敏感。如果他们可以用隐私换取便利、安全或者效率。在很多情况下，他们就愿意这么做。当然我们也要遵循一些原则，如果这个数据能让用户受益，他们又愿意给我们用，我们就会去使用它的。我想这就是我们能做什么和不能做什么的基本标准。”新型互联网时代下，数据对于企业发展的重要性不言而喻，同样的，数据安全对于个人而言也尤为重要，尤其是涉及个人隐私等重要信息。每个人都希望社会生活更加便捷高效，但是并不意味着可以无条件牺牲个人信息，而应在有较好个人信息保障环境下，由个人自主选择提供个人信息的情景下，由互联网提供生活的便捷。<br>&emsp;&emsp;然而，当下中国的互联网环境，无论是法律体系制度、企业的自觉度、个人的保护意识，还是信息保护技术的发展，都尚未达到令人满意的程度，中国网络个人信息保护无论在法制还是技术上都任重道远。本文通过研究新型网络环境下的中国已有隐私保护法律现状及技术发展状况，对如何更好地实施个人信息隐私保护，从法律健全和技术支持两方面提出思考和建议。</p>
<h2 id="法律层面的分析及建议"><a href="#法律层面的分析及建议" class="headerlink" title="法律层面的分析及建议"></a>法律层面的分析及建议</h2><p>&emsp;&emsp;关于个人信息保护，不同行业机构都存在零散的规定条款<sup id="fnref:5"><a href="#fn:5" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="齐爱民,张哲.识别与再识别：个人信息的概念界定与立法选择[J].重庆大学学报,2018,24(2):119-131
">[5]</span></a></sup><sup id="fnref:6"><a href="#fn:6" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="韩旭至.个人信息概念的法教义学分析[J].重庆大学学报,2018,24(2):154-165
">[6]</span></a></sup>，而在全国范围实行的法律条文有主要如下：</p>
<ul>
<li>《电信和互联网用户个人信息保护规定》的第四条和第九条，列举了在电信和互联网服务提供中对个人信息的定义和保护规定；</li>
<li>《网络安全法》中四十四条、四十五条和七十六条，对收集个人信息的合法性和保护规定进行明确；</li>
<li>《民法总则》第一百一十条和第一百一十一条，规定了隐私权以及个人信息受法律保护；</li>
<li>《侵权责任法》第二条，明确规定隐私权是公民的基本权利；</li>
<li>《关于加强网络信息保护的决定》第一条，指出公民个人信息受国家和法律保护。<br>&emsp;&emsp;总体而言，我国法律体系中尽管有涉及个人信息保护的相关规定，但是没有针对个人信息保护的专门法律及相应实施细则。在个人信息保护法律体系还未健全的情况下，国家互联网应急响应中心在2019年4月发布《2018年我国互联网网络安全态势综述》显示，个人用户信息包括姓名、身份证、个人资产、银行账户、地址等隐私遭到窃取的人数多达150万，移动应用APP在高权限下获取用户信息，假冒 “热点”APP等诱骗用户下载并提供个人信息等，都使得用户隐私信息遭到泄露。2018年圆通快递公司外泄约10亿用户信息，华住酒店集团泄露约5亿用户信息，万豪酒店泄露约5亿用户信息，顺丰速运泄露约3亿用户信息，这些只是影响较大而被披露才为人所知，实际上被泄露的个人用户信息可能还有更多。而作为用户个人，并不知道自己的信息何时被收集、何时被用于何事，除企业机构未能较好地保障用户信息原因外，无明确的可落地的实施细则也是重要因素。<br>&emsp;&emsp;此外，互联网环境本身是一个匿名化网络环境，尽管不像暗网、深网等对网络内容实施高度匿名化，但是也并非真实世界环境，由此也引发了如网络暴力、虚假消息传播、不良信息传播等负面影响事件。对此，国家通过网络实名制的方式，希望改善网络环境并为更有力的监管提供条件<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="李丽.秩序还是自由[J].法制与社会,2009.8,23:103-104
">[1]</span></a></sup>。<br>&emsp;&emsp;面对当下的网络环境因素，个人信息与隐私是否已经具备良好的保障机制？当前的法律体系对个人信息保护还需要哪方面的完善和细化？在新型网络环境下大数据的应用是否也能由新型技术进行保护数据的隐私属性不被利用？实施全面网络实名制是否可行？面对多种多样的新技术应用场景如何保障个人信息的安全性？这些疑问或许在很多人心中都存在，但如何消除疑问，如何解决困惑，是摆在立法执法部门面前亟待应对和解决的问题。<br>&emsp;&emsp;国外在个人信息保护立法方面，或多或少走在了中国前面，不少国家或组织已发布了相关法律和条例，例如《个人信息保护法》、《通用数据保护条例》、《个人数据法案》、《消费者隐私权利保护法案》等，为个人信息保护提供法理依据。<br>&emsp;&emsp;直接照搬国外的个人信息保护法律条例显然不适用于中国特色社会主义环境，中国并没有像美国一样的自身重视个人隐私的历史文化和像德国一样的法制土壤<sup id="fnref:12"><a href="#fn:12" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="靳海婷.美、德个人信息宪法保护路径比较与启示[J].重庆邮电大学学报,2018,30(4):46-55
">[12]</span></a></sup>。但我认为，对于西方的隐私保护法律中对个人信息和隐私的保护范围、判定依据、新型权利等条文，中国是可以借鉴的。例如，个人信息需要保护的属性包含哪些？其个体性和公共性是否应该规定限制的范围，还是依据不同情景进行动态平衡其判定标准？被遗忘权是否应归属到个人信息保护的权利范围？这些是可以参考国外的法律法规，并依据中国自身的网络环境和个人信息保护情况，吸收并制定更为合适中国国情的法律条文。<br>&emsp;&emsp;而对于网络实名制<sup id="fnref:10"><a href="#fn:10" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="张欢,杨霖.身份映射关系：网络实名制的法理基础[J].山西高等学校社会科学学报,2009,21(4):97-104
">[10]</span></a></sup><sup id="fnref:15"><a href="#fn:15" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="陈远,邹晶.网络实名制——规范网络信息传播的必由之路[J].2009,1:66-69
">[15]</span></a></sup><sup id="fnref:16"><a href="#fn:16" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="周永坤.网络实名制立法评析[J].暨南学报,2013,2:1-8
">[16]</span></a></sup>，尽管中国已经出台相关政策法规逐步推行网络实名制，但对于完全网络实名制仍在观望。我认为网络实名制推行的初衷是好的，是为了促进网络环境更加健康，但是网络实名制需要考虑其推行程度，即权衡匿名化是否不能存在于未来网络之中。本人支持有限制的实名制的观点<sup id="fnref:14"><a href="#fn:14" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="路鹃.网络匿名表达权在司法实践中的冲突与平衡[J].西南政法大学学报,2018,20(6):110-118
">[14]</span></a></sup>。网络实名制也有其积极作用，但是网络匿名化并非一无是处。网络匿名化本身使得一部分人能够更为理性的发表言论而无需担心遭到恶意报复，这在人民监督政府工作以及举报不良行为上有着积极作用；而实名制对于利用匿名网络而随意发动网络暴力、散播不良信息的行为有着遏制作用。因此，建议在需要实名化监管的领域推行实名制，而对于容易泄露隐私信息的领域采取匿名化。当然，匿名化不意味着肆意而为，匿名表达也需要受到约束和限制<sup id="fnref:7"><a href="#fn:7" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="杨福忠.公民网络匿名表达权之宪法保护——兼论网络实名制的正当性[J].法商研究,2012,5:32-39
">[7]</span></a></sup>，对于违反约束的匿名表达可以依靠技术手段进行控制。<h2 id="技术层面的分析及建议"><a href="#技术层面的分析及建议" class="headerlink" title="技术层面的分析及建议"></a>技术层面的分析及建议</h2>&emsp;&emsp;在法律制度难以监管的领域，可以通过技术进行弥补，从技术应用层面保护个人信息隐私。密码算法的更新迭代、取证技术的升级、匿名技术的衍变等技术应用都为隐私保护提供了技术保障，并为应对愈加复杂和潜在未知安全威胁的网络提供了对抗技术。<br>&emsp;&emsp;以网络实名制推行为例，韩国是世界首个全面推行网络实名制的国家，但是推行进程在四五年之后便惨遭终结<sup id="fnref:8"><a href="#fn:8" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="康美丽,曹凯.韩国网络实名制对我国网络管理的借鉴意义研究[J].情报杂志,2010,29:62-66
">[8]</span></a></sup>。一个主要原因便是实名制之后的保障技术还不够牢固，黑客攻击数据库并贩卖个人实名数据，致使实名制弊端凸显。同时，在大数据时代下，数据挖掘与关联分析技术得到应用，这无疑增加了隐私保护的困难程度。针对此类问题，学者们提出了多种匿名模型和算法，包括k-匿名规则、l-多样性模型、t-接近模型等基于数据发布的隐私保护技术，以及包括用户分类的隐私保护数据挖掘算法、基于安全多方计算与随机干扰结合的算法等针对数据挖掘的数据扰动隐私保护技术。<br>&emsp;&emsp;但是，数据隐私保护技术也存在着难点亟待突破，如全同态加密方案难以高性能实现具体应用、差分隐私保护算法的时间复杂度较高、大数据的爆发式增长带来的原有保护算法的扩展性问题等，这些既是中国隐私保护所要面对和攻克的技术难关，也是世界性的难题。<h2 id="总述"><a href="#总述" class="headerlink" title="总述"></a>总述</h2>&emsp;&emsp;基于以上论述，我个人认为，随着时代发展，个人自我隐私保护意识逐渐增强，隐私保护法等相关法律的出台呼声日益增长，更为细化的个人信息保护法规必将成为中国法律体系中的一员。而需要重点考虑的是：执法机构如何监查企业单位是否存在违法利用个人信息行为，对于个人的隐私采集知情权的维护应该如何具体化，对现有的隐私协议问题如何解决，用户面对冗长且带有法学专业术语的协议信息难以捕捉关键信息的问题如何应对，等等。<br>&emsp;&emsp;我建议，可以通过业界规定条文的试行，明确企业采集、使用、处理个人信息及涉及隐私的规范化流程；通过中和企业和个人用户之间对隐私信息的理解差异性，减少潜在的违法收集个人信息的擦边球行为；通过简化提炼隐私协议中的关键信息，让用户能直观清晰的了解与自身信息相关的采集与使用条款；同时，对人工智能带来的新产业模式（如无人驾驶中需要采集大量的真实信息数据，其中也会包括对乘车人的拍照等）等特定领域或新型领域相关的隐私保护，是否能在法律中留有空间并适应时代的发展调整，进而仍能对隐私保护提供法理依据。<br>&emsp;&emsp;面对固有隐私保护技术的瓶颈，或许去中心化思想的区块链技术能起到革新作用<sup id="fnref:18"><a href="#fn:18" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="周亮瑾.基于区块链和分布式数据库的铁路旅客隐私保护技术研究[D].北京：中国铁道科学研究院,2018">[18]</span></a></sup>，通过区块链技术的防丢失、防篡改、可追溯、可扩展性强、成本低等特性，为隐私信息提供更为高效的保护技术方案未尝不可，同时结合云计算取证技术为预防信息的违法利用提供进一步技术保障<sup id="fnref:17"><a href="#fn:17" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="李维奉,羌卫中,李伟明,邹德清.云环境隐私侵犯取证研究[J].网络与信息安全学报,2018,1(4):26-35
">[17]</span></a></sup>。<br>&emsp;&emsp;最终要实现个人信息与隐私的保护效果，我相信这是需要个人、企业、法律标准、技术支持等因素互相融合实现的，要做到事前知情同意、事中风险评估、事后个案认定，相信隐私保护在未来健全的法律保障和成熟的技术支持下，能够为每个人带来更加安稳、便捷的物联网生活。</li>
</ul>
<h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p>&emsp;&emsp;国内法律条款中规定个人信息保护的条款：</p>
<ol>
<li>《电信和互联网用户个人信息保护规定》<br>第四条“本规定所称用户个人信息，是指电信业务经营者和互联网信息服务提供者在提供服务的过程中收集的用户姓名、出生日期、身份证件号码、住址、电话号码、账号和密码等能够单独或者与其他信息结合识别用户的信息以及用户使用服务的时间、地点等信息。”<br>第九条“未经用户同意，电信业务经营者、互联网信息服务提供者不得收集、使用用户个人信息。”</li>
<li>《网络安全法》<br>第四十四条“任何个人和组织不得窃取或者以其他非法方式获取个人信息，不得非法出售或者非法向他人提供个人信息。”<br>第四十五条“依法负有网络安全监督管理职责的部门及其工作人员，必须对在履行职责中知悉的个人信息、隐私和商业秘密严格保密，不得泄露、出售或者非法向他人提供。”<br>第七十六条“本法下列用语的含义：<br>（一）网络，是指由计算机或者其他信息终端及相关设备组成的按照一定的规则和程序对信息进行收集、存储、传输、交换、处理的系统。<br>（二）网络安全，是指通过采取必要措施，防范对网络的攻击、侵入、干扰、破坏和非法使用以及意外事故，使网络处于稳定可靠运行的状态，以及保障网络数据的完整性、保密性、可用性的能力。<br>（三）网络运营者，是指网络的所有者、管理者和网络服务提供者。<br>（四）网络数据，是指通过网络收集、存储、传输、处理和产生的各种电子数据。<br>（五）个人信息，是指以电子或者其他方式记录的能够单独或者与其他信息结合识别自然人个人身份的各种信息，包括但不限于自然人的姓名、出生日期、身份证件号码、个人生物识别信息、住址、电话号码等。”</li>
<li>《民法总则》<br>第一百一十条“自然人享有生命权、身体权、健康权、姓名权、肖像权、名誉权、荣誉权、隐私权、婚姻自主权等权利。法人、非法人组织享有名称权、名誉权、荣誉权等权利。”<br>第一百一十一条“自然人的个人信息受法律保护。任何组织和个人需要获取他人个人信息的，应当依法取得并确保信息安全，不得非法收集、使用、加工、传输他人个人信息，不得非法买卖、提供或者公开他人个人信息。”</li>
<li>《侵权责任法》<br>第二条“侵害民事权益，应当依照本法承担侵权责任。本法所称民事权益，包括生命权、健康权、姓名权、名誉权、荣誉权、肖像权、隐私权、婚姻自主权、监护权、所有权、用益物权、担保物权、著作权、专利权、商标专用权、发现权、股权、继承权等人身、财产权益。”</li>
<li>《关于加强网络信息保护的决定》<br>为了保护网络信息安全，保障公民、法人和其他组织的合法权益，维护国家安全和社会公共利益，特作如下决定：<br>一、国家保护能够识别公民个人身份和涉及公民个人隐私的电子信息。<br>任何组织和个人不得窃取或者以其他非法方式获取公民个人电子信息，不得出售或者非法向他人提供公民个人电子信息。</li>
</ol>
<h2 id="发表"><a href="#发表" class="headerlink" title="发表"></a>发表</h2><p>&emsp;&emsp;本篇文章已由「中国保密协会科学技术分会」协助发表于<a href="https://mp.weixin.qq.com/s?__biz=MzIxMzI4ODI1MA==&mid=100000019&idx=1&sn=1842ac2ecc36047801d7d3d2176b647b&scene=18&xtrack=1&key=7d42e6f9dbc0e89199c107e6a8c8f5daef5d81e8c6ebd110471080554fa8f4a74119648d55ae607f92bb29617201a312497c4a08755bb092f57b9d074083b1eae63dbe28fe79ac5c6e794feb93f0bc76&ascene=1&uin=MTU3NTM1MzgzNw%3D%3D&devicetype=Windows+10&version=62080079&lang=zh_CN&exportkey=Ay54GAGxN%2FwUbAOXLcBaCf0%3D&pass_ticket=YvQE42U%2F9qwq7gt7gS3Qa1XSSgUMMf%2FdiIcRyDgktSwwuPhLv1pTuH2y18iO1ReZ" target="_blank" rel="noopener external nofollow noreferrer">中国保密协会科学技术分会官微</a>，可在官微文章中查找。</p>
<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">李丽.秩序还是自由[J].法制与社会,2009.8,23:103-104<a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">陈兴蜀，杨露，罗永刚.大数据安全保护技术[J].工程科学与技术,2017.9,49(5):1-12<a href="#fnref:2" rev="footnote"> ↩</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">徐琦.大数据时代美国隐私保护之困[N].Feature特写,2013,17:40-44<a href="#fnref:3" rev="footnote"> ↩</a></span></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">4.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">张弘.大数据下个人信息保护研究[D].兰州:兰州大学法学院,2018<a href="#fnref:4" rev="footnote"> ↩</a></span></li><li id="fn:5"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">5.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">齐爱民,张哲.识别与再识别：个人信息的概念界定与立法选择[J].重庆大学学报,2018,24(2):119-131<a href="#fnref:5" rev="footnote"> ↩</a></span></li><li id="fn:6"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">6.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">韩旭至.个人信息概念的法教义学分析[J].重庆大学学报,2018,24(2):154-165<a href="#fnref:6" rev="footnote"> ↩</a></span></li><li id="fn:7"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">7.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">杨福忠.公民网络匿名表达权之宪法保护——兼论网络实名制的正当性[J].法商研究,2012,5:32-39<a href="#fnref:7" rev="footnote"> ↩</a></span></li><li id="fn:8"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">8.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">康美丽,曹凯.韩国网络实名制对我国网络管理的借鉴意义研究[J].情报杂志,2010,29:62-66<a href="#fnref:8" rev="footnote"> ↩</a></span></li><li id="fn:9"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">9.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">肖岳.后网络安全时代个人隐私保护难题[N].特别报道,2018-02<a href="#fnref:9" rev="footnote"> ↩</a></span></li><li id="fn:10"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">10.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">张欢,杨霖.身份映射关系：网络实名制的法理基础[J].山西高等学校社会科学学报,2009,21(4):97-104<a href="#fnref:10" rev="footnote"> ↩</a></span></li><li id="fn:11"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">11.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">董习雯.完善无人驾驶汽车权益保护对策的分析[J].民商探索<a href="#fnref:11" rev="footnote"> ↩</a></span></li><li id="fn:12"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">12.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">靳海婷.美、德个人信息宪法保护路径比较与启示[J].重庆邮电大学学报,2018,30(4):46-55<a href="#fnref:12" rev="footnote"> ↩</a></span></li><li id="fn:13"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">13.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">王利明.人工智能时代对民法学的新挑战[J].东方学报,2018,3:4-9<a href="#fnref:13" rev="footnote"> ↩</a></span></li><li id="fn:14"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">14.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">路鹃.网络匿名表达权在司法实践中的冲突与平衡[J].西南政法大学学报,2018,20(6):110-118<a href="#fnref:14" rev="footnote"> ↩</a></span></li><li id="fn:15"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">15.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">陈远,邹晶.网络实名制——规范网络信息传播的必由之路[J].2009,1:66-69<a href="#fnref:15" rev="footnote"> ↩</a></span></li><li id="fn:16"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">16.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">周永坤.网络实名制立法评析[J].暨南学报,2013,2:1-8<a href="#fnref:16" rev="footnote"> ↩</a></span></li><li id="fn:17"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">17.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">李维奉,羌卫中,李伟明,邹德清.云环境隐私侵犯取证研究[J].网络与信息安全学报,2018,1(4):26-35<a href="#fnref:17" rev="footnote"> ↩</a></span></li><li id="fn:18"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">18.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">周亮瑾.基于区块链和分布式数据库的铁路旅客隐私保护技术研究[D].北京：中国铁道科学研究院,2018<a href="#fnref:18" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>学术</category>
        <category>法律</category>
      </categories>
      <tags>
        <tag>网络安全法</tag>
        <tag>隐私保护</tag>
        <tag>法律与技术</tag>
        <tag>网络实名制</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客部署PWA</title>
    <url>/Blog/2020/02/09/Hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2PWA.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\Blog\assets\css\APlayer.min.css"><script src="\Blog\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\Blog\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>渐进式网络应用程序（Progressive Web Apps，PWA）是一种运用现代的 Web API 以及传统的渐进式增强策略创建的跨平台 Web 应用程序。这类应用程序应用广泛、功能丰富，结合现代化浏览器提供的功能和移动设备的体验优势，使其具有与原生应用相同的用户体验优势。<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[渐进式 Web 应用（PWA）|MDN web docs](https://developer.mozilla.org/zh-CN/docs/Web/Progressive_web_apps)
">[1]</span></a></sup></p>
<a id="more"></a>

<h2 id="PWA介绍"><a href="#PWA介绍" class="headerlink" title="PWA介绍"></a>PWA介绍</h2><p>当博客网站实现了 PWA 功能后，使用 Google Chrome 浏览器访问时，就会发现浏览器地址栏右侧有一个带圈的 ➕ 符号，并会提醒你安装此网页到桌面。如果你是用手机访问的话，Chrome 就会在页面的底部提醒你安装网站。<br>PWA的特点<sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[博客实现PWA](https://guanqr.com/study/blog/realize-pwa/)
">[2]</span></a></sup>：</p>
<ul>
<li>安装博客到电脑或手机，以原生应用相同的方式浏览博客；</li>
<li>博客浏览速度更快；</li>
<li>可以离线浏览博客；</li>
</ul>
<ol>
<li>对于读者，博客可一触即达，且无浏览器的地址栏、菜单栏等「无关」干扰；对于博客，非常有利于博客的用户留存率，也利于博客的品牌形象;</li>
<li>可以利用 Service Worker 的缓存特点，极大地加速你的博客;</li>
<li>能让你的博客更贴近 APP 的形象。</li>
</ol>
<p>PWA部署对博客具有不少要求，需要网站支持全站HTTPS、响应式布局等，具体可参见<a href="https://developers.google.com/web/progressive-web-apps/checklist" target="_blank" rel="noopener external nofollow noreferrer">Checklist</a>，同时可以在网站<a href="https://www.webpagetest.org/lighthouse" target="_blank" rel="noopener external nofollow noreferrer">Lighthouse</a>检查博客网站是否满足PWA的要求。<br><img src="/Blog/images/pwa-lighthouse.png" alt="Lighthouse检测结果"><i class="img-caption">☆ Lighthouse检测结果</i></p>
<h2 id="PWA插件部署"><a href="#PWA插件部署" class="headerlink" title="PWA插件部署"></a>PWA插件部署</h2><p>Hexo支持PWA部署的插件有三款，来自网上教程<sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[博客实现PWA](https://guanqr.com/study/blog/realize-pwa/)
">[2]</span></a></sup>的分享，三款插件各有利弊，同时另一款插件不局限于Hexo使用，且更具优点。实现PWA的Hexo插件：</p>
<table>
<thead>
<tr>
<th>插件名称</th>
<th align="center">安装方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://github.com/zoumiaojiang/hexo-service-worker" target="_blank" rel="noopener external nofollow noreferrer">hexo-sercive-worker</a></td>
<td align="center"><code>npm install hexo-service-worker --save</code></td>
<td><a href="#service-worker">hexo-service-worker配置</a></td>
</tr>
<tr>
<td><a href="https://github.com/JLHwung/hexo-offline" target="_blank" rel="noopener external nofollow noreferrer">hexo-offline</a></td>
<td align="center"><code>npm install hexo-offline --save</code></td>
<td><a href="#offline">hexo-offline配置</a></td>
</tr>
<tr>
<td><a href="https://github.com/lavas-project/hexo-pwa" target="_blank" rel="noopener external nofollow noreferrer">hexo-pwa</a></td>
<td align="center"><code>npm install hexo-pwa --save</code></td>
<td><a href="#hexo-pwa">hexo-pwa配置</a></td>
</tr>
</tbody></table>
<h3 id="hexo-service-worker配置"><a href="#hexo-service-worker配置" class="headerlink" title="hexo-service-worker配置"></a><span id="service-worker">hexo-service-worker配置</span></h3><p>在博客站点配置文件<code>../hexo/_config.yml</code>中配置<code>service worker</code>：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># offline config passed to sw-precache.</span></span><br><span class="line"><span class="attr">service_worker:</span></span><br><span class="line">  <span class="attr">maximumFileSizeToCacheInBytes:</span> <span class="number">5242880</span></span><br><span class="line">  <span class="attr">staticFileGlobs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">public/about/index.html</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">public/favicon.ico</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">public/manifest.json</span></span><br><span class="line">  <span class="attr">stripPrefix:</span> <span class="string">public</span></span><br><span class="line">  <span class="attr">verbose:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">runtimeCaching:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">urlPattern:</span> <span class="string">/**/*</span></span><br><span class="line">      <span class="attr">handler:</span> <span class="string">cacheFirst</span></span><br><span class="line">      <span class="attr">options:</span></span><br><span class="line">        <span class="attr">origin:</span> <span class="string">hostname</span></span><br></pre></td></tr></table></figure>
<p><strong>配置说明</strong>：</p>
<ol>
<li><code>staticFileGlobs</code>是首次加载时主动缓存的文件，根据自身实际修改，建议不设置博客首页即<code>index.html</code>，否则要去除首页或更新为<code>Workbox</code>时用户需要手动清除浏览器缓存才能更新，但不加上首页可能导致无法离线访问博客。</li>
<li><code>origin</code>中<code>hostname</code>修改为博客域名。</li>
<li>博客支持全站HTTPS。</li>
</ol>
<p><strong>存在问题</strong><br>存在<code>sw.js</code>无法被浏览器识别的情况，网站无法自动更新，访问者需要手动清楚缓存才能访问最新内容。</p>
<h3 id="hexo-offline配置"><a href="#hexo-offline配置" class="headerlink" title="hexo-offline配置"></a><span id="offline">hexo-offline配置</span></h3><p>配置与<code>hexo-service-worker</code>基本一致，在博客站点配置文件<code>../hexo/_config.yml</code>中配置<code>offline</code>：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># offline config passed to sw-precache.</span></span><br><span class="line"><span class="attr">offline:</span></span><br><span class="line">  <span class="attr">maximumFileSizeToCacheInBytes:</span> <span class="number">5242880</span></span><br><span class="line">  <span class="attr">staticFileGlobs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">public/about/index.html</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">public/favicon.ico</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">public/manifest.json</span></span><br><span class="line">  <span class="attr">stripPrefix:</span> <span class="string">public</span></span><br><span class="line">  <span class="attr">verbose:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">runtimeCaching:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">urlPattern:</span> <span class="string">/**/*</span></span><br><span class="line">      <span class="attr">handler:</span> <span class="string">cacheFirst</span></span><br><span class="line">      <span class="attr">options:</span></span><br><span class="line">        <span class="attr">origin:</span> <span class="string">hostname</span></span><br></pre></td></tr></table></figure>
<p>配置说明参照<code>hexo-service-worker配置说明</code>。</p>
<h3 id="hexo-pwa配置"><a href="#hexo-pwa配置" class="headerlink" title="hexo-pwa配置"></a><span id="hexo-pwa">hexo-pwa配置</span></h3><p>此处配置已经包含<code>manifest.json</code>的配置即无需额外配置<code>manifest.json</code>，当插件运行时会自动生成<code>manifest.json</code>，在博客站点配置文件<code>../hexo/_config.yml</code>中添加以下内容：</p>
<details>
<summary>点击查看具体代码</summary>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">pwa:</span></span><br><span class="line">  <span class="attr">manifest:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/manifest.json</span></span><br><span class="line">    <span class="attr">body:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">hexo</span></span><br><span class="line">      <span class="attr">short_name:</span> <span class="string">hexo</span></span><br><span class="line">      <span class="attr">icons:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">src:</span> <span class="string">/images/android-chrome-192x192.png</span></span><br><span class="line">          <span class="attr">sizes:</span> <span class="string">192x192</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">image/png</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">src:</span> <span class="string">/images/android-chrome-512x512.png</span></span><br><span class="line">          <span class="attr">sizes:</span> <span class="string">512x512</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">image/png</span></span><br><span class="line">      <span class="attr">start_url:</span> <span class="string">/index.html</span></span><br><span class="line">      <span class="attr">theme_color:</span> <span class="string">'#ffffff'</span></span><br><span class="line">      <span class="attr">background_color:</span> <span class="string">'#ffffff'</span></span><br><span class="line">      <span class="attr">display:</span> <span class="string">standalone</span></span><br><span class="line">  <span class="attr">serviceWorker:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/sw.js</span></span><br><span class="line">    <span class="attr">preload:</span></span><br><span class="line">      <span class="attr">urls:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/</span></span><br><span class="line">      <span class="attr">posts:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">opts:</span></span><br><span class="line">      <span class="attr">networkTimeoutSeconds:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">pattern:</span> <span class="type">!!js</span><span class="string">/regexp</span> <span class="string">/hm.baidu.com/</span></span><br><span class="line">        <span class="attr">strategy:</span> <span class="string">networkOnly</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">pattern:</span> <span class="type">!!js</span><span class="string">/regexp</span> <span class="string">/.*\.(js|css|jpg|jpeg|png|gif)$/</span></span><br><span class="line">        <span class="attr">strategy:</span> <span class="string">cacheFirst</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">pattern:</span> <span class="type">!!js</span><span class="string">/regexp</span> <span class="string">/\//</span></span><br><span class="line">        <span class="attr">strategy:</span> <span class="string">networkFirst</span></span><br><span class="line">  <span class="attr">priority:</span> <span class="number">5</span></span><br></pre></td></tr></table></figure>
</details>
**配置说明**
1. `manifest`部分即对应`manifest.json`的配置，、；
2. `serviceWorker`对应缓存信息配置。`preload`中`posts`表示需要缓存的文章数量，`urls`表示需要缓存的页面地址，填写格式即加入缓存页面对应的目录名称，如下：
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 缓存首页</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">/</span></span><br><span class="line"><span class="comment"># 缓存标签页</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">/tags/</span></span><br></pre></td></tr></table></figure>

<h3 id="配置manifest-json实现PWA添加到桌面"><a href="#配置manifest-json实现PWA添加到桌面" class="headerlink" title="配置manifest.json实现PWA添加到桌面"></a><span id="manifest">配置<code>manifest.json</code>实现PWA添加到桌面</span></h3><p>要实现PWA必须要配置<code>manifest.json</code>，因为PWA的启动需要依赖其中的配置，当前各版本浏览器对其支持情况可参照<a href="https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Browser_compatibility_for_manifest.json" target="_blank" rel="noopener external nofollow noreferrer">Browser compatibility for manifest.json</a>。<br>配置<code>manifest.json</code>需要配置应用图标、名称等基本信息，在<code>../hexo/source</code>下新建<code>manifest.json</code>，基本的配置信息参照如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"short_name"</span>: <span class="string">"短名称"</span>,</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"这是一个完整名称"</span>,</span><br><span class="line">    <span class="attr">"icon"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"src"</span>: <span class="string">"icon.png"</span>,</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"image/png"</span>,</span><br><span class="line">            <span class="attr">"sizes"</span>: <span class="string">"512x512"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"background_color"</span>: <span class="string">"#2196f3"</span>,</span><br><span class="line">    <span class="attr">"display"</span>: <span class="string">"standalone"</span>,</span><br><span class="line">    <span class="attr">"start_url"</span>: <span class="string">"index.html"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>配置信息也可以在<a href="https://app-manifest.firebaseapp.com/" target="_blank" rel="noopener external nofollow noreferrer">Web App Manifest Generator</a>进行生成，更多详细配置可参照LAVAS<sup id="fnref:3"><a href="#fn:3" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[manifest.json 简介](https://lavas.baidu.com/pwa/engage-retain-users/add-to-home-screen/introduction)">[3]</span></a></sup>。<br>在博客中配置引用<code>manifest.json</code>，在博客的<code>&lt;head&gt;</code>标签引入，在<code>../next/_config.yml</code>主题配置文件中开启自定义文件<code>head.swig</code>（自定义主题样式可参照另一篇博客《<a href="https://linwhitehat.github.io/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96.html">博客优化(Hexo博客Next主题自定义设计)</a>》），添加下属引用内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;link rel&#x3D;&quot;manifest&quot; href&#x3D;&quot;&#x2F;manifest.json&quot;&gt;</span><br></pre></td></tr></table></figure>
<p>博客部署完成后，可在chrome浏览的开发者模式窗口（按<code>F12</code>）查看<code>Application</code>，即可看到配置的信息以及网站缓存信息。<br><img src="/Blog/images/pwa-manifest.png" alt="查看部署结果"><i class="img-caption">☆ 查看部署结果</i></p>
<h3 id="Workbox部署"><a href="#Workbox部署" class="headerlink" title="Workbox部署"></a>Workbox部署</h3><p>当前博客实现PWA使用的方式，部署步骤如下：</p>
<ol>
<li>配置<code>manifest.json</code>，具体参照<a href="#manifest">配置manifest.json</a>。</li>
<li>安装<a href="https://nodejs.org/zh-cn/download/" target="_blank" rel="noopener external nofollow noreferrer">Node.js</a>（Hexo博客基于Node.js，因此跳过此步）。</li>
<li>安装插件</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install workbox-build gulp gulp-uglify readable-stream uglify-es --save-dev</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>安装<code>gulp</code>插件<br>安装<code>gulp</code>记得需要在全局环境下进行安装，不要只在博客根目录下的环境进行安装，否则会导致<code>gulp</code>无法正常执行。</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install gulp --save  <span class="comment">#安装gulp</span></span><br></pre></td></tr></table></figure>
<ol start="5">
<li>在博客站点根目录新建配置文件<code>../hexo/gulpfile.js</code>，添加内容如下：<details>
<summary>点击查看具体代码</summary>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> gulp = <span class="built_in">require</span>(<span class="string">"gulp"</span>);</span><br><span class="line"><span class="keyword">const</span> workbox = <span class="built_in">require</span>(<span class="string">"workbox-build"</span>);</span><br><span class="line"><span class="keyword">const</span> uglifyes = <span class="built_in">require</span>(<span class="string">'uglify-es'</span>);</span><br><span class="line"><span class="keyword">const</span> composer = <span class="built_in">require</span>(<span class="string">'gulp-uglify/composer'</span>);</span><br><span class="line"><span class="keyword">const</span> uglify = composer(uglifyes, <span class="built_in">console</span>);</span><br><span class="line"><span class="keyword">const</span> pipeline = <span class="built_in">require</span>(<span class="string">'readable-stream'</span>).pipeline;</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'generate-service-worker'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> workbox.injectManifest(&#123;</span><br><span class="line">        swSrc: <span class="string">'./sw-template.js'</span>,</span><br><span class="line">        swDest: <span class="string">'./public/sw.js'</span>,</span><br><span class="line">        globDirectory: <span class="string">'./public'</span>,</span><br><span class="line">        globPatterns: [</span><br><span class="line">            <span class="string">"**/*.&#123;html,css,js,json,woff2&#125;"</span></span><br><span class="line">        ],</span><br><span class="line">        modifyURLPrefix: &#123;</span><br><span class="line">            <span class="string">""</span>: <span class="string">"./"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">"uglify"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> pipeline(</span><br><span class="line">        gulp.src(<span class="string">"./public/sw.js"</span>),</span><br><span class="line">        uglify(),</span><br><span class="line">        gulp.dest(<span class="string">"./public"</span>)</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">"build"</span>, gulp.series(<span class="string">"generate-service-worker"</span>, <span class="string">"uglify"</span>));</span><br></pre></td></tr></table></figure>
</details></li>
</ol>
<p><strong>配置说明</strong><br>1）<code>globPatterns</code>表示需要缓存的文件匹配模式，这里将<code>html</code>、<code>css</code>、<code>js</code>、<code>json</code>和<code>woff2</code>类型文件进行缓存，当博客首次加载时会自动缓存这些文件；<br>2）若是博客使用<code>gulp</code>压缩了源码，以上配置内容与之前配置信息重复的部分可忽略。<br>6. 在博客站点根目录新建配置文件<code>../hexo/sw-template.js</code>，添加内容如下：</p>
<details>
<summary>点击查看具体代码</summary>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> workboxVersion = <span class="string">'5.0.0'</span>;</span><br><span class="line"></span><br><span class="line">importScripts(<span class="string">`https://storage.googleapis.com/workbox-cdn/releases/<span class="subst">$&#123;workboxVersion&#125;</span>/workbox-sw.js`</span>);</span><br><span class="line"></span><br><span class="line">workbox.core.setCacheNameDetails(&#123;</span><br><span class="line">    prefix: <span class="string">"Blog_name"</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">workbox.core.skipWaiting();</span><br><span class="line"></span><br><span class="line">workbox.core.clientsClaim();</span><br><span class="line"></span><br><span class="line">workbox.precaching.precacheAndRoute(self.__WB_MANIFEST);</span><br><span class="line"></span><br><span class="line">workbox.precaching.cleanupOutdatedCaches();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Images</span></span><br><span class="line">workbox.routing.registerRoute(</span><br><span class="line">    /\.(?:png|jpg|jpeg|gif|bmp|webp|svg|ico)$/,</span><br><span class="line">    <span class="keyword">new</span> workbox.strategies.CacheFirst(&#123;</span><br><span class="line">        cacheName: <span class="string">"images"</span>,</span><br><span class="line">        plugins: [</span><br><span class="line">            <span class="keyword">new</span> workbox.expiration.ExpirationPlugin(&#123;</span><br><span class="line">                maxEntries: <span class="number">1000</span>,</span><br><span class="line">                maxAgeSeconds: <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">30</span></span><br><span class="line">            &#125;),</span><br><span class="line">            <span class="keyword">new</span> workbox.cacheableResponse.CacheableResponsePlugin(&#123;</span><br><span class="line">                statuses: [<span class="number">0</span>, <span class="number">200</span>]</span><br><span class="line">            &#125;)</span><br><span class="line">        ]</span><br><span class="line">    &#125;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Fonts</span></span><br><span class="line">workbox.routing.registerRoute(</span><br><span class="line">    /\.(?:eot|ttf|woff|woff2)$/,</span><br><span class="line">    <span class="keyword">new</span> workbox.strategies.CacheFirst(&#123;</span><br><span class="line">        cacheName: <span class="string">"fonts"</span>,</span><br><span class="line">        plugins: [</span><br><span class="line">            <span class="keyword">new</span> workbox.expiration.ExpirationPlugin(&#123;</span><br><span class="line">                maxEntries: <span class="number">1000</span>,</span><br><span class="line">                maxAgeSeconds: <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">30</span></span><br><span class="line">            &#125;),</span><br><span class="line">            <span class="keyword">new</span> workbox.cacheableResponse.CacheableResponsePlugin(&#123;</span><br><span class="line">                statuses: [<span class="number">0</span>, <span class="number">200</span>]</span><br><span class="line">            &#125;)</span><br><span class="line">        ]</span><br><span class="line">    &#125;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Google Fonts</span></span><br><span class="line">workbox.routing.registerRoute(</span><br><span class="line">    /^https:\/\/fonts\.googleapis\.com/,</span><br><span class="line">    <span class="keyword">new</span> workbox.strategies.StaleWhileRevalidate(&#123;</span><br><span class="line">        cacheName: <span class="string">"google-fonts-stylesheets"</span></span><br><span class="line">    &#125;)</span><br><span class="line">);</span><br><span class="line">workbox.routing.registerRoute(</span><br><span class="line">    /^https:\/\/fonts\.gstatic\.com/,</span><br><span class="line">    <span class="keyword">new</span> workbox.strategies.CacheFirst(&#123;</span><br><span class="line">        cacheName: <span class="string">'google-fonts-webfonts'</span>,</span><br><span class="line">        plugins: [</span><br><span class="line">            <span class="keyword">new</span> workbox.expiration.ExpirationPlugin(&#123;</span><br><span class="line">                maxEntries: <span class="number">1000</span>,</span><br><span class="line">                maxAgeSeconds: <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">30</span></span><br><span class="line">            &#125;),</span><br><span class="line">            <span class="keyword">new</span> workbox.cacheableResponse.CacheableResponsePlugin(&#123;</span><br><span class="line">                statuses: [<span class="number">0</span>, <span class="number">200</span>]</span><br><span class="line">            &#125;)</span><br><span class="line">        ]</span><br><span class="line">    &#125;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Static Libraries</span></span><br><span class="line">workbox.routing.registerRoute(</span><br><span class="line">    /^https:\/\/cdn\.jsdelivr\.net/,</span><br><span class="line">    <span class="keyword">new</span> workbox.strategies.CacheFirst(&#123;</span><br><span class="line">        cacheName: <span class="string">"static-libs"</span>,</span><br><span class="line">        plugins: [</span><br><span class="line">            <span class="keyword">new</span> workbox.expiration.ExpirationPlugin(&#123;</span><br><span class="line">                maxEntries: <span class="number">1000</span>,</span><br><span class="line">                maxAgeSeconds: <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">30</span></span><br><span class="line">            &#125;),</span><br><span class="line">            <span class="keyword">new</span> workbox.cacheableResponse.CacheableResponsePlugin(&#123;</span><br><span class="line">                statuses: [<span class="number">0</span>, <span class="number">200</span>]</span><br><span class="line">            &#125;)</span><br><span class="line">        ]</span><br><span class="line">    &#125;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// External Images</span></span><br><span class="line">workbox.routing.registerRoute(</span><br><span class="line">    /^https:\/\/raw\.githubusercontent\.com\/reuixiy\/hugo-theme-meme\/master\/<span class="keyword">static</span>\/icons\/.*<span class="regexp">/,</span></span><br><span class="line"><span class="regexp">    new workbox.strategies.CacheFirst(&#123;</span></span><br><span class="line"><span class="regexp">        cacheName: "external-images",</span></span><br><span class="line"><span class="regexp">        plugins: [</span></span><br><span class="line"><span class="regexp">            new workbox.expiration.ExpirationPlugin(&#123;</span></span><br><span class="line"><span class="regexp">                maxEntries: 1000,</span></span><br><span class="line"><span class="regexp">                maxAgeSeconds: 60 * 60 * 24 * 30</span></span><br><span class="line"><span class="regexp">            &#125;),</span></span><br><span class="line"><span class="regexp">            new workbox.cacheableResponse.CacheableResponsePlugin(&#123;</span></span><br><span class="line"><span class="regexp">                statuses: [0, 200]</span></span><br><span class="line"><span class="regexp">            &#125;)</span></span><br><span class="line"><span class="regexp">        ]</span></span><br><span class="line"><span class="regexp">    &#125;)</span></span><br><span class="line"><span class="regexp">);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">workbox.googleAnalytics.initialize();</span></span><br></pre></td></tr></table></figure>
</details>
**配置说明**
1）`prefix`参数内容`Blog_name`修改为博客名称，具体参照[Workbox_v5.0.0](https://github.com/GoogleChrome/workbox/releases)；
2）将参数`workboxVersion`修改为最新发布版，其他内容可根据自身情况修改；
3）其他缓存策略参考[相关文档](https://developers.google.com/web/tools/workbox/modules/workbox-strategies)，不建议缓存视频和图片。
7. 注册`Service Worker`

<p>在博客HTML页面加入<code>Service Worker</code>注册信息及页面更新提醒，在<code>../next/layout/_layout.swig</code>中找到<code>&lt;body&gt;&lt;/body&gt;</code>标签对，在标签内加入以下内容：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"app-refresh"</span> id=<span class="string">"app-refresh"</span>&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"app-refresh-wrap"</span> onclick=<span class="string">"location.reload()"</span>&gt;</span><br><span class="line">        &lt;label&gt;已更新最新版本&lt;<span class="regexp">/label&gt;</span></span><br><span class="line"><span class="regexp">        &lt;span&gt;点击刷新&lt;/</span>span&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">'serviceWorker'</span> <span class="keyword">in</span> navigator) &#123;</span><br><span class="line">        <span class="keyword">if</span> (navigator.serviceWorker.controller) &#123;</span><br><span class="line">            navigator.serviceWorker.addEventListener(<span class="string">'controllerchange'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                showNotification();</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">window</span>.addEventListener(<span class="string">'load'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            navigator.serviceWorker.register(<span class="string">'/sw.js'</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">showNotification</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">document</span>.querySelector(<span class="string">'meta[name=theme-color]'</span>).content = <span class="string">'#000'</span>;</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">'app-refresh'</span>).className += <span class="string">' app-refresh-show'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="8">
<li>添加CSS样式</li>
</ol>
<p>在自定义样式文件<code>../hexo/source/_data/styles.styl</code>中修改，添加以下内容：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.app-refresh</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#000</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">3em</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">42</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">1em</span>;</span><br><span class="line">    <span class="attribute">transition</span>: all .<span class="number">3s</span> ease;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.app-refresh-wrap</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.app-refresh-wrap</span> <span class="selector-tag">label</span> &#123;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.app-refresh-show</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">3em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="9">
<li>避免<code>manifest.json</code>在部署时被修改</li>
</ol>
<p>在博客配置文件<code>../hexo/_config.yml</code>找到<code>skip_render</code>，做出以下修改：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">+</span> <span class="attr">skip_render:</span> <span class="string">[README.md,manifest.json]</span></span><br></pre></td></tr></table></figure>
<ol start="10">
<li>部署</li>
</ol>
<p>运行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">gulp build</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>这篇博客是Hexo博客优化系列的补充，为博客部署PWA，使博客在多平台能快捷访问且支持离线访问，同时在部署过程中将遇到的问题及解决方式进行分享，同时感谢博主<code>Guan Qirui</code>在博客优化中给予的帮助。</p>
<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://developer.mozilla.org/zh-CN/docs/Web/Progressive_web_apps" target="_blank" rel="noopener external nofollow noreferrer">渐进式 Web 应用（PWA）|MDN web docs</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://guanqr.com/study/blog/realize-pwa/" target="_blank" rel="noopener">博客实现PWA</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://lavas.baidu.com/pwa/engage-retain-users/add-to-home-screen/introduction" target="_blank" rel="noopener external nofollow noreferrer">manifest.json 简介</a><a href="#fnref:3" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>技术分享</category>
        <category>博客</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>PWA</tag>
        <tag>gulp</tag>
      </tags>
  </entry>
  <entry>
    <title>博客优化(Hexo博客Next主题设计)</title>
    <url>/Blog/2020/01/30/%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\Blog\assets\css\APlayer.min.css"><script src="\Blog\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\Blog\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>博客搭建完成后，最初的博客雏形一般都比较朴素，功能也有限，所以可以通过优化主题来进行美化博客外观和拓展博客功能。本篇文章主要以可正常访问的Hexo.Mist原型博客为基础，根据自身需求加以优化，而最新版（V7.7）中其实包含很多美化设置，但是默认是关闭状态，同时个性化配置需要修改配置文件等，即使出现一个字母的差错也会导致失效，因此本文对配置文件会具体说明，而目录均是按照我的博客搭建博文中说明的目录结构，可以根据自身目录结构进行转换，博文中展示的图片可能来自参考文章，若参考文章内容与实际存在差异会附上实际图片。</p>
<a id="more"></a>

<h2 id="优化主题"><a href="#优化主题" class="headerlink" title="优化主题"></a>优化主题</h2><p>我的个人博客是<a href="https://linwhitehat.github.io/">林深时见璐</a>，本文优化的效果可以访问博客进行观看。</p>
<h3 id="阅读全文设置"><a href="#阅读全文设置" class="headerlink" title="阅读全文设置"></a>阅读全文设置</h3><p>由于初始博客并没有设置摘要的形式，因此博客首页会展示每篇博文的全文，显得十分冗长，为此设置<code>阅读全文</code>能简化博客首页，且让博文能以简短的摘要进行展示。<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[设置阅读全文](https://www.jianshu.com/p/78c218f9d1e7)
">[1]</span></a></sup></p>
<p>设置方法采用的是在博文中选择适当位置进行内容截断，填写以下内容：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- more --&gt;</span></span><br></pre></td></tr></table></figure>

<p>这样首页便只会展示在截断位置前的内容。</p>
<h3 id="分类板块二级目录显示"><a href="#分类板块二级目录显示" class="headerlink" title="分类板块二级目录显示"></a><code>分类板块</code>二级目录显示</h3><p>在类别模块，往往只显示一种类别，但有时候博客之间归属一大类却各有差异，因此设计二级分类目录，使得类别简洁的同时又能将具体博文区别。因为Hexo原生支持父子分类，在博文撰写的<code>md</code>文件首部<code>categories</code>下原先的类别A下再写一个类别B，即可得到父子类的效果，A为父类，B为子类，示例如下<sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[分类二级目录](https://hexo.io/zh-cn/docs/front-matter.html)
">[2]</span></a></sup>：</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">categories:</span><br><span class="line"><span class="deletion">- 技术</span></span><br><span class="line"><span class="deletion">- 博客搭建</span></span><br></pre></td></tr></table></figure>

<h3 id="点击侧边栏头像返回首页"><a href="#点击侧边栏头像返回首页" class="headerlink" title="点击侧边栏头像返回首页"></a>点击侧边栏头像返回首页</h3><p>在Next V7.7.0版本配置中修改方式与以前版本存在差异，未测试之前版本效果，本人配置方式如下：<br>1）找到侧边栏配置文件<code>../next/layout/_partials/sidebar/site-overview.swig</code>；<br>2）找到头像配置位置<code>class=&quot;site-author-image&quot;</code>；<br>3）设置点击头像跳转，需将对应头像配置修改如下：</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="addition">+ &lt;a href="/"&gt;</span></span><br><span class="line">  &lt;img class="site-author-image" itemprop="image" alt="&#123;&#123; author &#125;&#125;"</span><br><span class="line">    src="&#123;&#123; url_for(theme.avatar.url) &#125;&#125;"&gt;</span><br><span class="line"><span class="addition">+ &lt;/a&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="评论系统使用utteranc"><a href="#评论系统使用utteranc" class="headerlink" title="评论系统使用utteranc"></a>评论系统使用<code>utteranc</code></h3><p>原先使用的是主题自带的<code>gitalk</code>作为博客评论系统，而更改为<code>utteranc</code>的原因有两个：<br>1）<code>gitalk</code>存在原始配置泄露及访问授权等<a href="https://github.com/gitalk/gitalk/issues/343" target="_blank" rel="noopener external nofollow noreferrer" title="https://github.com/gitalk/gitalk/issues/343">问题</a>，<code>utteranc</code>具备细粒度的权限控制，且接受隐私项目授权；<br>2）二者都是基于GitHub的issue系统进行评论，很好转换。</p>
<p>转换评论系统首先将<code>gitalk</code>在<code>../next/_config.yml</code>中设置为<code>false</code>，将GitHub中授权的应用删除。安装<code>utteranc</code>步骤如下<sup id="fnref:3"><a href="#fn:3" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[评论系统](https://wangjiezhe.com/posts/2018-10-29-Hexo-NexT-3/)
">[3]</span></a></sup>：<br>1）在GitHub APP中安装<code>utterances</code>，链接为<a href="https://github.com/apps/utterances" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/apps/utterances</a>，安装后如图：<br><img src="https://wangjiezhe.com/posts/2018-10-29-Hexo-NexT-3/5bd723ae73cb3.webp" alt="utterance应用安装"><i class="img-caption">☆ utterance应用安装</i><br>2）安装插件，在hexo文件目录下打开<code>git bash</code>，安装如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install theme-next/hexo-next-utteranc</span><br></pre></td></tr></table></figure>
<p>3）在<code>../next/layout/_third-party/comments/</code>中新建文件<code>utterances.swig</code>，写入以下内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% if theme.utteranc.enable %&#125;</span><br><span class="line">  &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;utteranc.es&#x2F;client.js&quot;</span><br><span class="line">    repo&#x3D;&quot;&#123;&#123; theme.utteranc.repo &#125;&#125;&quot;</span><br><span class="line">    issue-term&#x3D;&quot;&#123;&#123; theme.utteranc.issue_term &#125;&#125;&quot;</span><br><span class="line">    theme&#x3D;&quot;&#123;&#123; theme.utteranc.theme &#125;&#125;&quot;</span><br><span class="line">    crossorigin&#x3D;&quot;anonymous&quot;</span><br><span class="line">    async&gt;</span><br><span class="line">  &lt;&#x2F;script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>
<p>4）在<code>../next/layout/_partials/comments.swig</code>中找到最后一句<code>elseif</code>并在其中的<code>&lt;div&gt;&lt;/div&gt;</code>后面增添以下内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% elseif theme.utteranc.enable %&#125;</span><br><span class="line">      &lt;div class&#x3D;&quot;comments&quot; id&#x3D;&quot;comments&quot;&gt;</span><br><span class="line">        &#123;% include &#39;..&#x2F;_third-party&#x2F;comments&#x2F;utterances.swig&#39; %&#125;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>
<p>5）在<code>../next/_config.yml</code>添加下面的配置内容：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Demo: https://utteranc.es/  http://trumandu.github.io/about/</span></span><br><span class="line"><span class="attr">utteranc:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">linwhitehat/linwhitehat.github.io</span></span><br><span class="line">  <span class="attr">pathname:</span> <span class="string">pathname</span></span><br><span class="line">  <span class="comment"># theme: github-light,github-dark,github-dark-orange</span></span><br><span class="line">  <span class="attr">theme:</span> <span class="string">github-light</span></span><br><span class="line">  <span class="attr">cdn:</span> <span class="string">https://utteranc.es/client.js</span></span><br><span class="line">  <span class="comment"># If you want to modify priority, please config in **hexo**</span></span><br><span class="line">  <span class="comment">#priority:</span></span><br></pre></td></tr></table></figure>
<p>更新完博客配置后，便能看到之前使用gitalk留下的评论，同时也能发表新评论。</p>
<h4 id="更新utteranc评论系统配置说明"><a href="#更新utteranc评论系统配置说明" class="headerlink" title="更新utteranc评论系统配置说明"></a>更新<code>utteranc</code>评论系统配置说明</h4><p>1）新版配置简化，上述配置中<code>3）</code>和<code>4）</code>部分可忽略，若忽略配置后未生效可尝试加上；<br>2）原先设置中<code>pathname</code>设置改为<code>title</code>，避免URL中带有中文字符编码导致评论issue显示中文为编码，修改后issue名称即博客文章标题。</p>
<h3 id="图片设置"><a href="#图片设置" class="headerlink" title="图片设置"></a>图片设置</h3><ol>
<li>图片放大查看的功能，这是默认功能，可以选择使用的插件<code>fancybox</code>或<code>mediumzoom</code>，我使用后者，在<code>../next/_config.yml</code>中搜索<code>mediumzoom</code>，将<code>false</code>改为<code>true</code>。</li>
<li>图片标题说明，当前的配置情况下，即使使用下面展示的markdown语法中的图片说明也无法正常显示在博客中，其中<code>Optional title</code>是图片的title属性，若使用Next主题中的<code>fancybox</code>插件则自动会显示，其他的配置则需要更改Hexo渲染组件。<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![<span class="string">Alt text</span>](<span class="link">../img.jpg "Optional title"</span>)</span><br></pre></td></tr></table></figure>
修改渲染配置步骤如下：<br>1）在<code>../hexo/node_modules/marked/lib/marked.js</code>中进行下述修改，其中<code>-</code>表示删除<code>+</code>表示增加：<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">Renderer.prototype.image = function(href, title, text) &#123;</span><br><span class="line"><span class="deletion">- href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);</span></span><br><span class="line"><span class="deletion">- if (href === null) &#123;</span></span><br><span class="line"><span class="deletion">-   return text;</span></span><br><span class="line"><span class="deletion">-&#125;</span></span><br><span class="line"><span class="addition">+ if (this.options.baseUrl &amp;&amp; !originIndependentUrl.test(href)) &#123;</span></span><br><span class="line"><span class="addition">+   href = resolveUrl(this.options.baseUrl, href);</span></span><br><span class="line"><span class="addition">+ &#125;</span></span><br><span class="line"><span class="addition">+ var out = '&lt;img src="' + href + '" alt="' + text + '"';</span></span><br><span class="line">  if (title) &#123;</span><br><span class="line"><span class="deletion">-   out += ' title="' + title + '"';</span></span><br><span class="line"><span class="addition">+   out += '&gt;' + '&lt;i class="img-caption"&gt;' + '◎ ' + title + '&lt;/i';</span></span><br><span class="line">  &#125;</span><br><span class="line">  out += this.options.xhtml ? '/&gt;' : '&gt;';</span><br><span class="line">  return out;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
2）增加自定义CSS样式，在<code>../source/_data/styles.styl</code>中增加以下内容：<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.img-caption</span> &#123;</span><br><span class="line">    <span class="attribute">font-style</span>: normal;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">0</span> .<span class="number">7em</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">90%</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#555</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">text-indent</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">font-family</span>: STKaiti, serif;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>图片居中<br>在<code>../next/source/css/_schemes/Mist/_posts-expanded.styl</code>中找到<code>.posts-expand</code>中的下列内容<sup id="fnref:4"><a href="#fn:4" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[图片居中设置](https://blog.singee.me/2017/12/07/mist-img-center/)
">[4]</span></a></sup>：<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.post-body</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
将其修改为：<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.post-body</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="博文脚注"><a href="#博文脚注" class="headerlink" title="博文脚注"></a>博文脚注</h3><p>脚注也可以叫注脚，Hexo自带的默认markdown编辑器渲染效果不支持脚注的显示，因此安装插件进行渲染支持，我使用的是<a href="https://github.com/kchen0x/hexo-reference" target="_blank" rel="noopener external nofollow noreferrer" title="https://github.com/kchen0x/hexo-reference">hexo-reference</a>，整体效果更可观，安装如下<sup id="fnref:5"><a href="#fn:5" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[插入脚注](https://guanqr.com/study/blog/hexo-theme-next-customization/)
">[5]</span></a></sup><sup id="fnref:6"><a href="#fn:6" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[注脚选择](https://benzblog.site/2019-07-12-HexoTricks/)
">[6]</span></a></sup>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-reference --save</span><br></pre></td></tr></table></figure>
<p>在博客撰写的md文件中使用如下（<code>^</code>和数字之间不需要空格）：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">博客脚注[^ 1]。</span><br><span class="line">[<span class="symbol">^ 1</span>]: <span class="link">我的博客。</span></span><br></pre></td></tr></table></figure>

<h3 id="修改篇尾的标签符号"><a href="#修改篇尾的标签符号" class="headerlink" title="修改篇尾的标签符号"></a>修改篇尾的标签符号</h3><p>默认的标签符号是<code>#</code>，可以使用自带的标签图案，修改方式即在<code>../next/_config.yml</code>中将<code>tag_icon</code>更改为<code>true</code>。<br><img src="https://i.imgur.com/LVHYdOp.png" alt="old_tag"><i class="img-caption">☆ old_tag</i><br><img src="https://i.imgur.com/KVFYpSF.png" alt="new_tag"><i class="img-caption">☆ new_tag</i></p>
<h3 id="修改分割线"><a href="#修改分割线" class="headerlink" title="修改分割线"></a>修改分割线</h3><p>原先的默认分割线是虚线，将其修改为实线，在<code>../next/source/css/_common/scaffolding/base.styl</code>中将下属配置删除<sup id="fnref:7"><a href="#fn:7" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[分割线样式修改](https://blog.bill.moe/hexo-theme-next-config-optimization/)
">[7]</span></a></sup>：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">background-image</span>: <span class="selector-tag">repeating-linear-gradient</span>(<span class="selector-tag">-45deg</span>, <span class="selector-tag">white</span>, <span class="selector-tag">white</span> 4<span class="selector-tag">px</span>, <span class="selector-tag">transparent</span> 4<span class="selector-tag">px</span>, <span class="selector-tag">transparent</span> 8<span class="selector-tag">px</span>);</span><br></pre></td></tr></table></figure>

<h3 id="页脚显示博客运行时间"><a href="#页脚显示博客运行时间" class="headerlink" title="页脚显示博客运行时间"></a>页脚显示博客运行时间</h3><p>在博客页脚显示博客运行时间<sup id="fnref:8"><a href="#fn:8" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[页脚显示博客运行时间](http://eternalzttz.com/hexo-next.html)
">[8]</span></a></sup>，这个在默认主题配置中并没有，因此需要自己添加，修改配置文件是<code>../next/layout/_partials/footer.swig</code>，在配置文件中找到你想显示在博客页脚的位置，比如我配置在主题版本信息下，显示效果如图：<br><img src="/Blog/images/run_time_result.png" alt="博客运行时间"><i class="img-caption">☆ 博客运行时间显示效果</i><br>不同配置位置可以自行尝试修改，具体添加代码如下：</p>
<details>
<summary>点击查看具体代码</summary>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;days&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">function show_date_time()&#123;</span><br><span class="line">    window.setTimeout(&quot;show_date_time()&quot;, 1000);</span><br><span class="line">    BirthDay&#x3D;new Date(&quot;01&#x2F;10&#x2F;2019 00:13:14&quot;);&#x2F;&#x2F;修改为自己的blog建站时间</span><br><span class="line">    today&#x3D;new Date();</span><br><span class="line">    timeold&#x3D;(today.getTime()-BirthDay.getTime());</span><br><span class="line">    sectimeold&#x3D;timeold&#x2F;1000</span><br><span class="line">    secondsold&#x3D;Math.floor(sectimeold);</span><br><span class="line">    msPerDay&#x3D;24*60*60*1000</span><br><span class="line">    e_daysold&#x3D;timeold&#x2F;msPerDay</span><br><span class="line">    daysold&#x3D;Math.floor(e_daysold);</span><br><span class="line">    e_hrsold&#x3D;(e_daysold-daysold)*24;</span><br><span class="line">    hrsold&#x3D;setzero(Math.floor(e_hrsold));</span><br><span class="line">    e_minsold&#x3D;(e_hrsold-hrsold)*60;</span><br><span class="line">    minsold&#x3D;setzero(Math.floor((e_hrsold-hrsold)*60));</span><br><span class="line">    seconds&#x3D;setzero(Math.floor((e_minsold-minsold)*60));</span><br><span class="line">    document.getElementById(&#39;days&#39;).innerHTML&#x3D;&quot;本站已安全运行&quot;+daysold+&quot;天&quot;+hrsold+&quot;小时&quot;+minsold+&quot;分&quot;+seconds+&quot;秒&quot;;</span><br><span class="line">&#125;</span><br><span class="line">function setzero(i)&#123;</span><br><span class="line">    if (i&lt;10)</span><br><span class="line">    &#123;i&#x3D;&quot;0&quot; + i&#125;;</span><br><span class="line">    return i;</span><br><span class="line">&#125;</span><br><span class="line">show_date_time();</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="显示博客阅读数量"><a href="#显示博客阅读数量" class="headerlink" title="显示博客阅读数量"></a>显示博客阅读数量</h3><p>已经有许多教程，在博客主题配置中也有多种选择，根据网上教程的介绍，busuanzi插件只能在博文显示阅读数，因此我选择部署LeanCloud插件来显示阅读数，但是在部署过程中遇到不少问题，而且没有在任何教程中找到完整的说明，尽管网上也有可行的教程<sup id="fnref:9"><a href="#fn:9" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[部署LeanCloud显示阅读数量](https://yunhao.space/2018/06/27/hexo-leancloud-plugin-installation-tutor/)
">[9]</span></a></sup>，我还是记录下来。</p>
<h4 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h4><p>在<a href="https://www.leancloud.cn/" target="_blank" rel="noopener external nofollow noreferrer">LeanCloud</a>官网中进行注册并登录。</p>
<h4 id="应用配置"><a href="#应用配置" class="headerlink" title="应用配置"></a>应用配置</h4><p>进入控制台之后，点击<code>创建应用</code>，填写应用名称，<code>计价方案</code>选择开发版，创建成功之后，在对应应用右上角点击齿轮状的设置，如图：<br><img src="https://raw.githubusercontent.com/lmnsyunhao/blog-pica/master/hexo-leancloud-plugin-installation-tutor/3.png" alt="LeanCloud应用设置"><i class="img-caption">☆ LeanCloud应用设置</i><br>在设置界面，选择<code>存储</code>，选择<code>创建Class</code>，<code>Class名称</code>输入<code>Counter</code>，因为这个类名与Next主题兼容，默认ACL权限设置为<code>无限制</code>即所有用户可读可写。<br>在设置界面，选择<code>设置</code>，选择<code>应用Keys</code>，将界面显示的<code>AppID</code>和<code>AppKey</code>复制，在主题配置文件修改时需要使用。<br>在上述的<code>设置</code>选项下选择<code>安全中心</code>，在<code>Web安全域名</code>的填写框中输入博客的完整域名，保证统计数据只在记录的域名中有效。</p>
<h4 id="博客配置"><a href="#博客配置" class="headerlink" title="博客配置"></a>博客配置</h4><p>在博客的<code>../next/_config.yml</code>配置文件中，找到<code>leancloud_visitors</code>，设置配置信息如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Show number of visitors to each article.</span></span><br><span class="line"><span class="comment"># You can visit https://leancloud.cn get AppID and AppKey.</span></span><br><span class="line"><span class="attr">leancloud_visitors:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">app_id:</span> </span><br><span class="line">  <span class="attr">app_key:</span> </span><br><span class="line">  <span class="comment"># Dependencies: https://github.com/theme-next/hexo-leancloud-counter-security</span></span><br><span class="line">  <span class="comment"># If you don't care about security in lc counter and just want to use it directly</span></span><br><span class="line">  <span class="comment"># (without hexo-leancloud-counter-security plugin), set the `security` to `false`.</span></span><br><span class="line">  <span class="attr">security:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">betterPerformance:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p><code>app_id</code>处填写应用配置时复制的<code>AppID</code>，<code>app_key</code>填写应用配置时复制的<code>AppKey</code>。</p>
<h4 id="安全插件安装及部署"><a href="#安全插件安装及部署" class="headerlink" title="安全插件安装及部署"></a>安全插件安装及部署</h4><p>如果上述配置完成后，更新部署博客，能够正常显示阅读数量，后续的内容可以选择跳过。<br>如果上述配置不能正常显示阅读数量，且存在<code>Counter not initialized! See more at console err msg.</code>的问题，此时在博客页面打开控制台（Chrome下按<code>F12</code>或右键选择<code>检查</code>），点击<code>Console</code>查看是否存在下图显示内容：<br><img src="https://raw.githubusercontent.com/lmnsyunhao/blog-pica/master/hexo-leancloud-plugin-installation-tutor/8.png" alt="Count类未初始化问题"><i class="img-caption">☆ Count类未初始化问题</i><br>这是因为LeanCloud插件存在安全问题，需要安装另一个插件<code>hexo-leancloud-counter-security</code>进行完善。<br>首先在<code>../next/_config.yml</code>主题配置文件中的<code>leancloud_visitors</code>找到<code>security</code>选项，将其改为<code>true</code>，同时确认同一配置文件下的<code>valine</code>部分的<code>enable</code>和<code>visitor</code>是<code>false</code>，因为这两者会产生冲突，如果使用<code>valine</code>作为评论系统，可以参照网上教程进行冲突解决。<br>然后在博客根目录下打开<code>git bash</code>或<code>CMD</code>，安装插件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-leancloud-counter-security --save</span><br></pre></td></tr></table></figure>
<p>由于插件存在依赖性，出现<code>Error: Cannot find module &#39;babel-runtime/regenerator&#39;</code>错误时需要再安装模块<code>babel-runtime</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install babel-runtime --save</span><br></pre></td></tr></table></figure>
<p>安装完成之后，注册用户，其中<code>用户名</code>和<code>密码</code>替换为你要设置的用户名和密码内容（不需要和LeanCloud的登陆名和登陆密码一样）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo lc-counter r 用户名 密码</span><br></pre></td></tr></table></figure>
<p>之后修改博客配置文件<code>../hexo/_config.yml</code>，添加以下内容（所有选项都必须填写，此处的<code>username</code>和<code>password</code>即刚刚注册的用户名和密码，网上有教程认为此处空白可等部署时输入，但我部署时会因为配置缺少导致出错，所以建议配置中直接写入），否则部署时会报错<code>TypeError: Cannot read property ‘enable_sync’ of undefined</code>：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">leancloud_counter_security:</span></span><br><span class="line">  <span class="attr">enable_sync:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">app_id:</span> <span class="string">&lt;&lt;your</span> <span class="string">app</span> <span class="string">id&gt;&gt;</span></span><br><span class="line">  <span class="attr">app_key:</span> <span class="string">&lt;&lt;your</span> <span class="string">app</span> <span class="string">key&gt;</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">&lt;&lt;your</span> <span class="string">username&gt;&gt;</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">&lt;&lt;your</span> <span class="string">password&gt;&gt;</span></span><br></pre></td></tr></table></figure>
<p>之后在同一配置文件下的<code>deploy</code>部分，做以下修改：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="bullet">-</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/username/username.github.io</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br><span class="line"><span class="bullet">-</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">leancloud_counter_security_sync</span></span><br></pre></td></tr></table></figure>
<p>由于搭建博客时已经部署到GitHub，要同时部署git和leancloud需要在配置文件中写清楚，其中git部分的<code>username</code>是对应博客的GitHub用户名，可参照我的博客<a href="https://linwhitehat.github.io/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2.html">搭建个人博客(hexo+next+github）</a>中的说明。<br>完成插件安装和配置修改后，到LeanCloud的应用中查看<code>存储</code>下的<code>_User</code>项，是否已经添加刚刚注册的用户，如图：<br><img src="https://raw.githubusercontent.com/lmnsyunhao/blog-pica/master/hexo-leancloud-plugin-installation-tutor/9.png" alt="LeanCloud用户查看"><i class="img-caption">☆ LeanCloud用户查看</i><br>存在用户后，查看<code>Counter</code>项，对表权限进行修改，点击<code>Counter</code>，选择<code>权限</code>，点击<code>修改</code>，分别修改<code>add_fields</code>、<code>create</code>和<code>delete</code>。<br><img src="/Blog/images/LeanCloud_Counter.png" alt="Counter权限修改"><i class="img-caption">☆ Counter权限修改</i><br><code>add_fields</code>和<code>create</code>两项的修改步骤一致：<br>1）选择<code>指定用户</code><br>2）输入已注册的用户名，添加<br><img src="https://raw.githubusercontent.com/lmnsyunhao/blog-pica/master/hexo-leancloud-plugin-installation-tutor/11.png" alt="添加用户"><i class="img-caption">☆ 添加用户</i><br>3）查看已添加用户正常显示<br><img src="https://raw.githubusercontent.com/lmnsyunhao/blog-pica/master/hexo-leancloud-plugin-installation-tutor/12.png" alt="用户添加成功效果"><i class="img-caption">☆ 用户添加成功效果</i><br>对于<code>delete</code>项，只保留上述第一个步骤即可，不需要添加用户。<br>如果希望保护访问数据不被篡改，可以选择<code>云引擎</code>，选择<code>部署</code>，选择<code>在线编辑</code>，点击<code>创建函数</code>，选项依次选择<code>Hook</code>、<code>beforeUpdate</code>和<code>Counter</code>，在函数中添加以下内容：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> query = <span class="keyword">new</span> AV.Query(<span class="string">"Counter"</span>);</span><br><span class="line"><span class="keyword">if</span> (request.object.updatedKeys.indexOf(<span class="string">'time'</span>) !== <span class="number">-1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> query.get(request.object.id).then(<span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (obj.get(<span class="string">"time"</span>) + <span class="number">1</span> !== request.object.get(<span class="string">"time"</span>)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> AV.Cloud.Error(<span class="string">'Invalid update!'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/lmnsyunhao/blog-pica/master/hexo-leancloud-plugin-installation-tutor/18.png" alt="云引擎设置内容"><i class="img-caption">☆ 云引擎设置内容</i><br>保存上述设置之后，可看到添加的函数，点击<code>部署</code>，等待部署完成即可。<br><img src="https://raw.githubusercontent.com/lmnsyunhao/blog-pica/master/hexo-leancloud-plugin-installation-tutor/21.png" alt="部署完成日志"><i class="img-caption">☆ 部署完成日志</i></p>
<h4 id="修改lean-analytics-swig配置"><a href="#修改lean-analytics-swig配置" class="headerlink" title="修改lean-analytics.swig配置"></a>修改lean-analytics.swig配置</h4><p>如果上述配置完成后正常显示阅读数可跳过这部分，若出现阅读数不正常且显示为0，可参照此部分<sup id="fnref:10"><a href="#fn:10" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Next主题无法获取Leancloud阅读次数的问题](https://wangyi.blog/2019/12/24/Next主题无法获取Leancloud阅读次数的问题/)
">[10]</span></a></sup>，原因可能是LeanCloud接口出现变化。对<code>..\next\layout_third-party\statistics\lean-analytics.swig</code>做以下修改：</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"># 修改第13行，-表示删除，+表示添加</span><br><span class="line"><span class="deletion">- Counter('get', `/classes/Counter?where=$&#123;JSON.stringify(&#123; url &#125;)&#125;`)</span></span><br><span class="line"><span class="addition">+ Counter('get', `/classes/Counter?where=$&#123;encodeURIComponent(JSON.stringify(&#123; url &#125;))&#125;&amp;limit=1`)</span></span><br><span class="line"></span><br><span class="line"># 修改第58行</span><br><span class="line"><span class="deletion">- Counter('get', `/classes/Counter?where=$&#123;JSON.stringify(&#123; url: &#123; '$in': entries &#125; &#125;)&#125;`)</span></span><br><span class="line"><span class="addition">+ Counter('get', `?where=$&#123;encodeURIComponent(JSON.stringify(&#123; url: &#123; '$in': entries &#125; &#125;))&#125;`)</span></span><br></pre></td></tr></table></figure>

<h3 id="设置中文缩进"><a href="#设置中文缩进" class="headerlink" title="设置中文缩进"></a>设置中文缩进</h3><p>中文撰写时习惯首行缩进，但是直接输入空格不能奏效，网上有教程可以设置自动缩进<code>2 em</code>，但是这样设置后还需要对不需要缩进的位置进行单独设置，同时自动缩进可能对排版不友好的文章不友好，可能在不该缩进的地方都给缩进了，所以我选择在写博文时手动在需要缩进的地方进行设置，即手动输入空格，此处将习惯的<code>space</code>即空格键输入换成<code>&amp;emsp;</code>或<code>&amp;#8195;</code>即可<sup id="fnref:11"><a href="#fn:11" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[markdown中实现首行缩进](https://blog.csdn.net/mountzf/article/details/51714763)
">[11]</span></a></sup>，输入两个即缩进两格，注意分号<code>;</code>不要漏掉，其他空格替换符如下：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">半方大的空白：   <span class="code">`&amp;ensp;`</span> or <span class="code">`&amp;#8194;`</span></span><br><span class="line">全方大的空白：   <span class="code">`&amp;emsp;`</span> or <span class="code">`&amp;#8195;`</span></span><br><span class="line">不断行的空白格： <span class="code">`&amp;nbsp;`</span> or <span class="code">`&amp;#160;`</span></span><br></pre></td></tr></table></figure>

<h3 id="静态代码压缩"><a href="#静态代码压缩" class="headerlink" title="静态代码压缩"></a>静态代码压缩</h3><p>为了让博客源码显得紧凑，也为了让网站加载速度变快，使用<code>gulp</code>对博客源码进行压缩。<sup id="fnref:12"><a href="#fn:12" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[gulp压缩源码](https://juejin.im/post/5dd2e898e51d45400206a466#heading-16)
">[12]</span></a></sup><br>1）安装<code>gulp</code>插件<br>安装<code>gulp</code>记得需要在全局环境下进行安装，不要只在博客根目录下的环境进行安装，否则会导致<code>gulp</code>无法正常执行。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install gulp --save  <span class="comment">#安装gulp</span></span><br></pre></td></tr></table></figure>
<p>2）安装功能模块<br>以下功能模块会在后续配置中使用，可以根据个人实际需要进行选择安装，一般建议<code>html</code>和<code>css</code>相关源码进行压缩，所以对应模块建议安装。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装功能模块</span></span><br><span class="line">npm install gulp-htmlclean gulp-htmlmin gulp-minify-css gulp-uglify gulp-imagemin --save</span><br><span class="line"><span class="comment"># 额外的功能模块</span></span><br><span class="line">npm install gulp-debug gulp-clean-css gulp-changed gulp-if gulp-plumber gulp-babel babel-preset-env del --save</span><br></pre></td></tr></table></figure>
<p>3）<code>gulpfile.js</code>配置<br>在博客根目录<code>../hexo</code>新建文件<code>gulpfile.js</code>，添加以下配置信息，可根据自身需要进行修改：</p>
<details>
<summary>点击查看具体代码</summary>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">"gulp"</span>);</span><br><span class="line"><span class="keyword">var</span> debug = <span class="built_in">require</span>(<span class="string">"gulp-debug"</span>);</span><br><span class="line"><span class="keyword">var</span> cleancss = <span class="built_in">require</span>(<span class="string">"gulp-clean-css"</span>); <span class="comment">//css压缩组件</span></span><br><span class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">"gulp-uglify"</span>); <span class="comment">//js压缩组件</span></span><br><span class="line"><span class="keyword">var</span> htmlmin = <span class="built_in">require</span>(<span class="string">"gulp-htmlmin"</span>); <span class="comment">//html压缩组件</span></span><br><span class="line"><span class="keyword">var</span> htmlclean = <span class="built_in">require</span>(<span class="string">"gulp-htmlclean"</span>); <span class="comment">//html清理组件</span></span><br><span class="line"><span class="keyword">var</span> imagemin = <span class="built_in">require</span>(<span class="string">"gulp-imagemin"</span>); <span class="comment">//图片压缩组件</span></span><br><span class="line"><span class="keyword">var</span> changed = <span class="built_in">require</span>(<span class="string">"gulp-changed"</span>); <span class="comment">//文件更改校验组件</span></span><br><span class="line"><span class="keyword">var</span> gulpif = <span class="built_in">require</span>(<span class="string">"gulp-if"</span>); <span class="comment">//任务 帮助调用组件</span></span><br><span class="line"><span class="keyword">var</span> plumber = <span class="built_in">require</span>(<span class="string">"gulp-plumber"</span>); <span class="comment">//容错组件（发生错误不跳出任务，并报出错误内容）</span></span><br><span class="line"><span class="keyword">var</span> isScriptAll = <span class="literal">true</span>; <span class="comment">//是否处理所有文件，(true|处理所有文件)(false|只处理有更改的文件)</span></span><br><span class="line"><span class="keyword">var</span> isDebug = <span class="literal">true</span>; <span class="comment">//是否调试显示 编译通过的文件</span></span><br><span class="line"><span class="keyword">var</span> gulpBabel = <span class="built_in">require</span>(<span class="string">"gulp-babel"</span>);</span><br><span class="line"><span class="keyword">var</span> es2015Preset = <span class="built_in">require</span>(<span class="string">"babel-preset-es2015"</span>);</span><br><span class="line"><span class="keyword">var</span> del = <span class="built_in">require</span>(<span class="string">"del"</span>);</span><br><span class="line"><span class="keyword">var</span> Hexo = <span class="built_in">require</span>(<span class="string">"hexo"</span>);</span><br><span class="line"><span class="keyword">var</span> hexo = <span class="keyword">new</span> Hexo(process.cwd(), &#123;&#125;); <span class="comment">// 初始化一个hexo对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 清除public文件夹</span></span><br><span class="line">gulp.task(<span class="string">"clean"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> del([<span class="string">"public/**/*"</span>]);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面几个跟hexo有关的操作，主要通过hexo.call()去执行，注意return</span></span><br><span class="line"><span class="comment">// 创建静态页面 （等同 hexo generate）</span></span><br><span class="line">gulp.task(<span class="string">"generate"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> hexo.init().then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> hexo</span><br><span class="line">      .call(<span class="string">"generate"</span>, &#123;</span><br><span class="line">        watch: <span class="literal">false</span></span><br><span class="line">      &#125;)</span><br><span class="line">      .then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hexo.exit();</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hexo.exit(err);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动Hexo服务器</span></span><br><span class="line">gulp.task(<span class="string">"server"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> hexo</span><br><span class="line">    .init()</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> hexo.call(<span class="string">"server"</span>, &#123;&#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(err);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 部署到服务器</span></span><br><span class="line">gulp.task(<span class="string">"deploy"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> hexo.init().then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> hexo</span><br><span class="line">      .call(<span class="string">"deploy"</span>, &#123;</span><br><span class="line">        watch: <span class="literal">false</span></span><br><span class="line">      &#125;)</span><br><span class="line">      .then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hexo.exit();</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hexo.exit(err);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩public目录下的js文件</span></span><br><span class="line">gulp.task(<span class="string">"compressJs"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp</span><br><span class="line">    .src([<span class="string">"./public/**/*.js"</span>, <span class="string">"!./public/libs/**"</span>]) <span class="comment">//排除的js</span></span><br><span class="line">    .pipe(gulpif(!isScriptAll, changed(<span class="string">"./public"</span>)))</span><br><span class="line">    .pipe(gulpif(isDebug, debug(&#123; <span class="attr">title</span>: <span class="string">"Compress JS:"</span> &#125;)))</span><br><span class="line">    .pipe(plumber())</span><br><span class="line">    .pipe(</span><br><span class="line">      gulpBabel(&#123;</span><br><span class="line">        presets: [es2015Preset] <span class="comment">// es5检查机制</span></span><br><span class="line">      &#125;)</span><br><span class="line">    )</span><br><span class="line">    .pipe(uglify()) <span class="comment">//调用压缩组件方法uglify(),对合并的文件进行压缩</span></span><br><span class="line">    .pipe(gulp.dest(<span class="string">"./public"</span>)); <span class="comment">//输出到目标目录</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩public目录下的css文件</span></span><br><span class="line">gulp.task(<span class="string">"compressCss"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> option = &#123;</span><br><span class="line">    rebase: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">//advanced: true,               //类型：Boolean 默认：true [是否开启高级优化（合并选择器等）]</span></span><br><span class="line">    compatibility: <span class="string">"ie7"</span> <span class="comment">//保留ie7及以下兼容写法 类型：String 默认：''or'*' [启用兼容模式； 'ie7'：IE7兼容模式，'ie8'：IE8兼容模式，'*'：IE9+兼容模式]</span></span><br><span class="line">    <span class="comment">//keepBreaks: true,             //类型：Boolean 默认：false [是否保留换行]</span></span><br><span class="line">    <span class="comment">//keepSpecialComments: '*'      //保留所有特殊前缀 当你用autoprefixer生成的浏览器前缀，如果不加这个参数，有可能将会删除你的部分前缀</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> gulp</span><br><span class="line">    .src([<span class="string">"./public/**/*.css"</span>, <span class="string">"!./public/**/*.min.css"</span>]) <span class="comment">//排除的css</span></span><br><span class="line">    .pipe(gulpif(!isScriptAll, changed(<span class="string">"./public"</span>)))</span><br><span class="line">    .pipe(gulpif(isDebug, debug(&#123; <span class="attr">title</span>: <span class="string">"Compress CSS:"</span> &#125;)))</span><br><span class="line">    .pipe(plumber())</span><br><span class="line">    .pipe(cleancss(option))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">"./public"</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩public目录下的html文件</span></span><br><span class="line">gulp.task(<span class="string">"compressHtml"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> cleanOptions = &#123;</span><br><span class="line">    protect: <span class="regexp">/&lt;\!--%fooTemplate\b.*?%--&gt;/g</span>, <span class="comment">//忽略处理</span></span><br><span class="line">    unprotect: <span class="regexp">/&lt;script [^&gt;]*\btype="text\/x-handlebars-template"[\s\S]+?&lt;\/script&gt;/gi</span> <span class="comment">//特殊处理</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">var</span> minOption = &#123;</span><br><span class="line">    collapseWhitespace: <span class="literal">true</span>, <span class="comment">//压缩HTML</span></span><br><span class="line">    collapseBooleanAttributes: <span class="literal">true</span>, <span class="comment">//省略布尔属性的值  &lt;input checked="true"/&gt; ==&gt; &lt;input /&gt;</span></span><br><span class="line">    removeEmptyAttributes: <span class="literal">true</span>, <span class="comment">//删除所有空格作属性值    &lt;input id="" /&gt; ==&gt; &lt;input /&gt;</span></span><br><span class="line">    removeScriptTypeAttributes: <span class="literal">true</span>, <span class="comment">//删除&lt;script&gt;的type="text/javascript"</span></span><br><span class="line">    removeStyleLinkTypeAttributes: <span class="literal">true</span>, <span class="comment">//删除&lt;style&gt;和&lt;link&gt;的type="text/css"</span></span><br><span class="line">    removeComments: <span class="literal">true</span>, <span class="comment">//清除HTML注释</span></span><br><span class="line">    minifyJS: <span class="literal">true</span>, <span class="comment">//压缩页面JS</span></span><br><span class="line">    minifyCSS: <span class="literal">true</span>, <span class="comment">//压缩页面CSS</span></span><br><span class="line">    minifyURLs: <span class="literal">true</span> <span class="comment">//替换页面URL</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> gulp</span><br><span class="line">    .src(<span class="string">"./public/**/*.html"</span>)</span><br><span class="line">    .pipe(gulpif(isDebug, debug(&#123; <span class="attr">title</span>: <span class="string">"Compress HTML:"</span> &#125;)))</span><br><span class="line">    .pipe(plumber())</span><br><span class="line">    .pipe(htmlclean(cleanOptions))</span><br><span class="line">    .pipe(htmlmin(minOption))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">"./public"</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩 public/uploads 目录内图片</span></span><br><span class="line">gulp.task(<span class="string">"compressImage"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> option = &#123;</span><br><span class="line">    optimizationLevel: <span class="number">5</span>, <span class="comment">//类型：Number  默认：3  取值范围：0-7（优化等级）</span></span><br><span class="line">    progressive: <span class="literal">true</span>, <span class="comment">//类型：Boolean 默认：false 无损压缩jpg图片</span></span><br><span class="line">    interlaced: <span class="literal">false</span>, <span class="comment">//类型：Boolean 默认：false 隔行扫描gif进行渲染</span></span><br><span class="line">    multipass: <span class="literal">false</span> <span class="comment">//类型：Boolean 默认：false 多次优化svg直到完全优化</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> gulp</span><br><span class="line">    .src(<span class="string">"./public/medias/**/*.*"</span>)</span><br><span class="line">    .pipe(gulpif(!isScriptAll, changed(<span class="string">"./public/medias"</span>)))</span><br><span class="line">    .pipe(gulpif(isDebug, debug(&#123; <span class="attr">title</span>: <span class="string">"Compress Images:"</span> &#125;)))</span><br><span class="line">    .pipe(plumber())</span><br><span class="line">    .pipe(imagemin(option))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">"./public"</span>));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 执行顺序： 清除public目录 -&gt; 产生原始博客内容 -&gt; 执行压缩混淆 -&gt; 部署到服务器</span></span><br><span class="line">gulp.task(</span><br><span class="line">  <span class="string">"build"</span>,</span><br><span class="line">  gulp.series(</span><br><span class="line">    <span class="string">"clean"</span>,</span><br><span class="line">    <span class="string">"generate"</span>,</span><br><span class="line">    <span class="string">"compressHtml"</span>,</span><br><span class="line">    <span class="string">"compressCss"</span>,</span><br><span class="line">    <span class="string">"compressJs"</span>,</span><br><span class="line">    <span class="string">"compressImage"</span>,</span><br><span class="line">    gulp.parallel(<span class="string">"deploy"</span>)</span><br><span class="line">  )</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认任务</span></span><br><span class="line">gulp.task(</span><br><span class="line">  <span class="string">"default"</span>,</span><br><span class="line">  gulp.series(</span><br><span class="line">    <span class="string">"clean"</span>,</span><br><span class="line">    <span class="string">"generate"</span>,</span><br><span class="line">    gulp.parallel(<span class="string">"compressHtml"</span>, <span class="string">"compressCss"</span>, <span class="string">"compressImage"</span>, <span class="string">"compressJs"</span>)</span><br><span class="line">  )</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
</details>
4）部署
完成配置修改后，在博客根目录下打开`git bash`，按照[配置修改后更新部署即可](#Update)。
5）Html/JS压缩及还原
经过压缩的源码想再编辑时需要还原为原来的形式，使用[TOOL](https://tool.lu/html/)可以快速还原前端代码，方便二次编辑。

<h3 id="友情链接"><a href="#友情链接" class="headerlink" title="友情链接"></a>友情链接</h3><p>在<code>Next.Mist</code>主题下，友情链接默认显示在<code>站点概览</code>下方，在主题配置文件<code>../next/_config.yml</code>中找到<code>Blog rolls</code>设置块，其中<code>links_settings</code>是对友链的样式进行配置，<code>links</code>下按照以下格式添加即可添加友情链接：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">林深时见璐:</span> <span class="string">https://linwhitehat.github.io/</span></span><br></pre></td></tr></table></figure>

<h3 id="添加音乐"><a href="#添加音乐" class="headerlink" title="添加音乐"></a>添加音乐</h3><p>在分享博客时，一些文艺类型的博客可能适合添加背景音乐，既烘托文章意蕴，也让阅读者能欣赏雅乐。博客撰写是使用markdown，而markdown对html语法的支持是天然的，而为了在博客中样式更为美观，需要使用css进行一定设置，更多样式可参照此博客<sup id="fnref:13"><a href="#fn:13" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[markdown插入音频](https://yuanlichenai.cn/2019/03/03/music/)
">[13]</span></a></sup><sup id="fnref:14"><a href="#fn:14" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[博客插入音频](https://zenreal.github.io/posts/61856/)
">[14]</span></a></sup>，博文中直接写入以下代码（外链不可生成情况可能无法播放）：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">iframe</span> </span><br><span class="line">    frameborder="no" border="0" marginwidth="0" </span><br><span class="line">    marginheight="0" width=330 height=86 </span><br><span class="line">    src="//music.163.com/outchain/player?type=2&amp;id=461544312&amp;auto=0&amp;height=66"&gt;</span><br><span class="line">&lt;/iframe&gt;</span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<iframe 
    frameborder="no" border="0" marginwidth="0" 
    marginheight="0" width=330 height=86 
    src="//music.163.com/outchain/player?type=2&id=461544312&auto=0&height=66">
</iframe>

<h3 id="博客发表按时间进行文件目录存放"><a href="#博客发表按时间进行文件目录存放" class="headerlink" title="博客发表按时间进行文件目录存放"></a>博客发表按时间进行文件目录存放</h3><p>默认情况下发表博客都会存放在<code>_post</code>目录下，刚开始时博客较少比较容易查看，但是随着时间积累，博客增多，因此建议按照时间进行存放发表的博客，根据发表时间查找对应博客，对于后续更新修改比较方便，修改位置是<code>../hexo/_comfig.yml</code>，具体设置如下：</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="deletion">- new_post_name: :title.md</span></span><br><span class="line"><span class="addition">+ new_post_name: :year/:month/:day/:title.md</span></span><br></pre></td></tr></table></figure>
<p>而发布文章之后，希望同样按照时间子目录存储，可以设置如下：</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="deletion">- permalink: :title.html</span></span><br><span class="line"><span class="addition">+ permalink: :year/:month/:day/:title.html</span></span><br></pre></td></tr></table></figure>

<h3 id="博客菜单栏页面存在“安全问题”"><a href="#博客菜单栏页面存在“安全问题”" class="headerlink" title="博客菜单栏页面存在“安全问题”"></a>博客菜单栏页面存在“安全问题”</h3><p>Q：当访问博客菜单栏某页面，chrome浏览器显示“访问存在安全问题： provisional headers are shown”，如我的<code>About</code>页面，但是证书、https都是正常的，在使用 Github Page 部署时也强制全站https部署，这个安全问题为何会出现？<br>A：问题存在于使用外链资源，一般是图片、音视频等，可以将资源放到自身博客目录下引用，便不存在chrome的安全警告了。而这个问题引起安全警告的本质是引用外链产生的跨域请求被拦截导致的。<sup id="fnref:26"><a href="#fn:26" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[provisional headers are shown 知多少](https://juejin.im/post/5c00980751882518805add83)">[26]</span></a></sup></p>
<h3 id="博客页脚样式修改"><a href="#博客页脚样式修改" class="headerlink" title="博客页脚样式修改"></a>博客页脚样式修改</h3><p>在<code>../next/source/css/_schemes/Mist</code>目录下找到配置文件<code>_layout.styl</code>，定位到<code>Footer</code>，修改<code>.footer-inner</code>如下:</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">.footer-inner &#123;</span><br><span class="line"><span class="deletion">- text-align: left;</span></span><br><span class="line"><span class="addition">+ text-align: center;</span></span><br></pre></td></tr></table></figure>

<h2 id="主题自定义设计思路"><a href="#主题自定义设计思路" class="headerlink" title="主题自定义设计思路"></a>主题自定义设计思路</h2><p>Next主题本身有不少默认配置，但是如果对前端设计有更多想法可以实现主题自定义即“魔改”，要实现主题自定义可以对任意内容做修改，而写这篇博文是想总结自定义的思路，因为Next的版本更替会有配置修改变化，同时要实现自定义就需要对博客的配置全貌了解。在<code>../hexo/source/_data/</code>目录下可以自建自定义样式文件，在<code>../next/_config.yml</code>主题配置文件中<code>custom_file_path</code>即对应自定义配置文件信息，而调试的过程可以在浏览器的开发者模式下进行调试<sup id="fnref:15"><a href="#fn:15" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[学会使用浏览器F12定位样式](https://bestzuo.cn/posts/blog-establish.html#%E5%AD%A6%E4%BC%9A%E4%BD%BF%E7%94%A8%E6%B5%8F%E8%A7%88%E5%99%A8F12%E5%AE%9A%E4%BD%8D%E6%A0%B7%E5%BC%8F)
">[15]</span></a></sup>。</p>
<h3 id="自定义站点LOGO"><a href="#自定义站点LOGO" class="headerlink" title="自定义站点LOGO"></a>自定义站点LOGO</h3><p>默认的Hexo博客使用的是Hexo的Logo，在chrome浏览器访问博客时，标签页的图标即默认Logo，而Hexo博客本身支持使用自定义的图标，修改站点Logo步骤如下：</p>
<ol>
<li>选取合适的图片，制作favicon图标，使用<a href="http://www.bitbug.net/" target="_blank" rel="noopener external nofollow noreferrer">比特虫</a><sup id="fnref:16"><a href="#fn:16" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[自定义博客图标](https://wangxiaoyu-go.github.io/2018/11/18/change-theme-favicon/)
">[16]</span></a></sup>生成<code>ico</code>格式文件；</li>
<li>存储自定义的<code>ico</code>图片文件到<code>../next/source/images</code>目录下；</li>
<li>修改博客主题配置文件<code>../next/_config.yml</code>，找到<code>favicon</code>选项，修改如下：</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">small:</span> <span class="string">/images/favicon-16x16-next.png</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">medium:</span> <span class="string">/images/favicon-32x32-next.png</span></span><br><span class="line"><span class="string">+</span> <span class="attr">small:</span> <span class="string">/images/new-favicon-16x16.ico</span></span><br><span class="line"><span class="string">+</span> <span class="attr">medium:</span> <span class="string">/images/new-favicon-32x32.ico</span></span><br></pre></td></tr></table></figure>

<h3 id="自定义404"><a href="#自定义404" class="headerlink" title="自定义404"></a>自定义404</h3><p>在主题配置文件中添加<code>404</code>页面，有两种方式添加<code>404</code>页面，一种是基于markdown解析，一种是基于html解析，网络教程还提供更多<code>javascript</code>及<code>css</code>样式进行自定义，使页面更加美观，可参照<sup id="fnref:17"><a href="#fn:17" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Hexo+Next个人博客主题优化](https://www.jianshu.com/p/efbeddc5eb19)
">[17]</span></a></sup><sup id="fnref:18"><a href="#fn:18" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[next主题下添加404页面](https://blog.yleao.com/2018/0901/hexo-next%E4%B8%BB%E9%A2%98%E4%B8%8B%E7%9A%84%E7%BE%8E%E5%8C%96.html#next%E4%B8%BB%E9%A2%98%E4%B8%8B%E6%B7%BB%E5%8A%A0404%E9%A1%B5%E9%9D%A2)
">[18]</span></a></sup><sup id="fnref:19"><a href="#fn:19" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Hexo-框架下404页面的设置](https://zejinwang.com/2019/06/25/Hexo-%E6%A1%86%E6%9E%B6%E4%B8%8B404%E9%A1%B5%E9%9D%A2%E7%9A%84%E8%AE%BE%E7%BD%AE/)
">[19]</span></a></sup>。</p>
<ol>
<li>markdown解析<br>与生成<code>归档</code>、<code>分类</code>的方法相同，可以在主题配置文件<code>../next/_config.yml</code>中找到<code>menu</code>，添加：<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">commonweal:</span> <span class="string">/404/</span> <span class="string">||</span> <span class="string">heartbeat</span></span><br></pre></td></tr></table></figure>
在<code>../hexo/source/</code>目录下新建<code>404</code>目录，目录下新建<code>index.md</code>，或者在博客根目录打开<code>git bash</code>，执行：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page <span class="string">"404"</span></span><br></pre></td></tr></table></figure>
在<code>../source/404/index.md</code>中添加以下内容：<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 404 Not Found：该页无法显示</span><br><span class="line">toc: false</span><br><span class="line">comments: false</span><br><span class="line">permalink: /404</span><br><span class="line">---</span><br><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="code">    &lt;head&gt;</span></span><br><span class="line"><span class="code">         &lt;meta charset="UTF-8" /&gt;</span></span><br><span class="line"><span class="code">         &lt;title&gt;404&lt;/title&gt;                                                                                                                                        </span></span><br><span class="line"><span class="code">    &lt;/head&gt;</span></span><br><span class="line"><span class="code">    &lt;body&gt;</span></span><br><span class="line"><span class="code">         &lt;script type="text/javascript" src="//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js" homePageName="返回首页" homePageUrl="https://www.nickyam.com"&gt;&lt;/script&gt;</span></span><br><span class="line">true<span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li>
<li><span id="404">html解析</span><br>不使用默认的<code>markdown</code>解析404页面，而是自定义一个独立页面，使用腾讯公益作为<code>404</code>页面内容，同时加上<code>返回博客</code>字样及跳转。<br>在<code>hexo/source/</code>下新建<code>404.html</code>，需要避免markdown渲染，在<code>404.html</code>开头加上<code>layout: false</code>，html内容如下:<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">layout: false</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>404<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> <span class="attr">homePageUrl</span>=<span class="string">"/"</span> <span class="attr">homePageName</span>=<span class="string">"返回博客"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="自定义字体"><a href="#自定义字体" class="headerlink" title="自定义字体"></a>自定义字体</h3><h4 id="字体默认配置"><a href="#字体默认配置" class="headerlink" title="字体默认配置"></a>字体默认配置</h4><p>博客默认的字体可能看起来不美观，可以在博客主题配置相关文件<code>../next/source/css/_variables/base.styl</code>中查看默认的字体配置信息如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$font-family-chinese      &#x3D; &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;;</span><br><span class="line"></span><br><span class="line">$font-family-base         &#x3D; $font-family-chinese, sans-serif;</span><br><span class="line">$font-family-base         &#x3D; get_font_family(&#39;global&#39;), $font-family-chinese, sans-serif if get_font_family(&#39;global&#39;);</span><br><span class="line"></span><br><span class="line">$font-family-logo         &#x3D; $font-family-base;</span><br><span class="line">$font-family-logo         &#x3D; get_font_family(&#39;title&#39;), $font-family-base if get_font_family(&#39;title&#39;);</span><br><span class="line"></span><br><span class="line">$font-family-headings     &#x3D; $font-family-base;</span><br><span class="line">$font-family-headings     &#x3D; get_font_family(&#39;headings&#39;), $font-family-base if get_font_family(&#39;headings&#39;);</span><br><span class="line"></span><br><span class="line">$font-family-posts        &#x3D; $font-family-base;</span><br><span class="line">$font-family-posts        &#x3D; get_font_family(&#39;posts&#39;), $font-family-base if get_font_family(&#39;posts&#39;);</span><br><span class="line"></span><br><span class="line">$font-family-monospace    &#x3D; consolas, Menlo, monospace, $font-family-chinese;</span><br><span class="line">$font-family-monospace    &#x3D; get_font_family(&#39;codes&#39;), consolas, Menlo, monospace, $font-family-chinese if get_font_family(&#39;codes&#39;);</span><br><span class="line"></span><br><span class="line">$font-family-icons        &#x3D; &#39;FontAwesome&#39;;</span><br></pre></td></tr></table></figure>

<h4 id="使用Googlr-Fonts字体"><a href="#使用Googlr-Fonts字体" class="headerlink" title="使用Googlr Fonts字体"></a>使用Googlr Fonts字体</h4><p>通过在线加载字体的方式实现博客字体自定义（也可以选择本地字体，可见网上教程），<a href="https://fonts.google.com/" target="_blank" rel="noopener external nofollow noreferrer">Google Fonts</a>提供的英文字体质量很高，同时近几年也开始提供多种中文字体（也有其他语言字体），尽管样式有限，但是质量还是不错的。Next主题中带有字体修改配置，在主题配置文件<code>../next/_config.yml</code>中找到<code>font</code>，可看到默认设置：</p>
<details>
<summary>点击查看具体代码</summary>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">font:</span></span><br><span class="line">  <span class="comment"># Use custom fonts families or not.</span></span><br><span class="line">  <span class="comment"># Depended options: `external` and `family`.</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Uri of fonts host, e.g. //fonts.googleapis.com (Default).</span></span><br><span class="line">  <span class="attr">host:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font options:</span></span><br><span class="line">  <span class="comment"># `external: true` will load this font family from `host` above.</span></span><br><span class="line">  <span class="comment"># `family: Times New Roman`. Without any quotes.</span></span><br><span class="line">  <span class="comment"># `size: x.x`. Use `em` as unit. Default: 1 (16px)</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Global font settings used for all elements inside &lt;body&gt;.</span></span><br><span class="line">  <span class="attr">global:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">family:</span> <span class="string">Lato</span></span><br><span class="line">    <span class="attr">size:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font settings for site title (.site-title).</span></span><br><span class="line">  <span class="attr">title:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">family:</span></span><br><span class="line">    <span class="attr">size:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font settings for headlines (&lt;h1&gt; to &lt;h6&gt;).</span></span><br><span class="line">  <span class="attr">headings:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">family:</span></span><br><span class="line">    <span class="attr">size:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font settings for posts (.post-body).</span></span><br><span class="line">  <span class="attr">posts:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">family:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font settings for &lt;code&gt; and code blocks.</span></span><br><span class="line">  <span class="attr">codes:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">family:</span></span><br></pre></td></tr></table></figure>
</details>
修改配置步骤如下:
1. 将`enable`选项修改为`true`，`host`可修改为国内镜像`fonts.loli.net`；
2. `global`、`title`、`posts`等选项是对具体项的字体设置，建议参考以下设置：

<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="bullet">- </span>global: 网站全局字体设置，建议填写英文字体</span><br><span class="line"><span class="bullet">- </span>其他类型可根据个人喜好</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>设置博客中文字体</li>
</ol>
<p>在<code>../next/source/css/_variables/base.styl</code>中修改默认中文字体，例如我选择中文字体为<code>Noto Serif SC</code>，修改如下：</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">// Font families.</span><br><span class="line"><span class="deletion">-$font-family-chinese      = "PingFang SC", "Microsoft YaHei"</span></span><br><span class="line"><span class="addition">+$font-family-chinese      = "Noto Serif SC", "PingFang SC", "Microsoft YaHei"</span></span><br></pre></td></tr></table></figure>
<ol start="4">
<li>加载字体设置</li>
</ol>
<p>在博客中载入设置的字体，在自定义文件<code>../hexo/source/_data/head.swig</code>中加入以下内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;link href&#x3D;&quot;https:&#x2F;&#x2F;fonts.googleapis.com&#x2F;css?family&#x3D;Noto+Serif+SC:400,500,700&amp;display&#x3D;swap&amp;subset&#x3D;chinese-simplified&quot; rel&#x3D;&quot;stylesheet&quot;&gt;</span><br></pre></td></tr></table></figure>
<p>加入的<code>&lt;link&gt;</code>标签内容在Google Fonts中生成，选中一款字体后，点<code>+</code>号选择，在底部会有一个选项框，点击一下会弹出字体设置框，点击<code>CUSTOMIZE</code>，对字体进行自定义设置，然后在<code>EMBED</code>中可以看到自动生成的<code>&lt;link&gt;</code>代码，将其添加到上述对应位置，其中域名<code>fonts.googleapis.com</code>可修改为国内镜像域名<code>fonts.loli.net</code>。</p>
<h3 id="自定义超链接样式"><a href="#自定义超链接样式" class="headerlink" title="自定义超链接样式"></a>自定义超链接样式</h3><p>在自定义样式文件<code>../hexo/source/_data/styles.styl</code>中添加以下内容，主要是颜色和下划线的设置，其他可以根据个人喜欢修改（颜色可参照<a href="https://tool.oschina.net/commons?type=3" target="_blank" rel="noopener external nofollow noreferrer">RGB</a>）<sup id="fnref:20"><a href="#fn:20" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[CSS样式美化](https://www.libinx.com/2017/2017-03-12-hexo-next-beautify/)
">[20]</span></a></sup>：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// 超链接样式</span><br><span class="line"><span class="selector-class">.post-body</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">32</span>, <span class="number">178</span>, <span class="number">170</span>);</span><br><span class="line">    <span class="attribute">border-bottom</span>: none;</span><br><span class="line">    &amp;:hover &#123;</span><br><span class="line">      <span class="selector-tag">color</span>: <span class="selector-tag">rgb</span>(30, 144, 255);</span><br><span class="line">      <span class="selector-tag">text-decoration</span>: <span class="selector-tag">underline</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.posts-expand</span> <span class="selector-class">.post-meta</span> <span class="selector-tag">a</span>, <span class="selector-class">.post-copyright</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">border-bottom</span>: none;</span><br><span class="line">    &amp;:hover &#123;</span><br><span class="line">      <span class="selector-tag">color</span>: <span class="selector-tag">rgb</span>(30, 144, 255);</span><br><span class="line">      <span class="selector-tag">text-decoration</span>: <span class="selector-tag">underline</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">border-bottom-color</span>: <span class="built_in">rgb</span>(<span class="number">80</span>, <span class="number">115</span>, <span class="number">184</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">30</span>, <span class="number">144</span>, <span class="number">255</span>);</span><br><span class="line">    <span class="attribute">border-bottom-color</span>: <span class="built_in">rgb</span>(<span class="number">30</span>, <span class="number">144</span>, <span class="number">255</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="自定义独立页面"><a href="#自定义独立页面" class="headerlink" title="自定义独立页面"></a>自定义独立页面</h3><p>相信在<a href="#404">404</a>页面部分，已经初步了解了独立页面的设计，在博客中可以自定义设计很多独立页面，可以加上自定义的css样式和javascript脚本渲染，比如加入相册、视频等，而要做到独立站点且渲染效果和自己设计的一致，最重要的是<code>避免博客默认的markdown渲染</code><sup id="fnref:21"><a href="#fn:21" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[hexo创建404页面](http://www.xnian.top/2017/11/21/hexo%E5%88%9B%E5%BB%BA404%E9%A1%B5%E9%9D%A2/)
">[21]</span></a></sup><sup id="fnref:22"><a href="#fn:22" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[在 Hexo 博客中创建自定义页面](https://www.dazhuanlan.com/2019/10/24/5db1ac54ce05b/)
">[22]</span></a></sup>。避免渲染的方式有很多，网上教程会介绍在html页面起始加上<code>layout: false</code>，但我更推荐另一种方法即<code>skip_render</code>参数设置，这种方法合适各种不需要博客默认解析的配置文件，具体操作是在博客根目录的配置文件<code>../hexo/_config.yml</code>找到<code>skip_render</code>，做出以下修改，<code>DIY_folder</code>即自定义独立页面所在文件夹，<code>**</code>表示该文件夹下所有文件：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">skip_render:</span> <span class="string">[README.md,DIY_folder/**]</span></span><br></pre></td></tr></table></figure>

<h3 id="自定义个人主页"><a href="#自定义个人主页" class="headerlink" title="自定义个人主页"></a>自定义个人主页</h3><p>在正常 Hexo 博客搭建后，使用 Github Page 部署，默认的博客首页即<code>name.github.io</code>对应的页面即博客首页，效果见<a href="https://linwhitehat.github.io/">个人首页</a>。而如果想域名指向自定义的个人首页，由首页访问博客链接跳转。就像古代的家庭，进门会有个门面，转而才见黄金屋。这样博客整体会让人感觉更完整，在此也推荐默认主题便带有这种美感的网站框架<a href="https://gohugo.io/" target="_blank" rel="noopener external nofollow noreferrer">Hugo</a>，基于此的博客可参考友链中的<code>reuixiy</code>和<code>荷戟独彷徨</code>，本部分教程参考<sup id="fnref:24"><a href="#fn:24" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[自定义Hexo博客首页](http://sugarac.com/2017/01/01/customize-Hexo-blog-homepage/)
">[24]</span></a></sup><sup id="fnref:25"><a href="#fn:25" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Hexo自定义页面做首页](https://www.jianshu.com/p/80e0e1058bda)
">[25]</span></a></sup>并根据实际情况修改。</p>
<p>言归正传，使用 Hexo 搭建博客后，要修改博客域名执行的首页，主要包含两部分：</p>
<ol>
<li>建立自定义主页；</li>
<li>迁移博客到新地址。</li>
</ol>
<h4 id="建立自定义主页"><a href="#建立自定义主页" class="headerlink" title="建立自定义主页"></a>建立自定义主页</h4><p>新建<code>index.html</code>文件，内容包含博客的跳转如<code>&lt;a href=&quot;https://linwhitehat.github.io/Blog&quot; target=&quot;_self&quot;&gt;Blog&lt;/a&gt;</code>，可以自定义添加js内容，作为主页展示。</p>
<h4 id="迁移博客"><a href="#迁移博客" class="headerlink" title="迁移博客"></a>迁移博客</h4><ol>
<li>在 GitHub 中新建仓库，我命名为<code>Blog</code>，初始化仓库完成在<code>Setting</code>中配置<code>Github Page</code>；</li>
<li>修改博客配置<code>../hexo/_config.yml</code>中的<code>URL</code>和<code>Deployment</code>如下：</li>
</ol>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"># URL</span><br><span class="line"><span class="deletion">- url: https://linwhitehat.github.io</span></span><br><span class="line"><span class="deletion">- root: /</span></span><br><span class="line"><span class="addition">+ url: https://linwhitehat.github.io/Blog</span></span><br><span class="line"><span class="addition">+ root: /Blog/</span></span><br><span class="line"></span><br><span class="line"># Deployment</span><br><span class="line">deploy:</span><br><span class="line"><span class="deletion">- repo:  https://github.com/linwhitehat/linwhitehat.github.io</span></span><br><span class="line"><span class="addition">+ repo: https://github.com/linwhitehat/Blog</span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li>将 GitHub 原先的博客仓库<code>name.github.io</code>清空，将自定义首页的<code>html</code>文件及修饰文件都上传到当前仓库<code>name.github.io</code>中；</li>
<li>在博客根目录打开<code>git bash</code>，执行<a href="#Update">博客更新部署</a>。</li>
</ol>
<p><strong>注意：</strong><br>迁移博客内容到新地址之后，使用相对地址引用博客图片及资源需要修改为正确路径，例如我原先路径为<code>linwhitehat.github.com/</code>修改后显示为<code>linwhitehat.github.com/Blog</code>，在本地即<code>/</code>对应修改后路径应为<code>/Blog/</code>，否则将不会正常显示。</p>
<h3 id="配置修改后更新部署"><a href="#配置修改后更新部署" class="headerlink" title="配置修改后更新部署"></a><span id="Update">配置修改后更新部署</span></h3><p>输入以下命令完成每次更新：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean <span class="comment"># 涉及配置文件修改</span></span><br><span class="line">hexo g</span><br><span class="line">gulp</span><br><span class="line">gulp build</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>这篇博客基于hexo和next初始配置完成的情况对博客进行主题功能和外观的优化，撰写初衷是将自身搭建博客进行记录，因为Hexo主题更新频繁，不同版本之间的配置处理并不完全一致，根据已有的参考需要进行实际优化处理，同时也对Hexo结构了解更深刻，希望将来能更多的自定义实现渲染效果的设计，搭建更自主化的博客。</p>
<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.jianshu.com/p/78c218f9d1e7" target="_blank" rel="noopener external nofollow noreferrer">设置阅读全文</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://hexo.io/zh-cn/docs/front-matter.html" target="_blank" rel="noopener external nofollow noreferrer">分类二级目录</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://wangjiezhe.com/posts/2018-10-29-Hexo-NexT-3/" target="_blank" rel="noopener external nofollow noreferrer">评论系统</a><a href="#fnref:3" rev="footnote"> ↩</a></span></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">4.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://blog.singee.me/2017/12/07/mist-img-center/" target="_blank" rel="noopener external nofollow noreferrer">图片居中设置</a><a href="#fnref:4" rev="footnote"> ↩</a></span></li><li id="fn:5"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">5.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://guanqr.com/study/blog/hexo-theme-next-customization/" target="_blank" rel="noopener">插入脚注</a><a href="#fnref:5" rev="footnote"> ↩</a></span></li><li id="fn:6"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">6.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://benzblog.site/2019-07-12-HexoTricks/" target="_blank" rel="noopener external nofollow noreferrer">注脚选择</a><a href="#fnref:6" rev="footnote"> ↩</a></span></li><li id="fn:7"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">7.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://blog.bill.moe/hexo-theme-next-config-optimization/" target="_blank" rel="noopener external nofollow noreferrer">分割线样式修改</a><a href="#fnref:7" rev="footnote"> ↩</a></span></li><li id="fn:8"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">8.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="http://eternalzttz.com/hexo-next.html" target="_blank" rel="noopener external nofollow noreferrer">页脚显示博客运行时间</a><a href="#fnref:8" rev="footnote"> ↩</a></span></li><li id="fn:9"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">9.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://yunhao.space/2018/06/27/hexo-leancloud-plugin-installation-tutor/" target="_blank" rel="noopener">部署LeanCloud显示阅读数量</a><a href="#fnref:9" rev="footnote"> ↩</a></span></li><li id="fn:10"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">10.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://wangyi.blog/2019/12/24/Next%E4%B8%BB%E9%A2%98%E6%97%A0%E6%B3%95%E8%8E%B7%E5%8F%96Leancloud%E9%98%85%E8%AF%BB%E6%AC%A1%E6%95%B0%E7%9A%84%E9%97%AE%E9%A2%98/" target="_blank" rel="noopener external nofollow noreferrer">Next主题无法获取Leancloud阅读次数的问题</a><a href="#fnref:10" rev="footnote"> ↩</a></span></li><li id="fn:11"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">11.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://blog.csdn.net/mountzf/article/details/51714763" target="_blank" rel="noopener external nofollow noreferrer">markdown中实现首行缩进</a><a href="#fnref:11" rev="footnote"> ↩</a></span></li><li id="fn:12"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">12.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://juejin.im/post/5dd2e898e51d45400206a466#heading-16" target="_blank" rel="noopener external nofollow noreferrer">gulp压缩源码</a><a href="#fnref:12" rev="footnote"> ↩</a></span></li><li id="fn:13"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">13.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://yuanlichenai.cn/2019/03/03/music/" target="_blank" rel="noopener external nofollow noreferrer">markdown插入音频</a><a href="#fnref:13" rev="footnote"> ↩</a></span></li><li id="fn:14"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">14.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://zenreal.github.io/posts/61856/" target="_blank" rel="noopener external nofollow noreferrer">博客插入音频</a><a href="#fnref:14" rev="footnote"> ↩</a></span></li><li id="fn:15"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">15.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://bestzuo.cn/posts/blog-establish.html#%E5%AD%A6%E4%BC%9A%E4%BD%BF%E7%94%A8%E6%B5%8F%E8%A7%88%E5%99%A8F12%E5%AE%9A%E4%BD%8D%E6%A0%B7%E5%BC%8F" target="_blank" rel="noopener">学会使用浏览器F12定位样式</a><a href="#fnref:15" rev="footnote"> ↩</a></span></li><li id="fn:16"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">16.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://wangxiaoyu-go.github.io/2018/11/18/change-theme-favicon/" target="_blank" rel="noopener external nofollow noreferrer">自定义博客图标</a><a href="#fnref:16" rev="footnote"> ↩</a></span></li><li id="fn:17"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">17.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.jianshu.com/p/efbeddc5eb19" target="_blank" rel="noopener external nofollow noreferrer">Hexo+Next个人博客主题优化</a><a href="#fnref:17" rev="footnote"> ↩</a></span></li><li id="fn:18"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">18.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://blog.yleao.com/2018/0901/hexo-next%E4%B8%BB%E9%A2%98%E4%B8%8B%E7%9A%84%E7%BE%8E%E5%8C%96.html#next%E4%B8%BB%E9%A2%98%E4%B8%8B%E6%B7%BB%E5%8A%A0404%E9%A1%B5%E9%9D%A2" target="_blank" rel="noopener external nofollow noreferrer">next主题下添加404页面</a><a href="#fnref:18" rev="footnote"> ↩</a></span></li><li id="fn:19"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">19.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://zejinwang.com/2019/06/25/Hexo-%E6%A1%86%E6%9E%B6%E4%B8%8B404%E9%A1%B5%E9%9D%A2%E7%9A%84%E8%AE%BE%E7%BD%AE/" target="_blank" rel="noopener external nofollow noreferrer">Hexo-框架下404页面的设置</a><a href="#fnref:19" rev="footnote"> ↩</a></span></li><li id="fn:20"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">20.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.libinx.com/2017/2017-03-12-hexo-next-beautify/" target="_blank" rel="noopener external nofollow noreferrer">CSS样式美化</a><a href="#fnref:20" rev="footnote"> ↩</a></span></li><li id="fn:21"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">21.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="http://www.xnian.top/2017/11/21/hexo%E5%88%9B%E5%BB%BA404%E9%A1%B5%E9%9D%A2/" target="_blank" rel="noopener external nofollow noreferrer">hexo创建404页面</a><a href="#fnref:21" rev="footnote"> ↩</a></span></li><li id="fn:22"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">22.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.dazhuanlan.com/2019/10/24/5db1ac54ce05b/" target="_blank" rel="noopener external nofollow noreferrer">在 Hexo 博客中创建自定义页面</a><a href="#fnref:22" rev="footnote"> ↩</a></span></li><li id="fn:23"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">23.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://blog.csdn.net/weixin_41287260/article/details/103049579" target="_blank" rel="noopener external nofollow noreferrer">博客评论集成</a><a href="#fnref:23" rev="footnote"> ↩</a></span></li><li id="fn:24"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">24.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="http://sugarac.com/2017/01/01/customize-Hexo-blog-homepage/" target="_blank" rel="noopener external nofollow noreferrer">自定义Hexo博客首页</a><a href="#fnref:24" rev="footnote"> ↩</a></span></li><li id="fn:25"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">25.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.jianshu.com/p/80e0e1058bda" target="_blank" rel="noopener external nofollow noreferrer">Hexo自定义页面做首页</a><a href="#fnref:25" rev="footnote"> ↩</a></span></li><li id="fn:26"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">26.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://juejin.im/post/5c00980751882518805add83" target="_blank" rel="noopener external nofollow noreferrer">provisional headers are shown 知多少</a><a href="#fnref:26" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>技术分享</category>
        <category>博客</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Next</tag>
        <tag>Mist-v7.7.0</tag>
        <tag>自定义主题</tag>
      </tags>
  </entry>
  <entry>
    <title>微软系统使用手册</title>
    <url>/Blog/2020/01/28/%E5%BE%AE%E8%BD%AF%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\Blog\assets\css\APlayer.min.css"><script src="\Blog\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\Blog\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>Windows系统占据当前桌面操作系统的绝对市场，微软操作系统作为市场占有率最高的桌面操作系统，也是大多数人接触最多和使用最多的PC操作系统，其软件生态环境已经十分丰富。很多软件都会有 windows 版本，且大家日常使用的软件也都基本支持在微软系统中使用，本文列述了Windows系统使用中不同应用的说明，能够让你对Windows了解更多，同时也补充了在Windows上体验较好的软件及使用中遇到问题的说明，但不会具体去介绍某一类应用的使用教程。</p>
<a id="more"></a>
<h2 id="Windows-远程桌面"><a href="#Windows-远程桌面" class="headerlink" title="Windows 远程桌面"></a>Windows 远程桌面</h2><p>Windows系统本身自带需要微软产品功能，只是没有独立作为产品而是一种服务，同时加上安全因素（曾经的勒索病毒Wannacry就是利用微软的默认共享服务端口445进行传播），身边比较少人会去使用微软的自带服务。但是其实微软自身的服务对于Windows系统的使用还是比第三方应用会好一些，不过也存在特例。Windows自带的远程桌面即remote desktop service（RDS），官方对其的描述是“RDS可以生成虚拟化解决方案来满足每个最终客户的需求，包括交付独立的虚拟化应用程序、提供安全的移动和远程桌面访问，使最终用户能够从云运行其应用程序和桌面”，直接了当说明了服务的目的，相比市场上大大小小的各类远程控制软件，我还是选择了尝试微软自身的服务。</p>
<h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><ol>
<li>场景<br>对于个体用户而言，我相信远程桌面的需求并不会过于频繁和高负荷，主要的需要场景如：局域网内远程控制微型机、服务器远程控制、公网远程协助操作、应急远程连接等，以我自己为例，我将电脑置于宿舍，假期出门，临时遇到资料或数据需要PC处理或查看时，可能无法第一时间返回宿舍，此时我都会在出门前确保电脑的联网和电源正常，并开启RDS，之后方便我随时通过手机或他人电脑远程连接到PC进行临时事件紧急处理。</li>
<li>体验<br>可能大部分中国朋友都会用过QQ，而QQ本身就有一个远程控制的功能，但是用过这个功能的朋友应该知道连接好友的电脑之后，延迟有多高，原地爆炸就有多高，所以远程连接最重要的体验就是操作流畅，画面清晰。</li>
</ol>
<h3 id="RDS建立"><a href="#RDS建立" class="headerlink" title="RDS建立"></a>RDS建立</h3><p>在建立远程桌面服务之前，需要明白这是一项Windows专业版以上系统才具备的默认服务功能，如果是家庭版则需要升级后才有此功能。</p>
<ol>
<li>开启本地的RDS<br>开启远程服务有两种方式：<br>①开启<code>任务管理器</code>，选择<code>服务</code>，将<code>remote desktop service</code>服务启动，可以修改为<code>自动启动</code>，看到服务处于运行状态即可；<br><img src="/Blog/images/windows-RDS-1.png" alt="开启RDS-方法1"><i class="img-caption">☆ 开启RDS-1</i><br>②打开系统设置，在<code>系统</code>选项下的<code>远程桌面</code>，点击打开即可。<br><img src="/Blog/images/windows-RDS-2.png" alt="开启RDS-方法2"><i class="img-caption">☆ 开启RDS-2</i></li>
<li>修改本地默认服务端口<br>微软自带的RDS默认端口为3389，意味着当开启远程桌面服务后，Windows的3389端口便开启了，出于安全性的考虑，此处将默认的端口进行修改，假设修改为3388，修改步骤如下：<br>①打开注册表，按下快捷键<code>win + R</code>，在运行窗口输入<code>regedit</code>；<br>②找到<code>HKEY_LOCAL_MACHINE/ SYSTEM/ CurrentControlSet/ Control/ Terminal Server/ Wds/ rdpwd/ Tds/ tcp</code>，将<code>PortNumber</code>子键的值修改为<code>3388</code>；<br>③找到<code>HKEY_LOCAL_MACHINE/ SYSTEM/ CurrentControlSet/ Control/ Terminal Server/ Winstations/ RDP-Tcp</code>，将<code>PortNumber</code>子键的值修改为<code>3388</code>；<br>④重启电脑即可使修改的注册表内容生效。</li>
<li>修改防火墙策略<br>由于自定义了远程桌面服务端口，因此需要修改或增加防火墙策略使通过自定义端口进行通信的服务能正常使用。步骤如下：<br>①打开<code>Windows防火墙</code>，可在<code>控制面板-系统和安全</code>下打开；<br>②确认防火墙为开启状态，选择<code>高级设置</code>；<br><img src="/Blog/images/windows-RDS-3.png" alt="打开Windows防火墙"><i class="img-caption">☆ 打开Windows防火墙</i><br>③新建防火墙入站规则，类型为<code>端口</code>，选择规则应用于<code>TCP</code>并输入特定端口号<code>3388</code>，默认选择<code>允许连接</code>，并应用规则到所有类型连接网络，最后为规则编写名称和描述信息即可；<br><img src="/Blog/images/windows-RDS-4.png" alt="设置防火墙规则-1"><i class="img-caption">☆ 设置防火墙规则-1</i><br><img src="/Blog/images/windows-RDS-5.png" alt="设置防火墙规则-2"><i class="img-caption">☆ 设置防火墙规则-2</i><br><img src="/Blog/images/windows-RDS-6.png" alt="设置防火墙规则-3"><i class="img-caption">☆ 设置防火墙规则-3</i></li>
<li>设置远程连接用户<br>默认情况下，本地用户具备远程连接的权限，当然也可以创建新用户只用于远程连接，步骤如下：<br>①打开<code>计算机管理</code>，可打开计算机文件夹，在上方选项中点击<code>管理</code>；<br>②展开<code>系统工具-本地用户和组-用户</code>，在右侧空白区域鼠标右键点击，选择<code>新用户</code>；<br>③完善新用户信息填写。</li>
<li>内网连接<br>我以手机作为客户端进行远程连接，内网即局域网内进行远程连接电脑。步骤如下：<br>①手机和电脑都连接在同一局域网内，比如同个WiFi下；<br>②电脑确保网络和电源正常，手机下载微软远程桌面客户端<code>Remote Desktop</code>，国内应用市场可直接搜索下载；<br><img src="/Blog/images/windows-RDS-7.png" alt="远程桌面连接客户端"><i class="img-caption">☆ 远程桌面连接客户端</i><br>③手机打开客户端，如果在局域网下可以直接搜索找到局域网内可以进行连接的电脑，或者手动添加局域网内电脑的IP或用户名（如果修改了默认RDS端口，需要在IP或用户名后加上端口号，如192.168.1.2:3388），之后便可正常验证连接。</li>
<li>外网连接<br>外网连接可能更符合对远程连接的理解，与内网连接的差别在于，要实现外网连接必须确保电脑具有一个独立固定的公网IP，同时对于局域网内的电脑还需要进行端口转发的设置。步骤如下：<br>①确认是否具备固定独立的公网IP，首先在<code>ip138.com</code>查询当前IP地址，记为IP1，然后在宽带路由器的后台管理界面进入类似<code>上网设置</code>的选项，查看当前IP地址，记为IP2，如果IP1=IP2，即可确保拥有公网地址。如果不具有公网地址，比如电信家庭网宽带可以直接拨打10000进行免费申请；<br>②确保拥有公网IP后，在路由设置处，添加端口转发规则，将RDS默认端口转发到自定义端口即可；<br>③手机使用流量，测试通过客户端连接公网IP，正常便可验证连接。</li>
</ol>
<h2 id="录屏"><a href="#录屏" class="headerlink" title="录屏"></a>录屏</h2><p>Windows10系统中预装了Xbox系列软件，这本身是微软的一共游戏娱乐平台，但是其带有的录屏功能却能够满足我们录制教程或远程会议视频，不需要安装第三方的应用软件，而且使用十分简单方便。</p>
<h3 id="开启Windows录屏设置"><a href="#开启Windows录屏设置" class="headerlink" title="开启Windows录屏设置"></a>开启Windows录屏设置</h3><p>Windows10点击菜单栏<code>Windows</code>键，进入<code>系统设置</code>；<br><img src="/Blog/images/windows-1.png" alt="系统设置"><i class="img-caption">☆ 系统设置</i><br>选择<code>游戏</code>，点击左侧<code>游戏栏</code>，将<code>使用游戏录制游戏剪辑 、屏蔽截图和广播</code>选择为<code>开</code>，下方打开游戏栏快捷键按照系统默认为<code>Win+G</code>；<br><img src="/Blog/images/windows-2.png" alt="游戏设置"><i class="img-caption">☆ 游戏设置</i><br><img src="/Blog/images/windows-3.png" alt="游戏栏设置"><i class="img-caption">☆ 游戏栏设置</i><br>点击左侧的<code>游戏模式</code>,选择为<code>开</code>，这样才能够开启Xbox的录屏功能；<br><img src="/Blog/images/windows-4.png" alt="游戏模式设置"><i class="img-caption">☆ 游戏模式设置</i><br>然后选择左侧的<code>屏幕截图</code>,将<code>当我玩游戏时在后台录制</code>和<code>在我录制游戏时录制音频</code>选择为<code>开</code>，其他选项可以根据自身情况设置。<br><img src="/Blog/images/windows-5.png" alt="录制设置"><i class="img-caption">☆ 录制设置</i></p>
<h3 id="录制屏幕"><a href="#录制屏幕" class="headerlink" title="录制屏幕"></a>录制屏幕</h3><p>在需要录制的时候，按下之前设置的快捷键<code>Win + G</code>，此时会弹出Xbox录制窗口，<code>游戏捕获</code>窗口是操作按钮，<code>音频</code>窗口是设置需要录制音频的应用，点击<code>游戏捕获</code>下的<code>⚫</code>按钮即开始录制；<br><img src="/Blog/images/windows-6.png" alt="录制屏幕"><i class="img-caption">☆ 录制屏幕</i></p>
<h3 id="查看录制结果及修改录制设置"><a href="#查看录制结果及修改录制设置" class="headerlink" title="查看录制结果及修改录制设置"></a>查看录制结果及修改录制设置</h3><p>在需要结束录制的时候，按下录制窗口上的<code>⬛</code>按钮或屏幕右上角的<code>⬛</code>按钮，同时可以看到录制的时长，结束录制时系统会通知你录制内容存储位置，到存储位置查看已录制的视频。点击录制窗口的<code>⚙</code>状按钮可以修改录制设置，旁边的<code>📂</code>可以查看存储位置。<br><img src="/Blog/images/windows-7.png" alt="结束录制"><i class="img-caption">☆ 结束录制</i></p>
<h2 id="已存储Wi-Fi密码查看"><a href="#已存储Wi-Fi密码查看" class="headerlink" title="已存储Wi-Fi密码查看"></a>已存储Wi-Fi密码查看</h2><h3 id="打开网络适配器设置"><a href="#打开网络适配器设置" class="headerlink" title="打开网络适配器设置"></a>打开网络适配器设置</h3><h4 id="命令行开启"><a href="#命令行开启" class="headerlink" title="命令行开启"></a>命令行开启</h4><p>按快捷组合键<code>Windwos+r</code>，输入<code>ncpa.cpl</code>。</p>
<h4 id="界面鼠标开启"><a href="#界面鼠标开启" class="headerlink" title="界面鼠标开启"></a>界面鼠标开启</h4><p>鼠标右键点击Windows菜单栏的网络图标，点击<code>打开“网络和Internet”设置</code>，选择<code>更改适配器选项</code>。</p>
<p><img src="/Blog/images/windows-8.png" alt="网络适配器"><i class="img-caption">☆ 网络适配器</i></p>
<h3 id="查看无线网配置信息"><a href="#查看无线网配置信息" class="headerlink" title="查看无线网配置信息"></a>查看无线网配置信息</h3><h4 id="无线网状态"><a href="#无线网状态" class="headerlink" title="无线网状态"></a>无线网状态</h4><p>注意要查看无线网状态需要正常连接无线网才能查看当前连接的无线网配置，右键点击<code>WLAN</code>标记的网络，点击<code>状态</code>。</p>
<p><img src="/Blog/images/windows-9.png" alt="无线状态查看"><i class="img-caption">☆ 无线状态查看</i></p>
<h4 id="查看无线属性"><a href="#查看无线属性" class="headerlink" title="查看无线属性"></a>查看无线属性</h4><p>进入无线网状态界面，点击<code>无线属性</code>,选择<code>安全</code>选项卡，勾选<code>显示字符</code>即可查看当前无线网的认证信息。</p>
<p><img src="/Blog/images/windows-10.png" alt="无线属性查看"><i class="img-caption">☆ 无线属性查看</i></p>
<p><img src="/Blog/images/windows-11.png" alt="Wi-Fi密钥查看"><i class="img-caption">☆ Wi-Fi密钥查看</i></p>
<h2 id="端口占用查看"><a href="#端口占用查看" class="headerlink" title="端口占用查看"></a>端口占用查看</h2><p>在windows下需要查看端口占用情况，同时排查哪些应用正在使用当前端口<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Windows下如何查看某个端口被谁占用](https://www.runoob.com/w3cnote/windows-finds-port-usage.html)
">[1]</span></a></sup>。</p>
<h3 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h3><h4 id="打开命令行（管理员身份）"><a href="#打开命令行（管理员身份）" class="headerlink" title="打开命令行（管理员身份）"></a>打开命令行（管理员身份）</h4><p>1） 在开始菜单搜索<code>cmd</code>，右键点击<code>命令行提示窗口</code>以管理员身份运行；</p>
<p>2） 按快捷组合键<code>Windows+r</code>，输入<code>cmd</code>。</p>
<h4 id="查看所有端口"><a href="#查看所有端口" class="headerlink" title="查看所有端口"></a>查看所有端口</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">netstat -ano</span><br></pre></td></tr></table></figure>
<p>每个地址后面显示的即端口号，最后一列表示对应的进程号PID。</p>
<p><img src="https://www.runoob.com/wp-content/uploads/2018/07/1530674518-5109-2159693-5342695777bde48d.png" alt="系统所有端口信息查看"><i class="img-caption">☆ 系统所有端口信息查看</i></p>
<h4 id="查看具体端口使用的进程"><a href="#查看具体端口使用的进程" class="headerlink" title="查看具体端口使用的进程"></a>查看具体端口使用的进程</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">netstat -aon|findstr <span class="string">"8081"</span></span><br></pre></td></tr></table></figure>
<p>显示使用当前端口的进程情况。</p>
<p><img src="https://www.runoob.com/wp-content/uploads/2018/07/1530674518-6203-2159693-10d9bae7a6e59b06.png" alt="端口对应使用进程查看"><i class="img-caption">☆ 端口对应使用进程查看</i></p>
<h4 id="查看指定进程"><a href="#查看指定进程" class="headerlink" title="查看指定进程"></a>查看指定进程</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tasklist|findstr <span class="string">"9088"</span></span><br></pre></td></tr></table></figure>
<p>查看是哪个进程或者程序占用了 8081 端口，结果是：node.exe。</p>
<p><img src="https://www.runoob.com/wp-content/uploads/2018/07/1530674518-3794-2159693-30d1a50103f28cea.png" alt="查看具体进程"><i class="img-caption">☆ 查看具体进程</i></p>
<h2 id="内存型号查看"><a href="#内存型号查看" class="headerlink" title="内存型号查看"></a>内存型号查看</h2><p>使用Windows系统的电脑一般都能支持扩展，而扩展的硬件一般都有内存，要给电脑增加内存条需要知道电脑对内存的支持情况以及内存条的配置，有多种方式能够得知，这里仍然推荐不适用第三方软件的方式，即Windows自身便能完成需求。</p>
<h3 id="查看支持的最大内存容量"><a href="#查看支持的最大内存容量" class="headerlink" title="查看支持的最大内存容量"></a>查看支持的最大内存容量</h3><p>打开命令行，按下<code>Win + R</code>，输入<code>cmd</code>，输入<code>wmic memphysical get maxcapacity</code>，显示的数字即电脑主板支持的最大内存，这串数字的单位是<code>KB</code>，因此需要换算为<code>GB</code>，以我的笔记本为例子16777216KB即16GB。<br><img src="/Blog/images/windows-12.png" alt="支持内存上限"><i class="img-caption">☆ 支持内存上限</i></p>
<h3 id="查看内存配置"><a href="#查看内存配置" class="headerlink" title="查看内存配置"></a>查看内存配置</h3><p>一般购买内存需要知道内存的型号、频率、电压、大小，其中内存条的型号、频率和电压是必须和电脑主板支持的相兼容才能保证使用正常，详细的内存配置可以参照此处<sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[读懂内存](https://zhuanlan.zhihu.com/p/26255460)
">[2]</span></a></sup><sup id="fnref:3"><a href="#fn:3" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[英睿达](https://www.crucial.cn/memory)
">[3]</span></a></sup>，具体查看步骤如下：</p>
<ol>
<li>打开命令行，输入<code>wmic</code>，在wmic提示符下输入<code>memorychip</code>，可看到当前电脑内存信息。<br><img src="/Blog/images/windows-13.png" alt="内存信息"><i class="img-caption">☆ 内存信息</i></li>
<li>解读显示的内存信息，<code>Capacity</code>表示内存大小，<code>ConfiguredClockSpeed</code>表示内存频率，<code>DataWidth</code>表示位宽，其中要判断型号是<code>DDR</code>的哪个版本，从频率可以判断，一般频率在2400以上的即<code>DDR4</code>，这也是当前最常见的内存型号，如果要直观查看，可以使用第三方软件<code>cpu-z</code>查看。</li>
</ol>
<h2 id="CPU型号查看"><a href="#CPU型号查看" class="headerlink" title="CPU型号查看"></a>CPU型号查看</h2><p>要了解自身电脑的CPU情况，除了上网搜索官网配置信息外，可以在本地便捷的进行查看，一般要了解的是CPU的版本、厂商、线程数、核数等，使用Windows内置功能来完成查询。</p>
<h3 id="物理CPU个数"><a href="#物理CPU个数" class="headerlink" title="物理CPU个数"></a>物理CPU个数</h3><p>打开命令行，输入<code>systeminfo</code>，查看<code>处理器</code>一项即可看到电脑使用处理器个数。</p>
<h3 id="查看CPU配置信息"><a href="#查看CPU配置信息" class="headerlink" title="查看CPU配置信息"></a>查看CPU配置信息</h3><p>打开命令行，输入<code>wmic</code>，之后输入<code>cpu get *</code>或<code>cpu get</code>，里面包含电脑中所搭载的CPU配置信息，如<code>NumberOfCores</code>表示CPU核数，<code>NumberOfLogicalProcessors</code>表示CPU线程数，<code>Caption</code>表示厂商信息，其他详细内容可自行查看。</p>
<h2 id="查看网口信息"><a href="#查看网口信息" class="headerlink" title="查看网口信息"></a>查看网口信息</h2><h3 id="命令行方式"><a href="#命令行方式" class="headerlink" title="命令行方式"></a>命令行方式</h3><p>打开命令行，输入<code>systeminfo</code>，查看<code>网卡</code>一项即可。</p>
<h3 id="可视化方式"><a href="#可视化方式" class="headerlink" title="可视化方式"></a>可视化方式</h3><p>在开始菜单搜索<code>计算机管理</code>，打开<code>计算机管理</code>，点击左侧<code>设备管理器</code>，选择<code>网络适配器</code>查看。</p>
<h2 id="无线投屏"><a href="#无线投屏" class="headerlink" title="无线投屏"></a>无线投屏</h2><p>使用 Windows10 自带的 Miracast 功能，实现将电脑投屏到支持无线投屏的仪器上，既节省了使用连接线也避免依赖第三方软件，让投屏能够随时随地使用。此处不对无线投屏技术进行过多原理及技术说明，想了解可查阅网上教程<sup id="fnref:15"><a href="#fn:15" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Win10PC电脑无线投屏Miracast的神操作](https://zhuanlan.zhihu.com/p/68697030)
">[15]</span></a></sup><sup id="fnref:16"><a href="#fn:16" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[win10下Miracast无线投屏使用教程及异常解决方案](https://blog.csdn.net/xqhrs232/article/details/104250602)
">[16]</span></a></sup>。<br>以笔记本电脑无线投屏到小米电视为例子，基本使用方式如下：</p>
<ol>
<li>确保电脑与需要投屏的显示器（此处为小米电视）在同一局域网下，电脑有无线网卡；</li>
<li>打开小米电视，在首页界面找到<code>我的应用</code>并打开；</li>
<li>在<code>我的应用</code>中找到<code>无线投影</code>后打开，选择<code>Miracast</code>功能选项，小米电视会出现无线显示界面及<code>小米电视</code>并等待连接；</li>
<li>在笔记本电脑 Win10 桌面右下角点击，选择<code>连接</code>，电脑会自动搜索出<code>小米电视</code>，点击连接；</li>
<li>等待自动连接，点击电脑桌面右下角的<code>投影</code>，选择相应的投影方式。</li>
</ol>
<p><strong>注意</strong></p>
<ol>
<li>使用无线投屏后，桌面上方会自动显示工具条，可以选择不保持在前端，则会隐藏，将鼠标移动到桌面上方的中部即会重新出现工具条，此外工具条出现无法隐藏的问题可能会在旧版本的系统版本存在，详情可查阅微软社区相关问题<sup id="fnref:14"><a href="#fn:14" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Win10使用无线投屏后，屏幕上方工具条无法移除](https://answers.microsoft.com/zh-hans/windows/forum/all/win10%E4%BD%BF%E7%94%A8%E6%97%A0%E7%BA%BF%E6%8A%95/803e190a-135a-4b90-9e8d-032f2d9fc89b)
">[14]</span></a></sup>。</li>
<li>本例中使用小米电视的<code>无线投影</code>应用，如果是华为/荣耀系列则是<code>无线投屏</code>应用，不同品牌名称可能存在差异，可以在<code>我的应用</code>中搜索关键字<code>无线</code>进行查找。</li>
</ol>
<h2 id="常见问题-amp-解决方法"><a href="#常见问题-amp-解决方法" class="headerlink" title="常见问题&amp;解决方法"></a>常见问题&amp;解决方法</h2><h3 id="浏览器如chrome无法正常播放声音"><a href="#浏览器如chrome无法正常播放声音" class="headerlink" title="浏览器如chrome无法正常播放声音"></a>浏览器如chrome无法正常播放声音</h3><p>问题：<br>&emsp;&emsp;当使用网易云音乐、QQ、影视播放软件等软件可以正常播放声音，而常用浏览器却不能播放声音，重启仍然无效时，问题一般是浏览器的声音播放被禁止了，即针对性的对某个应用做了声音禁止。<br>解决：<br>&emsp;&emsp;解决办法即查看系统<code>声音设置</code>以及<code>声音合成器</code>，在桌面右下角菜单栏找到<code>🔈</code>形状的<code>扬声器</code>，右键点击可以看到选项，查看浏览器是否被禁音，将其解除即可。<br><img src="/Blog/images/windows-14.png" alt="扬声器"><i class="img-caption">☆ 扬声器</i><br><img src="/Blog/images/windows-15.png" alt="扬声器设置"><i class="img-caption">☆ 扬声器设置</i></p>
<h3 id="进程连接设备平台用户服务-338f0c6占用CPU"><a href="#进程连接设备平台用户服务-338f0c6占用CPU" class="headerlink" title="进程连接设备平台用户服务_338f0c6占用CPU"></a>进程<code>连接设备平台用户服务_338f0c6</code>占用CPU</h3><p>这个进程根据介绍是对外接设备的正常运行进行提供服务的，但是我并没有连接U盘、移动硬盘、触摸板等设备，结果后台自动启动这个进程，导致CPU资源被占用，查询微软社区后，参照<sup id="fnref:12"><a href="#fn:12" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[连接设备平台用户服务长时间高CPU占用](https://answers.microsoft.com/zh-hans/windows/forum/all/%E8%BF%9E%E6%8E%A5%E8%AE%BE%E5%A4%87%E5%B9%B3/6f6494fe-0610-4dac-8bfd-8da6d70d1670)
">[12]</span></a></sup><sup id="fnref:13"><a href="#fn:13" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[什么是连接设备平台服务？ 我应该禁用吗？](http://windowsbulletin.com/zh-CN/%E4%BB%80%E4%B9%88%E6%98%AF%E8%BF%9E%E6%8E%A5%E8%AE%BE%E5%A4%87%E5%B9%B3%E5%8F%B0%E6%9C%8D%E5%8A%A1%E6%88%91%E5%BA%94%E8%AF%A5%E7%A6%81%E7%94%A8%E5%AE%83/)
">[13]</span></a></sup>，得到解决方法如下：</p>
<ol>
<li>若是有连接的外接设备确保已经移除且断开连接；</li>
<li>将<code>连接设备平台用户服务_338f0c6</code>进程停止并禁用，同时在<code>服务</code>中找到<code>Superfetch</code>、<code>Homegroup Listener</code>、<code>Homegroup Provider</code>和<code>DiagTrack Diagnostics Tracking Service</code>，若是Windows系统版本较新（我的是Windows10-1903），则在服务中找到<code>Diagnostic Policy Service</code>、<code>Diagnostic Service Host</code>和<code>Diagnostic System Host</code>，将对应进程停止并禁用，重启电脑；</li>
<li>查看系统<code>虚拟内存</code>设置是否是默认情况，虚拟内存查看请打开<code>我的电脑</code>属性，位于<code>系统-&gt;高级系统设置-&gt;高级-&gt;性能-&gt;设置-&gt;高级-&gt;虚拟内存设置</code>。</li>
</ol>
<h2 id="推荐工具"><a href="#推荐工具" class="headerlink" title="推荐工具"></a>推荐工具</h2><h3 id="CMD-下载百度云资源"><a href="#CMD-下载百度云资源" class="headerlink" title="CMD-下载百度云资源"></a>CMD-下载百度云资源</h3><p>PanDownload 的作者于2018年宣布不再维护和开放服务，因此网页版PanDownload不可用，客户端目前不受影响，而同时作者提出另一种绕过百度云客户端限速的方法即通过<code>CMD</code>进行下载，转载来到本博客，详情参照作者博客<sup id="fnref:5"><a href="#fn:5" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[BaiduPCS-Go 使用CMD命令行全速下载百度云](https://laod.cn/black-technology/baidupcs-go-baiduyun.html)
">[5]</span></a></sup>。</p>
<h2 id="推荐软件"><a href="#推荐软件" class="headerlink" title="推荐软件"></a>推荐软件</h2><h3 id="PanDownload"><a href="#PanDownload" class="headerlink" title="PanDownload"></a>PanDownload</h3><p>解决百度云带来的限速问题，这是免费的一款第三方下载软件，请不要有偿售卖，同时请谨慎使用，存在被封的风险。详情见官网<sup id="fnref:4"><a href="#fn:4" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[PanDownload](https://pandownload.com/index.html)
">[4]</span></a></sup>。</p>
<h3 id="PotPlayer"><a href="#PotPlayer" class="headerlink" title="PotPlayer"></a>PotPlayer</h3><p>一款值得推荐的播放器，<a href="https://potplayer.daum.net/" target="_blank" rel="noopener external nofollow noreferrer">官方地址</a>，2019年2月国内无法正常访问（某不可抗力隐私），下载需要科学上网，这款播放器的优点是支持的视频文件格式多，有多媒体文件解码器和硬件加速，使用很流畅，界面简洁。</p>
<h4 id="安装注意"><a href="#安装注意" class="headerlink" title="安装注意"></a>安装注意</h4><ol>
<li>不知何时起，PotPlayer 安装包捆绑了<a href="https://www.avast.com/zh-cn/index" target="_blank" rel="noopener external nofollow noreferrer">avast! (Avast Antivirus)</a>，建议手动更新安装，安装时注意在<code>Avast Antivirus</code>勾选处将✔去掉，否则捆绑安装会默认进行，且安装过程还挺长。没怎么接触过这款杀毒软件，但是被捆绑安装不太开心，这款杀毒软件与百度云网盘有冲突，同时杀毒软件不能关闭，强制后台运行<sup id="fnref:6"><a href="#fn:6" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Potplayer自动更新会下载安装Avast杀毒](https://www.52pojie.cn/thread-1086427-1-1.html)
">[6]</span></a></sup><sup id="fnref:7"><a href="#fn:7" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Malware or False positive in Potplayer?](https://malwaretips.com/threads/malware-or-false-positive-in-potplayer.94097/)
">[7]</span></a></sup>。</li>
<li>如果不注意捆绑安装了<code>Avast Antivirus Free</code>，官方也提供了卸载工具<a href="https://files.avast.com/iavs9x/avastclear.exe" target="_blank" rel="noopener external nofollow noreferrer">avastclear</a>及卸载方法<sup id="fnref:8"><a href="#fn:8" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[使用 avastclear 卸载 Avast Antivirus](https://www.avast.com/zh-cn/uninstall-utility)
">[8]</span></a></sup>，具体见下图。<br><img src="/Blog/images/windows-16.png" alt="卸载Avast"><i class="img-caption">☆ 卸载Avast</i></li>
</ol>
<p>将官网及最新版 PotPlayer 在<a href="https://www.virustotal.com/" target="_blank" rel="noopener external nofollow noreferrer">VirusTotal</a>进行恶意性检测，结果如下：<br><img src="/Blog/images/windows-17.png" alt="PotPlayer官网检测结果"><i class="img-caption">☆ PotPlayer官网检测结果</i><br><img src="/Blog/images/windows-18-1.png" alt="PotPlayer-200204检测结果"><i class="img-caption">☆ PotPlayer-200204检测结果</i><br><img src="/Blog/images/windows-18-2.png" alt="PotPlayer-200204 Hash-256 校验"><i class="img-caption">☆ PotPlayer-200204 Hash-256 校验</i></p>
<h3 id="GitHub-和-Git"><a href="#GitHub-和-Git" class="headerlink" title="GitHub 和 Git"></a>GitHub 和 Git</h3><p><a href="https://github.com/" target="_blank" rel="noopener external nofollow noreferrer">GitHub</a>是全球最大的代码托管平台即软件源代码托管服务平台，而<a href="https://git-scm.com/" target="_blank" rel="noopener external nofollow noreferrer">Git</a>是分布式版本控制软件，Github 可通过 Git 进行版本控制，Git 是终端模式使用的工具，也有可视化使用的版本控制工具，本着开源开放交流的精神，要写出更优更美的代码，托管到开源平台，各路大神自有评说🤭，鉴于我也在学习和使用中，同时最近开始接触 Gitlab，因此建立了 Git学习专栏，可查看<a href="https://linwhitehat.github.io/2020/02/17/Git%E4%B8%93%E6%A0%8F.html">Git专栏</a>。</p>
<h4 id="GitHub-issue"><a href="#GitHub-issue" class="headerlink" title="GitHub issue"></a>GitHub issue</h4><p>当创建 GitHub 仓库项目之后，可以在项目的<code>Issues</code>里进行交流，可以提问和回答，参照<a href="https://blog.csdn.net/github_30605157/article/details/52837864" target="_blank" rel="noopener external nofollow noreferrer">熟练使用Issues</a>。</p>
<h4 id="Github-README"><a href="#Github-README" class="headerlink" title="Github README"></a>Github README</h4><p>每个项目的说明即 README 部分要写清楚，同时又要美观，有一个专业方式即加上项目徽章，效果可看我的<a href="https://github.com/linwhitehat/linwhitehat.github.io" target="_blank" rel="noopener external nofollow noreferrer">博客项目页面</a>，可参照<sup id="fnref:9"><a href="#fn:9" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[GitHub 项目徽章的添加和设置](https://lpd-ios.github.io/2017/05/03/GitHub-Badge-Introduction/)
">[9]</span></a></sup><sup id="fnref:10"><a href="#fn:10" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[如何在 README 里面添加徽章](https://github.com/yangwenmai/how-to-add-badge-in-github-readme)
">[10]</span></a></sup><sup id="fnref:11"><a href="#fn:11" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[GitHub上 README 增加图片标签](https://blog.csdn.net/yangbodong22011/article/details/51791085)
">[11]</span></a></sup>。</p>
<h3 id="ssh-远程连接"><a href="#ssh-远程连接" class="headerlink" title="ssh 远程连接"></a>ssh 远程连接</h3><h4 id="XShell系列"><a href="#XShell系列" class="headerlink" title="XShell系列"></a>XShell系列</h4><p>习惯使用<code>ssh</code>进行远程连接可以使用<code>XShell</code>系列软件即 XShell 和 XFtp，这两者的配套使用基本满足远程连接以及远程文件传输，主要适用于内网多主机的控制以及远程服务器的控制，学生注册是可以免费使用的。<a href="https://www.netsarang.com/zh/xshell/" target="_blank" rel="noopener external nofollow noreferrer">下载地址</a></p>
<h5 id="xftp出现无法实现文件传输"><a href="#xftp出现无法实现文件传输" class="headerlink" title="xftp出现无法实现文件传输"></a>xftp出现无法实现文件传输</h5><p>在网络正常连接情况下，排除防火墙拦截等网络因素，查看远程连接设备上传输文件的目标文件目录权限，使用<code>ll</code>或<code>ls -l</code>可以查看是否具备可写权限，一般是不具备才导致的，修改目标文件目录权限：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo chmod 777 file_Directory/</span><br><span class="line">ls -l</span><br></pre></td></tr></table></figure>
<p><img src="/Blog/images/windows-19.png" alt="文件目录权限修改"><i class="img-caption">☆ 文件目录权限修改</i><br>查看文件目录权限完整后再尝试xftp传输文件即可。<sup id="fnref:17"><a href="#fn:17" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[关于xftp上传文件状态错误的解决](https://blog.csdn.net/qq_35038153/article/details/78408882)
">[17]</span></a></sup></p>
<h4 id="putty"><a href="#putty" class="headerlink" title="putty"></a>putty</h4><p>简洁风格使用 <code>putty</code> 进行<code>ssh</code>远程连接，不需要安装，只需要下载<code>zip</code>压缩包解压即可使用，十分方便而且免费。<a href="https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html" target="_blank" rel="noopener external nofollow noreferrer">下载地址</a></p>
<h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>本着手册即查即用的原则，这篇博文写的十分简要，很少说明部分，直接贴出操作。</p>
<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.runoob.com/w3cnote/windows-finds-port-usage.html" target="_blank" rel="noopener external nofollow noreferrer">Windows下如何查看某个端口被谁占用</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://zhuanlan.zhihu.com/p/26255460" target="_blank" rel="noopener external nofollow noreferrer">读懂内存</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.crucial.cn/memory" target="_blank" rel="noopener external nofollow noreferrer">英睿达</a><a href="#fnref:3" rev="footnote"> ↩</a></span></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">4.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://pandownload.com/index.html" target="_blank" rel="noopener external nofollow noreferrer">PanDownload</a><a href="#fnref:4" rev="footnote"> ↩</a></span></li><li id="fn:5"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">5.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://laod.cn/black-technology/baidupcs-go-baiduyun.html" target="_blank" rel="noopener external nofollow noreferrer">BaiduPCS-Go 使用CMD命令行全速下载百度云</a><a href="#fnref:5" rev="footnote"> ↩</a></span></li><li id="fn:6"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">6.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.52pojie.cn/thread-1086427-1-1.html" target="_blank" rel="noopener external nofollow noreferrer">Potplayer自动更新会下载安装Avast杀毒</a><a href="#fnref:6" rev="footnote"> ↩</a></span></li><li id="fn:7"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">7.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://malwaretips.com/threads/malware-or-false-positive-in-potplayer.94097/" target="_blank" rel="noopener external nofollow noreferrer">Malware or False positive in Potplayer?</a><a href="#fnref:7" rev="footnote"> ↩</a></span></li><li id="fn:8"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">8.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.avast.com/zh-cn/uninstall-utility" target="_blank" rel="noopener external nofollow noreferrer">使用 avastclear 卸载 Avast Antivirus</a><a href="#fnref:8" rev="footnote"> ↩</a></span></li><li id="fn:9"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">9.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://lpd-ios.github.io/2017/05/03/GitHub-Badge-Introduction/" target="_blank" rel="noopener external nofollow noreferrer">GitHub 项目徽章的添加和设置</a><a href="#fnref:9" rev="footnote"> ↩</a></span></li><li id="fn:10"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">10.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://github.com/yangwenmai/how-to-add-badge-in-github-readme" target="_blank" rel="noopener external nofollow noreferrer">如何在 README 里面添加徽章</a><a href="#fnref:10" rev="footnote"> ↩</a></span></li><li id="fn:11"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">11.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://blog.csdn.net/yangbodong22011/article/details/51791085" target="_blank" rel="noopener external nofollow noreferrer">GitHub上 README 增加图片标签</a><a href="#fnref:11" rev="footnote"> ↩</a></span></li><li id="fn:12"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">12.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://answers.microsoft.com/zh-hans/windows/forum/all/%E8%BF%9E%E6%8E%A5%E8%AE%BE%E5%A4%87%E5%B9%B3/6f6494fe-0610-4dac-8bfd-8da6d70d1670" target="_blank" rel="noopener external nofollow noreferrer">连接设备平台用户服务长时间高CPU占用</a><a href="#fnref:12" rev="footnote"> ↩</a></span></li><li id="fn:13"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">13.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="http://windowsbulletin.com/zh-CN/%E4%BB%80%E4%B9%88%E6%98%AF%E8%BF%9E%E6%8E%A5%E8%AE%BE%E5%A4%87%E5%B9%B3%E5%8F%B0%E6%9C%8D%E5%8A%A1%E6%88%91%E5%BA%94%E8%AF%A5%E7%A6%81%E7%94%A8%E5%AE%83/" target="_blank" rel="noopener external nofollow noreferrer">什么是连接设备平台服务？ 我应该禁用吗？</a><a href="#fnref:13" rev="footnote"> ↩</a></span></li><li id="fn:14"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">14.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://answers.microsoft.com/zh-hans/windows/forum/all/win10%E4%BD%BF%E7%94%A8%E6%97%A0%E7%BA%BF%E6%8A%95/803e190a-135a-4b90-9e8d-032f2d9fc89b" target="_blank" rel="noopener external nofollow noreferrer">Win10使用无线投屏后，屏幕上方工具条无法移除</a><a href="#fnref:14" rev="footnote"> ↩</a></span></li><li id="fn:15"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">15.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://zhuanlan.zhihu.com/p/68697030" target="_blank" rel="noopener external nofollow noreferrer">Win10PC电脑无线投屏Miracast的神操作</a><a href="#fnref:15" rev="footnote"> ↩</a></span></li><li id="fn:16"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">16.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://blog.csdn.net/xqhrs232/article/details/104250602" target="_blank" rel="noopener external nofollow noreferrer">win10下Miracast无线投屏使用教程及异常解决方案</a><a href="#fnref:16" rev="footnote"> ↩</a></span></li><li id="fn:17"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">17.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://blog.csdn.net/qq_35038153/article/details/78408882" target="_blank" rel="noopener external nofollow noreferrer">关于xftp上传文件状态错误的解决</a><a href="#fnref:17" rev="footnote"> ↩</a></span></li><li id="fn:18"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">18.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.jianshu.com/p/30c9523921c4" target="_blank" rel="noopener external nofollow noreferrer">外网远程桌面连接内网服务器教程(超详细)</a><a href="#fnref:18" rev="footnote"> ↩</a></span></li><li id="fn:19"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">19.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://blog.csdn.net/michaelehome/article/details/79555799" target="_blank" rel="noopener external nofollow noreferrer">通过外网远程访问Window Remote Desktop 远程桌面 Win10</a><a href="#fnref:19" rev="footnote"> ↩</a></span></li><li id="fn:20"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">20.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.bilibili.com/read/cv2611505/" target="_blank" rel="noopener external nofollow noreferrer">如何在本地局域网外访问Win10远程桌面</a><a href="#fnref:20" rev="footnote"> ↩</a></span></li><li id="fn:21"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">21.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://docs.microsoft.com/zh-cn/windows-server/remote/remote-desktop-services/clients/remote-desktop-clients" target="_blank" rel="noopener external nofollow noreferrer">远程桌面客户端</a><a href="#fnref:21" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Handbook</category>
        <category>OS</category>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
        <tag>Git</tag>
        <tag>远程桌面</tag>
      </tags>
  </entry>
  <entry>
    <title>LaTeX-安装教程</title>
    <url>/Blog/2019/10/12/LaTeX%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\Blog\assets\css\APlayer.min.css"><script src="\Blog\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\Blog\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>作为一名研究僧，写论文，写文档，写日志，写报告，写书……还是比较平常的一件事，而office系列对于排版要求严格又惜时如金的人而言还是次选，所以开始入坑LaTeX，经过慎重的调研之后，选择了texlive+texstudio的形式开始入坑，当然还有很多其他选择，如果写完这篇还记得会在参考链接下附上<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[TeX Live & TeXstudio 安装手记](https://www.cnblogs.com/joyeecheung/p/3596255.html)
">[1]</span></a></sup><sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[第一篇tex文档编写](http://www.ctex.org/OnlineDocuments)
">[2]</span></a></sup>。</p>
<a id="more"></a>

<h2 id="调研选择"><a href="#调研选择" class="headerlink" title="调研选择"></a>调研选择</h2><p>其实这部分只是自己做一点记录，急需安装教程的请跳过，请看第2节。</p>
<p>经过多番Google、csdn以及知乎的查阅，大概了解了latex的编译环境和编辑环境，主流的有ctex、texlive、texstudio+winedt等等，我的选择变化大致如下：</p>
<ol>
<li><p>在上过的一门算法课中老师推荐了跨平台下的latex集成工具，ctex被建议在windows下使用，所以最初我的选择是ctex，附上清华镜像，<a href="https://mirrors.tuna.tsinghua.edu.cn/ctex/legacy/2.9/" target="_blank" rel="noopener external nofollow noreferrer" title="ctex清华镜像">Ctex-mirror</a>，官方网站<a href="http://www.ctex.org/HomePage" target="_blank" rel="noopener external nofollow noreferrer">CTeX</a>，加上ctex对中文的支持很好，且集成工具完整，当下载3G的安装包时，我又调研了不少教程，但是在某csdn的教程中看的评论有人评价ctex已不维护很久，同时ctex安装后会对系统环境变量进行覆盖，想想这个风险还是挺大的，毕竟安装需要配置换件变量的应用还挺多的，这篇<a href="https://liam.page/texlive/" target="_blank" rel="noopener external nofollow noreferrer">博文</a>有说明，接着看到在不少教程中推荐texlive（可谓官方），这是由 TUG (TeX User Group) 维护和发布的tex系统，接着有了第2个选择；</p>
</li>
<li><p>开始调研texlive，看看官网<a href="https://tug.org/texlive/" target="_blank" rel="noopener external nofollow noreferrer" title="texlive">TexLive</a>，维护还是比较好的，有2019最新版本，有多国镜像，有完整教学文档，感觉比ctex完善很多，果断放弃ctex，尽管这个时候安装文件也下载得差不多了，同时看到texstudio是tex编辑的不错的集成环境，官方的介绍是这样的：</p>
</li>
</ol>
<p><em>TeXstudio is an integrated writing environment for creating LaTeX documents. Our goal is to make writing LaTeX as easy and comfortable as possible. Therefore TeXstudio has numerous features like syntax-highlighting, integrated viewer, reference checking and various assistants.</em></p>
<p>安装提供zip压缩包直接解压使用，很适合我这种不喜欢安装包的人，因为便于迁移，抉择已定，开始下载和安装。</p>
<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><blockquote>
<p>先提供需要安装的文件（texlive和texstudio）的<a href="https://pan.baidu.com/s/1mRKV0VeNfjxhY6qGvSQdLw" target="_blank" rel="noopener external nofollow noreferrer" title="网盘链接">网盘链接</a>，提取码：uhbe </p>
</blockquote>
<p>官方提供了下载方式：</p>
<ol>
<li>texlive，<a href="https://mirror.bjtu.edu.cn/ctan/systems/texlive/Images/texlive2019.iso" target="_blank" rel="noopener external nofollow noreferrer">官方镜像</a>，如果访问不了，可以访问国内镜像，如<a href="http://mirrors.ustc.edu.cn/CTAN/systems/texlive/" target="_blank" rel="noopener external nofollow noreferrer">中科大镜像</a>；</li>
<li>texstudio，我选择的是zip压缩文件形式，<a href="https://github.com/texstudio-org/texstudio/releases/download/2.12.16/texstudio-2.12.16-win-portable-qt5.zip" target="_blank" rel="noopener external nofollow noreferrer">下载</a>；</li>
</ol>
<p>当然也可以直接下载我网盘分享的镜像和安装包，可以使用官方提供的md5值进行比对验证文件没有被篡改。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="TexLive-安装"><a href="#TexLive-安装" class="headerlink" title="TexLive 安装"></a>TexLive 安装</h3><p>下载好iso文件之后，由于我是win10系统，可以直接加载iso镜像文件，因此双击打开即可，如果是win7及以前的版本需要先解压iso文件，双击打开install-tl-advanced.bat文件，会出现以下界面：</p>
<p><img src="/Blog/images/post-texlive-install-1.jpg" alt="安装启动界面"><i class="img-caption">☆ 安装启动界面</i></p>
<p>点击<em>修改</em>更换需要安装的文件路径，路径建议不要带有中文和特殊字符；<br>点击<em>Advanced</em>修改安装选项，但默认是所有都选上，所以可以不用修改（因为涉及调用的宏包以及scheme选择，如果不了解还是默认，避免后续麻烦）；<br>点击<em>安装</em>，然后就是漫长的安装过程，安装期间可以做自己的事情，安装完成后显示如下：</p>
<p><img src="/Blog/images/post-texlive-install-2.jpg" alt="安装完成界面"><i class="img-caption">☆ 安装完成界面</i></p>
<p>做一下安装是否成功的检查：</p>
<ol>
<li>在开始菜单中搜索<em>TeX Live command-line</em>，执行以下命令：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xelatex -v</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>如果正常会显示如下信息，即正常的texlive版本号：</p>
<p><img src="/Blog/images/post-texlive-test-1.jpg" alt="测试正常界面"><i class="img-caption">☆ 测试正常界面</i></p>
<p>如果显示错误如下，应该是系统环境变量的问题，进入系统环境变量（系统属性-&gt;高级系统设置-&gt;环境变量），将<em>Path</em>环境变量新增texlive进去，即将安装好的texlive文件目录下的bin文件夹所在的路径作为环境变量。</p>
<p><img src="/Blog/images/post-texlive-test-2.jpg" alt="测试错误界面"><i class="img-caption">☆ 测试错误界面</i></p>
<h3 id="TexStudio-安装"><a href="#TexStudio-安装" class="headerlink" title="TexStudio 安装"></a>TexStudio 安装</h3><p>下载好zip压缩文件之后，直接解压就可以使用，十分方便！</p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>主要是texstudio需要进行配置，更适合国内人士使用。</p>
<h3 id="语言设置"><a href="#语言设置" class="headerlink" title="语言设置"></a>语言设置</h3><p>打开texstudio之后，在主界面中显示的是英文，点击菜单栏的<em>Options</em>，点击<em>Configure TeXstudio</em>，在<em>General</em>选项下将<em>Language</em>选择为<em>zh_CN</em>，点击确定；</p>
<h3 id="编译环境设置"><a href="#编译环境设置" class="headerlink" title="编译环境设置"></a>编译环境设置</h3><p>在语言设置一样的窗口，此时显示语言是中文，点击<em>构建</em>-&gt;<em>默认编译器<em>设置为”XeLaTeX”，支持中文LaTeX文档；<br>将</em>构建</em>-&gt;<em>默认文献工具<em>设置为”Biber”；<br>在</em>命令</em>-&gt;<em>XeLaTeX</em>设置编译参数，使用 -shell-escape 参数以支持“minted”代码排版宏包；</p>
<p>点击<em>构建</em>-&gt;<em>默认编译器<em>设置为”Latexmk”实现一次性编译；<br>将</em>命令</em>-&gt;<em>Latexmk<em>的 -pdf 参数修改为 -xelatex 以支持中文；<br>在</em>命令</em>-&gt;<em>Latexmk</em>设置编译参数，使用 -shell-escape 参数以支持“minted”代码排版宏包；<br>点击确定</p>
<p>点击菜单栏<em>帮助</em>-&gt;<em>检查Latex安装信息</em>，若正确输出系统报告，说明texlive正常工作。</p>
<h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>第一篇tex文档参照这篇博客，<a href="https://blog.csdn.net/yeler082/article/details/80665186" target="_blank" rel="noopener external nofollow noreferrer">Texlive+TeXstudio 入门安装使用</a>，照着输入，然后点击两个绿色箭头重叠的按钮，可以看到实时生成的文档。</p>
<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.cnblogs.com/joyeecheung/p/3596255.html" target="_blank" rel="noopener external nofollow noreferrer">TeX Live &amp; TeXstudio 安装手记</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="http://www.ctex.org/OnlineDocuments" target="_blank" rel="noopener external nofollow noreferrer">第一篇tex文档编写</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Handbook</category>
        <category>Latex</category>
      </categories>
      <tags>
        <tag>Latex安装</tag>
        <tag>Windows10</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建个人博客(Hexo+Next+Github）</title>
    <url>/Blog/2019/10/12/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\Blog\assets\css\APlayer.min.css"><script src="\Blog\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\Blog\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>在经过多个教程摸索和尝试后，发现手把手有时候挺坑人的，毕竟经验还是要自己攒，不然没踩的坑迟早要踩到，最终我的个人博客<a href="https://linwhitehat.github.io/">林深时见璐</a>搭建完成，这篇教程会从本地博客建立到实现美观的网络博客进行记录分享，这篇博客也就会随着本博客的每一次升级完善而补充，希望能给想自建博客的朋友们提供帮助。</p>
<a id="more"></a>

<h2 id="最初的诞生"><a href="#最初的诞生" class="headerlink" title="最初的诞生"></a>最初的诞生</h2><p>我采用的搭建博客的方式是使用 <a href="https://pages.github.com/" target="_blank" rel="noopener external nofollow noreferrer">GitHub Pages</a> + <a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener external nofollow noreferrer">Hexo</a> 的方式，这个应该是我摸索之后认为的对新手最友好也最优质的方式，只需要投入时间学习和运营，就能拥有美观的个人博客。以下的1 - 3小点是博客的雏形构建<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[博客雏形安装](https://www.jianshu.com/p/956c44c87fb1)">[1]</span></a></sup>。</p>
<h3 id="注册Github账号"><a href="#注册Github账号" class="headerlink" title="注册Github账号"></a>注册Github账号</h3><p>要使用 GitHub Pages，首先你要注册一个<a href="https://github.com/" target="_blank" rel="noopener external nofollow noreferrer">GitHub</a>账号。</p>
<p><img src="/Blog/images/blog-1.png" alt="GitHub注册页"><i class="img-caption">☆ GitHub注册页</i></p>
<h3 id="安装必备软件"><a href="#安装必备软件" class="headerlink" title="安装必备软件"></a>安装必备软件</h3><p>1) 安装<a href="https://git-scm.com/download/win" target="_blank" rel="noopener external nofollow noreferrer">Git</a>客户端</p>
<p>2) 安装<a href="https://nodejs.org/en/" target="_blank" rel="noopener external nofollow noreferrer">Node.js</a></p>
<h3 id="搭建博客"><a href="#搭建博客" class="headerlink" title="搭建博客"></a>搭建博客</h3><ol>
<li>新建博客</li>
</ol>
<p>配置GitHub，步骤如下:</p>
<p>1) 登录GitHub后新建项目（new repository），项目名由两部分组成即GitHub账号名和固定后缀<code>.github.io</code>，比如我的项目就是<code>linwhitehat.github.io</code>，填写完点击创建项目（create repository）。</p>
<p>2) 配置GitHub SSH密钥，本地打开git bash，输入<code>ssh-keygen -t rsa -C &quot;your&#39;s emaill address&quot;</code>，其中your’s email address换成GitHub账号的邮箱地址，第一次点击回车键（Enter）会显示存储位置，第二次点击回车键会显示输入密钥，按照要求输入密钥两次(输入过程是看不到密钥的)，之后在第一次显示的存储位置打开文件id_rsa.pub，复制文件内所有内容，在GitHub中点击头像可看的setting选项，在setting选项中可看到SSH and GPG keys选项，点击new SSH，然后输入title（方便密钥管理的名字），将刚才复制的内容粘贴到key中。</p>
<p>3）创建本地仓库，在本地选择不包含中文的文件路径，新建一个文件夹，进入文件夹并点击右键选择git bash，输入以下命令进行设置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init</span><br><span class="line">git config --global user.name <span class="string">"Your's name"</span></span><br><span class="line">git config --global user.email <span class="string">"Your's email address"</span></span><br></pre></td></tr></table></figure>
<p>其中<code>Your&#39;s name</code>和<code>Your&#39;s email address</code>替换为GitHub账户名和对应邮箱地址。</p>
<p>4) 安装Hexo，按照之前方式进入git bash终端，输入<code>node</code>检测Node.js是否安装成功，若出现<code>&gt;</code>则表示正常，退出node模式，输入以下命令安装Hexo：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br><span class="line">hexo version</span><br></pre></td></tr></table></figure>
<p>看到输出版本号等信息表示安装Hexo成功，在当前新建的文件夹下新建一个hexo文件夹，在hexo文件夹中进入git bash，输入以下命令配置hexo，完成之后，在浏览器输入<code>http://localhost:4000</code>，正常则可看到初始化的博客，到此便完成本地博客的建立。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init</span><br><span class="line">npm install</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p>5）配置Hexo到GitHub，在hexo文件夹下存在一个配置文件<code>_config.yml</code>，打开后可看到文件最后部分为：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"> <span class="attr">type:</span></span><br></pre></td></tr></table></figure>
<p>将其修改为以下内容，其中<code>yourname</code>为GitHub账号名：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span>  </span><br><span class="line"> <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line"> <span class="attr">repository:</span> <span class="string">http://github.com/yourname/yourname.github.io.git</span></span><br><span class="line"> <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>
<p>保存后，在当前文件夹打开git bash并输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>
<p>若出现错误显示<code>ERROR Deployer not found: git</code>，则输入以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>
<p>若弹出填写GitHub账号用户名和密码则正常填写，完成之后在浏览器输入<code>https://yourname.github.io</code>，yourname替换为GitHub账户名，即可通过互联网访问博客。</p>
<p>6）如果不想自己新建，可以使用现有的他人博客项目进行改建，见<a href="#Section2">第2小节</a>。</p>
<ol start="2">
<li><span id="Section2">使用已有的博客模板</span></li>
</ol>
<p>1) 注册完成后搜索 <code>linwhitehat.github.io</code> 进入<a href="https://github.com/linwhitehat/linwhitehat.github.io" target="_blank" rel="noopener external nofollow noreferrer">我的仓库</a></p>
<p><img src="/Blog/images/blog-2.png" alt="GitHub项目"><i class="img-caption">☆ GitHub项目</i></p>
<p>点击右上角的 <strong>Fork</strong> 将我的仓库拉倒你的账号下</p>
<p>稍等一下，点击刷新，你会看到<strong>Fork</strong>了成功的页面</p>
<p><img src="/Blog/images/blog-3.png" alt="Fork项目"><i class="img-caption">☆ Fork项目</i></p>
<p>2) 修改仓库名</p>
<p>点击<strong>settings</strong>进入设置</p>
<p><img src="/Blog/images/blog-4.png" alt="项目设置修改"><i class="img-caption">☆ 项目设置修改</i></p>
<p id = "Rename"></p>

<p>修改仓库名为 <code>你的Github账号名.github.io</code>，然后 Rename</p>
<p><img src="/Blog/images/blog-5.png" alt="修改项目名"><i class="img-caption">☆ 修改项目名</i></p>
<p>这时你在在浏览器中输入 <code>你的Github账号名.github.io</code> 例如:<code>linwhitehat.github.io</code></p>
<p>你将会看到如下界面</p>
<p><img src="/Blog/images/blog-6.png" alt="博客首页"><i class="img-caption">☆ 博客首页</i></p>
<p>说明已经成功一半了😀当然，还需要修改博客的配置才能变成你的博客。</p>
<p>若是出现</p>
<p><img src="/Blog/images/blog-7.png" alt="访问出错"><i class="img-caption">☆ 访问出错</i></p>
<p>则需要 <a href="#Rename">检查一下你的仓库名是否正确</a></p>
<h3 id="修改博客配置"><a href="#修改博客配置" class="headerlink" title="修改博客配置"></a>修改博客配置</h3><p>来到你的仓库，找到<code>_config.yml</code>文件,这是网站的全局配置文件。</p>
<p><img src="/Blog/images/blog-8.png" alt="博客配置文件"><i class="img-caption">☆ 博客配置文件</i></p>
<p>点击修改</p>
<p><img src="/Blog/images/blog-9.png" alt="修改配置文件"><i class="img-caption">☆ 修改配置文件</i></p>
<p>然后编辑<code>_config.yml</code>的内容</p>
<p><img src="/Blog/images/blog-10.png" alt="配置文件内容修改"><i class="img-caption">☆ 配置文件内容修改</i></p>
<p>接下来我们来详细说说以下配置文件的内容：</p>
<h3 id="基础设置说明"><a href="#基础设置说明" class="headerlink" title="基础设置说明"></a>基础设置说明</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Site settings</span></span><br><span class="line">title: Your Blog    				    <span class="comment">#你博客的标题</span></span><br><span class="line">SEOTitle: 你的博客 | Your Blog    	    <span class="comment">#显示在浏览器上搜索的时候显示的标题</span></span><br><span class="line">header-img: img/post-bg-rwd.jpg  	    <span class="comment">#显示在首页的背景图片</span></span><br><span class="line">email: You@gmail.com	</span><br><span class="line">description: <span class="string">"You Blog"</span>  			    <span class="comment">#网站介绍</span></span><br><span class="line">keyword: <span class="string">"L1n, L1n Blog"</span> <span class="comment">#关键词</span></span><br><span class="line">url: <span class="string">"https://linwhitehat.github.io"</span>  <span class="comment"># 这个就是填写你的博客地址</span></span><br><span class="line">baseurl: <span class="string">""</span>                           <span class="comment"># 这个我们不用填写</span></span><br></pre></td></tr></table></figure>

<p>至此，一个初具形态的博客便生成了。</p>
<h2 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h2><ol>
<li>本文中新建仓库建立博客的方式，在本地建立仓库后，又再新建一个hexo文件，且将hexo配置托管到GitHub之后，GitHub项目便被hexo文件夹下的<code>.deploy_git</code>覆盖，之后修改博客维护项目只需要在hexo文件夹下的git bash进行hexo处理即可。</li>
<li>本文博客搭建的目录结构如下，相关博客搭建及<a href="https://linwhitehat.github.io/Blog/2020/01/30/%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96.html">优化教程</a>中涉及的路径参照此目录树：</li>
</ol>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"># 博客根目录</span><br><span class="line">|-- hexo</span><br><span class="line">|   |-- _config.yml</span><br><span class="line">|   |-- node_modules</span><br><span class="line">|   |-- public</span><br><span class="line">|   |-- scaffolds</span><br><span class="line">|   |-- source</span><br><span class="line">|   `-- themes</span><br><span class="line"></span><br><span class="line"># 主题根目录</span><br><span class="line">|-- themes</span><br><span class="line">    `-- next</span><br><span class="line">    |-- LICENSE.md</span><br><span class="line">    |-- README.md</span><br><span class="line">    |-- _config.yml</span><br><span class="line">    |-- docs</span><br><span class="line">    |-- languages</span><br><span class="line">    |-- layout</span><br><span class="line">    |-- scripts</span><br><span class="line">    `-- source</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>Hexo卸载方式，在git bash执行以下命令：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm uninstall hexo-cli -g</span><br><span class="line">npm uninstall hexo -g</span><br></pre></td></tr></table></figure>
<p>博客相应的文件目录需要手动删除。</p>
<h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>博客搭建基本完成，但是博客中有很多地方可以自定义设计，这也是自建博客的初衷，熟悉Hexo和Next.Mist的配置后，会逐步优化博客样式。</p>
<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.jianshu.com/p/956c44c87fb1" target="_blank" rel="noopener external nofollow noreferrer">博客雏形安装</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>技术分享</category>
        <category>博客</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Next</tag>
        <tag>GitHub</tag>
      </tags>
  </entry>
</search>
